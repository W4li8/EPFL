
cpu1_gamelogic.elf:     file format elf32-littlenios2
cpu1_gamelogic.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04100244

Program Header:
    LOAD off    0x00001000 vaddr 0x04100000 paddr 0x04100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04100020 paddr 0x04100020 align 2**12
         filesz 0x0000f9fc memsz 0x0000f9fc flags r-x
    LOAD off    0x00010a1c vaddr 0x0410fa1c paddr 0x04111580 align 2**12
         filesz 0x00001b64 memsz 0x00001b64 flags rw-
    LOAD off    0x000130e4 vaddr 0x041130e4 paddr 0x041130e4 align 2**12
         filesz 0x00000000 memsz 0x00009404 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04100000  04100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04100020  04100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f534  04100244  04100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002a4  0410f778  0410f778  00010778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b64  0410fa1c  04111580  00010a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009404  041130e4  041130e4  000130e4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  0411c4e8  0411c4e8  00012580  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08040000  08040000  00012580  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012580  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cb0  00000000  00000000  000125a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002374e  00000000  00000000  00013258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008b51  00000000  00000000  000369a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a045  00000000  00000000  0003f4f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002b80  00000000  00000000  0004953c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003ffd  00000000  00000000  0004c0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00005cf4  00000000  00000000  000500b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00055db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000830  00000000  00000000  00055de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0005ab66  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0005ab6c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005ab78  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005ab79  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0005ab7a  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0005ab85  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0005ab90  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0005ab9b  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000022  00000000  00000000  0005aba7  2**0
                  CONTENTS, READONLY
 27 .jdi          0000a156  00000000  00000000  0005abc9  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000a1969  00000000  00000000  00064d1f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04100000 l    d  .entry	00000000 .entry
04100020 l    d  .exceptions	00000000 .exceptions
04100244 l    d  .text	00000000 .text
0410f778 l    d  .rodata	00000000 .rodata
0410fa1c l    d  .rwdata	00000000 .rwdata
041130e4 l    d  .bss	00000000 .bss
0411c4e8 l    d  .sdram_controller_0	00000000 .sdram_controller_0
08040000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/vm/Documents/QuartusQuake/sw/cpu1_gamelogic_bsp//obj/HAL/src/crt0.o
0410028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
041130e4 l     O .bss	00000008 playerfield
041130ec l     O .bss	00000008 computerfield
041130f4 l     O .bss	00000001 recentshot_player
041130f5 l     O .bss	00000001 recentshot_computer
041130f6 l     O .bss	00000001 player_ready
04100290 l     F .text	000000dc remove_collisions.4111
041005e8 l     F .text	00000104 computermove
041006ec l     F .text	00000118 playermove
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 findfp.c
04100f54 l     F .text	00000008 __fp_unlock
04100f68 l     F .text	0000019c __sinit.part.1
04101104 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
0410fa1c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04103970 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04103a7c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04103aa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
04104028 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04104108 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
041041f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
041043c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
041114e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
041047b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
041114f4 l     O .rwdata	00000004 lockid
04113138 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
041114f8 l     O .rwdata	00000004 lockid
04113140 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
041061e0 l     F .text	00000048 OS_InitMisc
04106228 l     F .text	0000006c OS_InitRdyList
04106394 l     F .text	000000e4 OS_InitTCBList
04106100 l     F .text	000000e0 OS_InitEventList
04106294 l     F .text	00000080 OS_InitTaskIdle
04106314 l     F .text	00000080 OS_InitTaskStat
04106604 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
04108314 l     F .text	000000f4 OS_FlagTaskRdy
041080d4 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0410c3b8 l     F .text	00000034 alt_dev_reg
0410c3ec l     F .text	0000003c alt_get_errno
0410c428 l     F .text	000000a8 alt_avalon_mutex_reg
041103f0 l     O .rwdata	0000106c jtag_uart_1
0411145c l     O .rwdata	0000004c mailbox_simple_0
041114a8 l     O .rwdata	00000014 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0410c830 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0410cad4 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0410d2b0 l     F .text	00000090 altera_avalon_mailbox_identify
0410d340 l     F .text	00000078 altera_avalon_mailbox_post
0410d3b8 l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
0410d4f0 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0410dc74 l     F .text	0000003c alt_get_errno
0410dcb0 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0410dfc0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0410e228 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0410e528 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0410e668 l     F .text	0000003c alt_get_errno
0410e6a4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
04113198 g     O .bss	00000004 alt_instruction_exception_handler
0410d9b0 g     F .text	00000188 altera_avalon_mailbox_send
04111546 g     O .rwdata	00000002 OSTaskNameSize
041038bc g     F .text	00000054 _isatty_r
04104304 g     F .text	000000bc alt_main
04100d1c g     F .text	000000c0 _puts_r
041191c4 g     O .bss	00000100 alt_irq
041035e4 g     F .text	00000060 _lseek_r
04108b34 g     F .text	000000cc OS_MemInit
04111580 g       *ABS*	00000000 __flash_rwdata_start
0410c358 g     F .text	00000060 OSTimeSet
04101938 g     F .text	0000005c _gettimeofday_r
04104e54 g     F .text	00000610 OSEventPendMulti
041130f8 g     O .bss	00000004 mutti
0411c4e8 g       *ABS*	00000000 __alt_heap_start
0410eb0c g     F .text	00000024 OSTaskCreateHook
041131c4 g     O .bss	00002000 task1_stk
0411151e g     O .rwdata	00000002 OSMboxEn
041054bc g     F .text	0000004c OSIntEnter
04102b98 g     F .text	0000005c __sseek
041012a4 g     F .text	00000010 __sinit
0411152e g     O .rwdata	00000002 OSQEn
0410110c g     F .text	00000068 __sfmoreglue
04104b28 g     F .text	000000cc __malloc_unlock
0410eb74 g     F .text	00000020 OSTaskStatHook
04113148 g     O .bss	00000001 OSLockNesting
0411156c g     O .rwdata	00000002 OSDataSize
04113149 g     O .bss	00000001 OSRunning
04102284 g     F .text	0000015c memmove
0410ebb4 g     F .text	00000020 OSInitHookBegin
04111564 g     O .rwdata	00000002 OSTmrSize
0410128c g     F .text	00000018 _cleanup
0410de10 g     F .text	00000080 altera_avalon_mutex_trylock
0411314c g     O .bss	00000004 OSIdleCtr
0410e8bc g     F .text	00000024 altera_nios2_gen2_irq_init
0410e98c g       .text	00000000 OSStartTsk
04106934 g     F .text	000002d4 OS_TCBInit
0410036c g     F .text	0000027c movebullets
04100000 g     F .entry	0000001c __reset
0411156a g     O .rwdata	00000002 OSTmrWheelTblSize
0410defc g     F .text	00000074 altera_avalon_mutex_is_mine
04100020 g       *ABS*	00000000 __flash_exceptions_start
0411150a g     O .rwdata	00000002 OSEventSize
04113150 g     O .bss	00000001 OSPrioHighRdy
04103860 g     F .text	0000005c _fstat_r
0410eb30 g     F .text	00000024 OSTaskDelHook
041130fc g     O .bss	00000004 errno
04102b14 g     F .text	00000008 __seofread
0410e96c g       .text	00000000 OSStartHighRdy
0410ae00 g     F .text	000001e4 OSTaskCreateExt
04107c1c g     F .text	00000060 OSFlagPendGetFlagsRdy
0411154a g     O .rwdata	00000002 OSTaskStatStkSize
04106d98 g     F .text	00000308 OSFlagAccept
0410916c g     F .text	000000b8 OSQFlush
04108c00 g     F .text	00000140 OSQAccept
04113128 g     O .bss	00000004 alt_argv
041194bc g       *ABS*	00000000 _gp
0410db38 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
0410ac54 g     F .text	000001ac OSTaskCreate
0410a764 g     F .text	000004f0 OSTaskChangePrio
04113144 g     O .bss	00000004 alt_heapsem
04106c08 g     F .text	00000190 OSDebugInit
0410afe4 g     F .text	00000344 OSTaskDel
04110270 g     O .rwdata	00000180 alt_fd_list
041192c4 g     O .bss	00000370 OSFlagTbl
04105ee0 g     F .text	000000b8 OS_EventTaskRemove
0410e3c8 g     F .text	00000090 alt_find_dev
04100bd4 g     F .text	00000148 memcpy
04111534 g     O .rwdata	00000002 OSRdyTblSize
04100f5c g     F .text	0000000c _cleanup_r
0410e5ec g     F .text	0000007c alt_io_redirect
0410f778 g       *ABS*	00000000 __DTOR_END__
04100ddc g     F .text	00000014 puts
0410e48c g     F .text	0000009c alt_exception_cause_generated_bad_addr
04104bf4 g     F .text	00000120 OSEventNameGet
04111518 g     O .rwdata	00000002 OSFlagMax
0410d598 g     F .text	000000a4 altera_avalon_mailbox_simple_init
04105508 g     F .text	000000f8 OSIntExit
04111552 g     O .rwdata	00000002 OSTCBSize
04113151 g     O .bss	00000001 OSPrioCur
0410cd30 g     F .text	000002bc altera_avalon_jtag_uart_read
08040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
04100b18 g     F .text	00000064 .hidden __udivsi3
04104064 g     F .text	000000a4 isatty
04111538 g     O .rwdata	00000002 OSStkWidth
0411152c g     O .rwdata	00000002 OSPtrSize
0410d938 g     F .text	00000078 altera_avalon_mailbox_status
0410d820 g     F .text	00000118 altera_avalon_mailbox_close
04100804 g     F .text	000000b8 reset_game
0411150c g     O .rwdata	00000002 OSEventTblSize
04113110 g     O .bss	00000008 alt_timezone
0410e8e0 g       .text	00000000 OSCtxSw
0410ee1c g     F .text	00000090 alt_icache_flush
04113108 g     O .bss	00000004 __malloc_top_pad
04113154 g     O .bss	00000004 OSTCBList
0411310c g     O .bss	00000004 alt_fd_list_lock
041012f4 g     F .text	000004bc __sfvwrite_r
04119634 g     O .bss	00000c30 OSMemTbl
04113158 g     O .bss	00000001 OSTickStepState
04102a6c g     F .text	00000054 _sbrk_r
04111530 g     O .rwdata	00000002 OSQMax
0411a264 g     O .bss	00000800 OSTaskStatStk
04108770 g     F .text	000000f0 OSMemNameGet
04111510 g     O .rwdata	00000002 OSFlagEn
04103800 g     F .text	00000060 _read_r
04111556 g     O .rwdata	00000002 OSTimeTickHookEn
0410961c g     F .text	00000168 OSQPost
04108408 g     F .text	000000a4 OS_FlagUnlink
041114dc g     O .rwdata	00000004 alt_max_fd
041064cc g     F .text	00000068 OS_MemCopy
04106534 g     F .text	000000d0 OS_Sched
04102e04 g     F .text	000000f0 _fclose_r
04108680 g     F .text	000000f0 OSMemGet
0410b610 g     F .text	000001b4 OSTaskNameSet
04103180 g     F .text	00000030 fflush
04113104 g     O .bss	00000004 __malloc_max_sbrked_mem
0411315c g     O .bss	00000004 OSCtxSwCtr
0410eb94 g     F .text	00000020 OSTimeTickHook
0411151a g     O .rwdata	00000002 OSFlagNameSize
04105f98 g     F .text	00000100 OS_EventTaskRemoveMulti
04105d90 g     F .text	00000150 OS_EventTaskWaitMulti
04111532 g     O .rwdata	00000002 OSQSize
0410f20c g     F .text	00000538 .hidden __umoddi3
04104230 g     F .text	000000d4 lseek
0410df70 g     F .text	00000050 altera_avalon_mutex_first_lock
0410a0cc g     F .text	0000020c OSSemPend
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
041114bc g     O .rwdata	00000004 _global_impure_ptr
04102508 g     F .text	00000564 _realloc_r
0411151c g     O .rwdata	00000002 OSLowestPrio
0411c4e8 g       *ABS*	00000000 __bss_end
04103f38 g     F .text	000000f0 alt_iic_isr_register
0410ec14 g     F .text	00000024 OSTCBInitHook
04111562 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
041046a8 g     F .text	00000108 alt_tick
04111504 g     O .rwdata	00000002 OSEventEn
0411155e g     O .rwdata	00000002 OSTmrCfgNameSize
041012c4 g     F .text	00000018 __fp_lock_all
04103eec g     F .text	0000004c alt_ic_irq_enabled
04108234 g     F .text	000000e0 OS_FlagInit
0410460c g     F .text	0000009c alt_alarm_stop
04111540 g     O .rwdata	00000002 OSTaskIdleStkSize
04113120 g     O .bss	00000004 alt_irq_active
04109d04 g     F .text	000000b0 OSSemAccept
04108974 g     F .text	000000d8 OSMemPut
041084ac g     F .text	000001d4 OSMemCreate
04113160 g     O .bss	00000004 OSIdleCtrMax
041000fc g     F .exceptions	000000d4 alt_irq_handler
04110248 g     O .rwdata	00000028 alt_dev_null
04111554 g     O .rwdata	00000002 OSTicksPerSec
0410dd2c g     F .text	00000054 altera_avalon_mutex_open
0410e8e0 g       .text	00000000 OSIntCtxSw
0410e1e0 g     F .text	00000048 alt_dcache_flush_all
04113164 g     O .bss	00000004 OSTCBFreeList
04111580 g       *ABS*	00000000 __ram_rwdata_end
0410a2d8 g     F .text	0000016c OSSemPendAbort
041114d4 g     O .rwdata	00000008 alt_dev_list
041047ec g     F .text	000000f8 write
04111558 g     O .rwdata	00000002 OSVersionNbr
04111578 g     O .rwdata	00000008 alt_mutex_list
0410fa1c g       *ABS*	00000000 __ram_rodata_end
04103ae4 g     F .text	000000b0 fstat
04111500 g     O .rwdata	00000004 OSEndiannessTest
04100b7c g     F .text	00000058 .hidden __umodsi3
04111512 g     O .rwdata	00000002 OSFlagGrpSize
0411c4e8 g       *ABS*	00000000 end
0410c6e8 g     F .text	00000148 altera_avalon_jtag_uart_init
0410679c g     F .text	000000cc OS_TaskStat
041001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0410f778 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0410e038 g     F .text	0000007c alt_avalon_timer_sc_init
0410cfec g     F .text	000002c4 altera_avalon_jtag_uart_write
041012b4 g     F .text	00000004 __sfp_lock_acquire
041021a0 g     F .text	000000e4 memchr
04106478 g     F .text	00000054 OS_MemClr
0410e9b0 g     F .text	0000015c OSTaskStkInit
041032d4 g     F .text	00000310 _free_r
04105ae8 g     F .text	00000198 OS_EventTaskRdy
0410f08c g     F .text	00000180 __call_exitprocs
04113168 g     O .bss	00000001 OSCPUUsage
041114c4 g     O .rwdata	00000004 __malloc_sbrk_base
04100244 g     F .text	0000004c _start
04113130 g     O .bss	00000004 _alt_tick_rate
04109224 g     F .text	0000028c OSQPend
0410bed0 g     F .text	00000104 OSTimeDly
04100e08 g     F .text	00000064 rand
04113134 g     O .bss	00000004 _alt_nticks
041043fc g     F .text	000000fc read
0410c508 g     F .text	0000007c alt_sys_init
0410ef74 g     F .text	00000118 __register_exitproc
04113169 g     O .bss	00000001 OSTaskCtr
0410de90 g     F .text	0000006c altera_avalon_mutex_unlock
0410bfd4 g     F .text	00000154 OSTimeDlyHMSM
0410cbd8 g     F .text	00000068 altera_avalon_jtag_uart_close
0410fa1c g       *ABS*	00000000 __ram_rwdata_start
0410f778 g       *ABS*	00000000 __ram_rodata_start
0411319c g     O .bss	00000028 __malloc_current_mallinfo
04111506 g     O .rwdata	00000002 OSEventMax
0410a444 g     F .text	00000110 OSSemPost
0410568c g     F .text	000000dc OSSchedUnlock
0410c584 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0410ed40 g     F .text	000000dc alt_get_fd
0411316c g     O .bss	00000004 OSMemFreeList
041057d8 g     F .text	000000b0 OSStatInit
04108010 g     F .text	000000c4 OSFlagQuery
0411153c g     O .rwdata	00000002 OSTaskCreateExtEn
04102db0 g     F .text	00000054 _close_r
0410eef8 g     F .text	0000007c memcmp
04105ac8 g     F .text	00000020 OS_Dummy
0410c644 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0411c4e8 g       *ABS*	00000000 __alt_stack_base
0410c694 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
041008bc g     F .text	00000040 reset_score
04102c5c g     F .text	00000154 __swsetup_r
041008fc g     F .text	00000064 init
0411aa64 g     O .bss	000001e0 OSQTbl
04101174 g     F .text	00000118 __sfp
0410fe40 g     O .rwdata	00000408 __malloc_av_
041012c0 g     F .text	00000004 __sinit_lock_release
04113170 g     O .bss	00000004 OSTCBHighRdy
04102ac0 g     F .text	00000054 __sread
04113174 g     O .bss	00000004 OSQFreeList
0410ec38 g     F .text	00000108 alt_find_file
0410e264 g     F .text	000000a4 alt_dev_llist_insert
04104a08 g     F .text	00000120 __malloc_lock
0410455c g     F .text	000000b0 sbrk
04104d14 g     F .text	00000140 OSEventNameSet
04103124 g     F .text	0000005c _fflush_r
04113178 g     O .bss	00000001 OSRdyGrp
04103b94 g     F .text	000001f4 gettimeofday
041130e4 g       *ABS*	00000000 __bss_start
041023e0 g     F .text	00000128 memset
04100960 g     F .text	000000c0 main
0411312c g     O .bss	00000004 alt_envp
04113100 g     O .bss	00000004 __malloc_max_total_mem
0410c5e4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04100df0 g     F .text	00000018 srand
0410f7bc g     O .rodata	00000100 OSUnMapTbl
04111536 g     O .rwdata	00000002 OSSemEn
04107c7c g     F .text	00000394 OSFlagPost
04102bf4 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04102ef4 g     F .text	00000014 fclose
04105c80 g     F .text	00000110 OS_EventTaskWait
041151c4 g     O .bss	00002000 task2_stk
04106868 g     F .text	000000cc OS_TaskStatStkChk
0410dda4 g     F .text	0000006c altera_avalon_mutex_lock
0410b328 g     F .text	00000150 OSTaskDelReq
04101994 g     F .text	0000080c _malloc_r
04100f04 g     F .text	00000050 time
041114e0 g     O .rwdata	00000004 alt_errno
04105768 g     F .text	00000070 OSStart
041171c4 g     O .bss	00002000 task3_stk
041049a8 g     F .text	00000060 __env_unlock
041017b0 g     F .text	000000c4 _fwalk
0410b7c4 g     F .text	000001d4 OSTaskResume
04108a4c g     F .text	000000e8 OSMemQuery
04111548 g     O .rwdata	00000002 OSTaskStatEn
04111522 g     O .rwdata	00000002 OSMemMax
04109784 g     F .text	00000170 OSQPostFront
04100a20 g     F .text	00000084 .hidden __divsi3
04113179 g     O .bss	00000003 OSRdyTbl
041114fc g     O .rwdata	00000002 OSDebugEn
041031b0 g     F .text	00000124 _malloc_trim_r
0410f778 g       *ABS*	00000000 __CTOR_END__
04111514 g     O .rwdata	00000002 OSFlagNodeSize
0411155c g     O .rwdata	00000002 OSTmrCfgMax
04108d40 g     F .text	000001ac OSQCreate
0410b478 g     F .text	00000198 OSTaskNameGet
0410f778 g       *ABS*	00000000 __flash_rodata_start
041098f4 g     F .text	0000020c OSQPostOpt
04105888 g     F .text	00000220 OSTimeTick
04111544 g     O .rwdata	00000002 OSTaskMax
0410f778 g       *ABS*	00000000 __DTOR_LIST__
04109db4 g     F .text	000000d8 OSSemCreate
04111568 g     O .rwdata	00000002 OSTmrWheelSize
0411153e g     O .rwdata	00000002 OSTaskDelEn
0410a554 g     F .text	00000110 OSSemQuery
04108eec g     F .text	00000280 OSQDel
041094b0 g     F .text	0000016c OSQPendAbort
0410c4d0 g     F .text	00000038 alt_irq_init
041044f8 g     F .text	00000064 alt_release_fd
0410f91a g     O .rodata	00000100 .hidden __clz_tab
0410eeac g     F .text	00000014 atexit
04102bfc g     F .text	00000060 _write_r
04105600 g     F .text	0000008c OSSchedLock
041070a0 g     F .text	00000108 OSFlagCreate
041114c0 g     O .rwdata	00000004 _impure_ptr
04113124 g     O .bss	00000004 alt_argc
04102f08 g     F .text	0000021c __sflush_r
0410e368 g     F .text	00000060 _do_dtors
0411150e g     O .rwdata	00000002 OSEventMultiEn
041071a8 g     F .text	00000248 OSFlagDel
0411317c g     O .bss	00000004 OSEventFreeList
04100020 g       .exceptions	00000000 alt_irq_entry
04107664 g     F .text	000005b8 OSFlagPend
0411155a g     O .rwdata	00000002 OSTmrEn
041012dc g     F .text	00000018 __fp_unlock_all
041114cc g     O .rwdata	00000008 alt_fs_list
04106678 g     F .text	00000074 OS_StrCopy
04113118 g     O .bss	00000008 alt_resettime
04111524 g     O .rwdata	00000002 OSMemNameSize
0410ebd4 g     F .text	00000020 OSInitHookEnd
04100020 g       *ABS*	00000000 __ram_exceptions_start
04111550 g     O .rwdata	00000002 OSTCBPrioTblMax
0411154c g     O .rwdata	00000002 OSTaskStatStkChkEn
04103d88 g     F .text	00000050 alt_ic_isr_register
04111520 g     O .rwdata	00000002 OSMemEn
0411152a g     O .rwdata	00000002 OSMutexEn
04111580 g       *ABS*	00000000 _edata
0411c4e8 g       *ABS*	00000000 _end
04113180 g     O .bss	00000001 OSIntNesting
04100244 g       *ABS*	00000000 __ram_exceptions_end
0410cc40 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0410c128 g     F .text	000001d4 OSTimeDlyResume
04107518 g     F .text	0000014c OSFlagNameSet
0410b998 g     F .text	000001c0 OSTaskStkChk
04103e60 g     F .text	0000008c alt_ic_irq_disable
04111526 g     O .rwdata	00000002 OSMemSize
04111570 g     O .rwdata	00000008 alt_mailbox_simple_list
04102b1c g     F .text	0000007c __swrite
041114c8 g     O .rwdata	00000004 __malloc_trim_threshold
04113184 g     O .bss	00000004 OSTCBCur
0410eec0 g     F .text	00000038 exit
04111528 g     O .rwdata	00000002 OSMemTblSize
04101874 g     F .text	000000c4 _fwalk_reent
04100aa4 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04100020 g     F .exceptions	00000000 alt_exception
041012b8 g     F .text	00000004 __sfp_lock_release
04105464 g     F .text	00000058 OSInit
0410bd3c g     F .text	00000124 OSTaskQuery
04109c5c g     F .text	000000a8 OS_QInit
041066ec g     F .text	00000054 OS_StrLen
04108860 g     F .text	00000114 OSMemNameSet
04111542 g     O .rwdata	00000002 OSTaskProfileEn
04113188 g     O .bss	00000004 OSTime
0410d63c g     F .text	000001e4 altera_avalon_mailbox_open
0411ac44 g     O .bss	00000800 OSTaskIdleStk
0410f744 g     F .text	00000034 _exit
0410e0b4 g     F .text	0000012c alt_alarm_start
041073f0 g     F .text	00000128 OSFlagNameGet
0410c2fc g     F .text	0000005c OSTimeGet
04103910 g     F .text	00000060 .hidden __muldi3
04103644 g     F .text	000001bc __smakebuf_r
04100e6c g     F .text	00000098 strlen
0410eb54 g     F .text	00000020 OSTaskSwHook
0410e768 g     F .text	00000154 open
0411b444 g     O .bss	00000b40 OSEventTbl
0411bf84 g     O .bss	00000510 OSTCBTbl
0410a664 g     F .text	00000100 OSSemSet
0410e458 g     F .text	00000034 alt_icache_flush_all
041114e4 g     O .rwdata	00000004 alt_priority_mask
04109e8c g     F .text	00000240 OSSemDel
0411318c g     O .bss	00000004 OSFlagFreeList
04103dd8 g     F .text	00000088 alt_ic_irq_enable
04111508 g     O .rwdata	00000002 OSEventNameSize
04113190 g     O .bss	00000001 OSStatRdy
0410dd80 g     F .text	00000024 altera_avalon_mutex_close
0411c494 g     O .bss	00000054 OSTCBPrioTbl
041048e4 g     F .text	000000c4 __env_lock
0411154e g     O .rwdata	00000002 OSTaskSwHookEn
041114ec g     O .rwdata	00000008 alt_alarm_list
04111516 g     O .rwdata	00000002 OSFlagWidth
0410e308 g     F .text	00000060 _do_ctors
041039ac g     F .text	000000d0 close
0411313c g     O .bss	00000004 alt_envsem
04113194 g     O .bss	00000004 OSIdleCtrRun
04105aa8 g     F .text	00000020 OSVersion
04111560 g     O .rwdata	00000002 OSTmrCfgWheelSize
04104170 g     F .text	00000084 alt_load
0410be60 g     F .text	00000070 OS_TaskStkClr
0411153a g     O .rwdata	00000002 OSTaskCreateEn
04106098 g     F .text	00000068 OS_EventWaitListInit
0410ebf4 g     F .text	00000020 OSTaskIdleHook
041012bc g     F .text	00000004 __sinit_lock_acquire
0410bb58 g     F .text	000001e4 OSTaskSuspend
04106740 g     F .text	0000005c OS_TaskIdle
04111566 g     O .rwdata	00000002 OSTmrTblSize
04109b00 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

04100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 410000c:	00bffd16 	blt	zero,r2,4100004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4100010:	00410434 	movhi	at,1040
    ori r1, r1, %lo(_start)
 4100014:	08409114 	ori	at,at,580
    jmp r1
 4100018:	0800683a 	jmp	at
 410001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

04100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 410002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 410003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 410004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 410005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 410006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 410007c:	10000326 	beq	r2,zero,410008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4100080:	20000226 	beq	r4,zero,410008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4100084:	41000fc0 	call	41000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4100088:	00000706 	br	41000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 410008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4100098:	41001d00 	call	41001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 410009c:	1000021e 	bne	r2,zero,41000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 41000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 41000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 41000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 41000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 41000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 41000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 41000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 41000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 41000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 41000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 41000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 41000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 41000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 41000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 41000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 41000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 41000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 41000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 41000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 41000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 41000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 41000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 41000f8:	ef80083a 	eret

041000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 41000fc:	defff904 	addi	sp,sp,-28
 4100100:	dfc00615 	stw	ra,24(sp)
 4100104:	df000515 	stw	fp,20(sp)
 4100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 410010c:	41054bc0 	call	41054bc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4100110:	0005313a 	rdctl	r2,ipending
 4100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 410011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4100124:	00800044 	movi	r2,1
 4100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 410012c:	e0fffb17 	ldw	r3,-20(fp)
 4100130:	e0bffc17 	ldw	r2,-16(fp)
 4100134:	1884703a 	and	r2,r3,r2
 4100138:	10001426 	beq	r2,zero,410018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 410013c:	008104b4 	movhi	r2,1042
 4100140:	10a47104 	addi	r2,r2,-28220
 4100144:	e0fffd17 	ldw	r3,-12(fp)
 4100148:	180690fa 	slli	r3,r3,3
 410014c:	10c5883a 	add	r2,r2,r3
 4100150:	10c00017 	ldw	r3,0(r2)
 4100154:	008104b4 	movhi	r2,1042
 4100158:	10a47104 	addi	r2,r2,-28220
 410015c:	e13ffd17 	ldw	r4,-12(fp)
 4100160:	200890fa 	slli	r4,r4,3
 4100164:	1105883a 	add	r2,r2,r4
 4100168:	10800104 	addi	r2,r2,4
 410016c:	10800017 	ldw	r2,0(r2)
 4100170:	1009883a 	mov	r4,r2
 4100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 410017c:	0005313a 	rdctl	r2,ipending
 4100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4100184:	e0bfff17 	ldw	r2,-4(fp)
 4100188:	00000706 	br	41001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 410018c:	e0bffc17 	ldw	r2,-16(fp)
 4100190:	1085883a 	add	r2,r2,r2
 4100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4100198:	e0bffd17 	ldw	r2,-12(fp)
 410019c:	10800044 	addi	r2,r2,1
 41001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 41001a4:	003fe106 	br	410012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 41001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 41001ac:	e0bffb17 	ldw	r2,-20(fp)
 41001b0:	103fdb1e 	bne	r2,zero,4100120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 41001b4:	41055080 	call	4105508 <OSIntExit>
}
 41001b8:	0001883a 	nop
 41001bc:	e037883a 	mov	sp,fp
 41001c0:	dfc00117 	ldw	ra,4(sp)
 41001c4:	df000017 	ldw	fp,0(sp)
 41001c8:	dec00204 	addi	sp,sp,8
 41001cc:	f800283a 	ret

041001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 41001d0:	defffb04 	addi	sp,sp,-20
 41001d4:	dfc00415 	stw	ra,16(sp)
 41001d8:	df000315 	stw	fp,12(sp)
 41001dc:	df000304 	addi	fp,sp,12
 41001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 41001e4:	000531fa 	rdctl	r2,exception
 41001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 41001ec:	e0bffd17 	ldw	r2,-12(fp)
 41001f0:	10801f0c 	andi	r2,r2,124
 41001f4:	1004d0ba 	srli	r2,r2,2
 41001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 41001fc:	0005333a 	rdctl	r2,badaddr
 4100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4100204:	d0a73717 	ldw	r2,-25380(gp)
 4100208:	10000726 	beq	r2,zero,4100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 410020c:	d0a73717 	ldw	r2,-25380(gp)
 4100210:	e0fffd17 	ldw	r3,-12(fp)
 4100214:	e1bffe17 	ldw	r6,-8(fp)
 4100218:	e17fff17 	ldw	r5,-4(fp)
 410021c:	1809883a 	mov	r4,r3
 4100220:	103ee83a 	callr	r2
 4100224:	00000206 	br	4100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 410022c:	0005883a 	mov	r2,zero
}
 4100230:	e037883a 	mov	sp,fp
 4100234:	dfc00117 	ldw	ra,4(sp)
 4100238:	df000017 	ldw	fp,0(sp)
 410023c:	dec00204 	addi	sp,sp,8
 4100240:	f800283a 	ret

Disassembly of section .text:

04100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 410024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4100250:	00bffd16 	blt	zero,r2,4100248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4100254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 410025c:	06810474 	movhi	gp,1041
    ori gp, gp, %lo(_gp)
 4100260:	d6a52f14 	ori	gp,gp,38076
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4100264:	00810474 	movhi	r2,1041
    ori r2, r2, %lo(__bss_start)
 4100268:	108c3914 	ori	r2,r2,12516

    movhi r3, %hi(__bss_end)
 410026c:	00c10474 	movhi	r3,1041
    ori r3, r3, %lo(__bss_end)
 4100270:	18f13a14 	ori	r3,r3,50408

    beq r2, r3, 1f
 4100274:	10c00326 	beq	r2,r3,4100284 <_start+0x40>

0:
    stw zero, (r2)
 4100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 410027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4100280:	10fffd36 	bltu	r2,r3,4100278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4100284:	41041700 	call	4104170 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4100288:	41043040 	call	4104304 <alt_main>

0410028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 410028c:	003fff06 	br	410028c <alt_after_alt_main>

04100290 <remove_collisions.4111>:
/* Update game map with bullets' displacement at time steps of varying difficulty */
void movebullets(void* pdata) // might have to be renamed to game update and include some logic too
{
	IOWR_8DIRECT(GAME_STATUS,0,'W');
	  void remove_collisions(uint8_t* player,uint8_t* computer)
	  {
 4100290:	defff904 	addi	sp,sp,-28
 4100294:	df000615 	stw	fp,24(sp)
 4100298:	df000604 	addi	fp,sp,24
 410029c:	e13ffd15 	stw	r4,-12(fp)
 41002a0:	e17ffe15 	stw	r5,-8(fp)
 41002a4:	e33fff15 	stw	r12,-4(fp)
	    uint8_t tmp2 = playerfield[7];
 41002a8:	d1270bc3 	ldbu	r4,-25553(gp)
 41002ac:	e13ffa05 	stb	r4,-24(fp)
	    uint64_t overlap = *((uint64_t*)player) & (*((uint64_t*)computer));
 41002b0:	e13ffd17 	ldw	r4,-12(fp)
 41002b4:	23000017 	ldw	r12,0(r4)
 41002b8:	23400117 	ldw	r13,4(r4)
 41002bc:	e3bffe17 	ldw	r14,-8(fp)
 41002c0:	71000017 	ldw	r4,0(r14)
 41002c4:	71400117 	ldw	r5,4(r14)
 41002c8:	611c703a 	and	r14,r12,r4
 41002cc:	e3bffb15 	stw	r14,-20(fp)
 41002d0:	6948703a 	and	r4,r13,r5
 41002d4:	e13ffc15 	stw	r4,-16(fp)
	    *((uint64_t*)player) &= ~overlap;
 41002d8:	e33ffd17 	ldw	r12,-12(fp)
 41002dc:	61000017 	ldw	r4,0(r12)
 41002e0:	61400117 	ldw	r5,4(r12)
 41002e4:	e33ffb17 	ldw	r12,-20(fp)
 41002e8:	0314303a 	nor	r10,zero,r12
 41002ec:	e33ffc17 	ldw	r12,-16(fp)
 41002f0:	0316303a 	nor	r11,zero,r12
 41002f4:	2290703a 	and	r8,r4,r10
 41002f8:	2ad2703a 	and	r9,r5,r11
 41002fc:	e13ffd17 	ldw	r4,-12(fp)
 4100300:	22000015 	stw	r8,0(r4)
 4100304:	22400115 	stw	r9,4(r4)
	    playerfield[7] = tmp2;//^computerfield[7];
 4100308:	e13ffa03 	ldbu	r4,-24(fp)
 410030c:	d1270bc5 	stb	r4,-25553(gp)
	    tmp2 = computer[0];
 4100310:	e13ffe17 	ldw	r4,-8(fp)
 4100314:	21000003 	ldbu	r4,0(r4)
 4100318:	e13ffa05 	stb	r4,-24(fp)
	    *((uint64_t*)computer) &= ~overlap;
 410031c:	e23ffe17 	ldw	r8,-8(fp)
 4100320:	41000017 	ldw	r4,0(r8)
 4100324:	41400117 	ldw	r5,4(r8)
 4100328:	e23ffb17 	ldw	r8,-20(fp)
 410032c:	020c303a 	nor	r6,zero,r8
 4100330:	e23ffc17 	ldw	r8,-16(fp)
 4100334:	020e303a 	nor	r7,zero,r8
 4100338:	2184703a 	and	r2,r4,r6
 410033c:	29c6703a 	and	r3,r5,r7
 4100340:	e13ffe17 	ldw	r4,-8(fp)
 4100344:	20800015 	stw	r2,0(r4)
 4100348:	20c00115 	stw	r3,4(r4)
	    computer[0] = tmp2;//^ playerfield[0];// tmp2;
 410034c:	e0bffe17 	ldw	r2,-8(fp)
 4100350:	e0fffa03 	ldbu	r3,-24(fp)
 4100354:	10c00005 	stb	r3,0(r2)
	  }
 4100358:	0001883a 	nop
 410035c:	e037883a 	mov	sp,fp
 4100360:	df000017 	ldw	fp,0(sp)
 4100364:	dec00104 	addi	sp,sp,4
 4100368:	f800283a 	ret

0410036c <movebullets>:
#define TASK3_PRIORITY  3

void reset_game(void);
/* Update game map with bullets' displacement at time steps of varying difficulty */
void movebullets(void* pdata) // might have to be renamed to game update and include some logic too
{
 410036c:	defff904 	addi	sp,sp,-28
 4100370:	dfc00615 	stw	ra,24(sp)
 4100374:	df000515 	stw	fp,20(sp)
 4100378:	df000504 	addi	fp,sp,20
 410037c:	e13fff15 	stw	r4,-4(fp)
	IOWR_8DIRECT(GAME_STATUS,0,'W');
 4100380:	00c015c4 	movi	r3,87
 4100384:	00820134 	movhi	r2,2052
 4100388:	10c00025 	stbio	r3,0(r2)
	    tmp2 = computer[0];
	    *((uint64_t*)computer) &= ~overlap;
	    computer[0] = tmp2;//^ playerfield[0];// tmp2;
	  }

		printf("movebull!\n");
 410038c:	01010474 	movhi	r4,1041
 4100390:	213dde04 	addi	r4,r4,-2184
 4100394:	4100ddc0 	call	4100ddc <puts>
	  /*TODO: add computer bullets, and collisions*/
	  while (1){
		  if(player_ready) {
 4100398:	d0a70e83 	ldbu	r2,-25542(gp)
 410039c:	10803fcc 	andi	r2,r2,255
 41003a0:	103ffd26 	beq	r2,zero,4100398 <movebullets+0x2c>
	    uint8_t prev =  0;
 41003a4:	e03ffc05 	stb	zero,-16(fp)
	    uint8_t computer_prev =  0;
 41003a8:	e03ffc45 	stb	zero,-15(fp)
	    uint8_t tmp[7];

	    /** move players bullets one step down. **/
	    memcpy(tmp,playerfield+1,7);
 41003ac:	d0a70a44 	addi	r2,gp,-25559
 41003b0:	10c00003 	ldbu	r3,0(r2)
 41003b4:	e0fffcc5 	stb	r3,-13(fp)
 41003b8:	10c00043 	ldbu	r3,1(r2)
 41003bc:	e0fffd05 	stb	r3,-12(fp)
 41003c0:	10c00083 	ldbu	r3,2(r2)
 41003c4:	e0fffd45 	stb	r3,-11(fp)
 41003c8:	10c000c3 	ldbu	r3,3(r2)
 41003cc:	e0fffd85 	stb	r3,-10(fp)
 41003d0:	10c00103 	ldbu	r3,4(r2)
 41003d4:	e0fffdc5 	stb	r3,-9(fp)
 41003d8:	10c00143 	ldbu	r3,5(r2)
 41003dc:	e0fffe05 	stb	r3,-8(fp)
 41003e0:	10800183 	ldbu	r2,6(r2)
 41003e4:	e0bffe45 	stb	r2,-7(fp)
	    memcpy(playerfield+2,tmp,6);
 41003e8:	d0a70a84 	addi	r2,gp,-25558
 41003ec:	e0fffcc4 	addi	r3,fp,-13
 41003f0:	01800184 	movi	r6,6
 41003f4:	180b883a 	mov	r5,r3
 41003f8:	1009883a 	mov	r4,r2
 41003fc:	4100bd40 	call	4100bd4 <memcpy>
	    *(playerfield+1) = 0;
 4100400:	d0270a45 	stb	zero,-25559(gp)

	    /*** handle recent shots . **/
	    playerfield[1] = recentshot_player;
 4100404:	d0a70e03 	ldbu	r2,-25544(gp)
 4100408:	d0a70a45 	stb	r2,-25559(gp)
	    recentshot_player =0;
 410040c:	d0270e05 	stb	zero,-25544(gp)

	    /**check for collision*/
	       /** Check if player has won **/
	    char playerwin = ((computerfield[7] & playerfield[7]));
 4100410:	d0e70dc3 	ldbu	r3,-25545(gp)
 4100414:	d0a70bc3 	ldbu	r2,-25553(gp)
 4100418:	1884703a 	and	r2,r3,r2
 410041c:	e0bffc85 	stb	r2,-14(fp)
	    if(playerwin) {
 4100420:	e0bffc87 	ldb	r2,-14(fp)
 4100424:	10000e26 	beq	r2,zero,4100460 <movebullets+0xf4>
	    	IOWR_8DIRECT(GAME_STATUS,0,'P');
 4100428:	00c01404 	movi	r3,80
 410042c:	00820134 	movhi	r2,2052
 4100430:	10c00025 	stbio	r3,0(r2)
	    	IOWR_8DIRECT(PLAYER_SCORE, 0, (IORD_8DIRECT(PLAYER_SCORE, 0) >> 1) | 0x80);
 4100434:	00820134 	movhi	r2,2052
 4100438:	10800044 	addi	r2,r2,1
 410043c:	10800023 	ldbuio	r2,0(r2)
 4100440:	10803fcc 	andi	r2,r2,255
 4100444:	1004d07a 	srli	r2,r2,1
 4100448:	10802014 	ori	r2,r2,128
 410044c:	1007883a 	mov	r3,r2
 4100450:	00820134 	movhi	r2,2052
 4100454:	10800044 	addi	r2,r2,1
 4100458:	10c00025 	stbio	r3,0(r2)
	    	reset_game();
 410045c:	41008040 	call	4100804 <reset_game>
	    }
	    remove_collisions(playerfield,computerfield);
 4100460:	e0bffcc4 	addi	r2,fp,-13
 4100464:	1019883a 	mov	r12,r2
 4100468:	d1670c04 	addi	r5,gp,-25552
 410046c:	d1270a04 	addi	r4,gp,-25560
 4100470:	41002900 	call	4100290 <remove_collisions.4111>

	    /**move computers bulltes one step up **/
	    memcpy(tmp,computerfield,7);
 4100474:	d0a70c03 	ldbu	r2,-25552(gp)
 4100478:	e0bffcc5 	stb	r2,-13(fp)
 410047c:	d0a70c43 	ldbu	r2,-25551(gp)
 4100480:	e0bffd05 	stb	r2,-12(fp)
 4100484:	d0a70c83 	ldbu	r2,-25550(gp)
 4100488:	e0bffd45 	stb	r2,-11(fp)
 410048c:	d0a70cc3 	ldbu	r2,-25549(gp)
 4100490:	e0bffd85 	stb	r2,-10(fp)
 4100494:	d0a70d03 	ldbu	r2,-25548(gp)
 4100498:	e0bffdc5 	stb	r2,-9(fp)
 410049c:	d0a70d43 	ldbu	r2,-25547(gp)
 41004a0:	e0bffe05 	stb	r2,-8(fp)
 41004a4:	d0a70d83 	ldbu	r2,-25546(gp)
 41004a8:	e0bffe45 	stb	r2,-7(fp)
	    memcpy(computerfield,tmp+1,6);
 41004ac:	e0bffcc4 	addi	r2,fp,-13
 41004b0:	10800044 	addi	r2,r2,1
 41004b4:	01800184 	movi	r6,6
 41004b8:	100b883a 	mov	r5,r2
 41004bc:	d1270c04 	addi	r4,gp,-25552
 41004c0:	4100bd40 	call	4100bd4 <memcpy>

	    /** handle recent shots**/
	    computerfield[6] = recentshot_computer;
 41004c4:	d0a70e43 	ldbu	r2,-25543(gp)
 41004c8:	d0a70d85 	stb	r2,-25546(gp)
	    recentshot_computer = 0;
 41004cc:	d0270e45 	stb	zero,-25543(gp)

	    /**then check for collision again.**/

	    /**check for collision*/
	    /** Check if computer has won **/
	    if ((computerfield[0] & playerfield[0])){
 41004d0:	d0e70c03 	ldbu	r3,-25552(gp)
 41004d4:	d0a70a03 	ldbu	r2,-25560(gp)
 41004d8:	1884703a 	and	r2,r3,r2
 41004dc:	10803fcc 	andi	r2,r2,255
 41004e0:	10001526 	beq	r2,zero,4100538 <movebullets+0x1cc>
			if(playerwin)
 41004e4:	e0bffc87 	ldb	r2,-14(fp)
 41004e8:	10000426 	beq	r2,zero,41004fc <movebullets+0x190>
				IOWR_8DIRECT(GAME_STATUS,0,'D');
 41004ec:	00c01104 	movi	r3,68
 41004f0:	00820134 	movhi	r2,2052
 41004f4:	10c00025 	stbio	r3,0(r2)
 41004f8:	00001206 	br	4100544 <movebullets+0x1d8>
			else {
				IOWR_8DIRECT(GAME_STATUS,0,'C');
 41004fc:	00c010c4 	movi	r3,67
 4100500:	00820134 	movhi	r2,2052
 4100504:	10c00025 	stbio	r3,0(r2)
				IOWR_8DIRECT(COMPUTER_SCORE, 0, (IORD_8DIRECT(COMPUTER_SCORE, 0) << 1) | 0x01);
 4100508:	00820134 	movhi	r2,2052
 410050c:	10800084 	addi	r2,r2,2
 4100510:	10800023 	ldbuio	r2,0(r2)
 4100514:	10803fcc 	andi	r2,r2,255
 4100518:	1085883a 	add	r2,r2,r2
 410051c:	10800054 	ori	r2,r2,1
 4100520:	1007883a 	mov	r3,r2
 4100524:	00820134 	movhi	r2,2052
 4100528:	10800084 	addi	r2,r2,2
 410052c:	10c00025 	stbio	r3,0(r2)
				reset_game();
 4100530:	41008040 	call	4100804 <reset_game>
 4100534:	00000306 	br	4100544 <movebullets+0x1d8>
			}
	    } else {
	    	IOWR_8DIRECT(GAME_STATUS,0,'W');
 4100538:	00c015c4 	movi	r3,87
 410053c:	00820134 	movhi	r2,2052
 4100540:	10c00025 	stbio	r3,0(r2)
	    }
	    remove_collisions(playerfield,computerfield);
 4100544:	e0bffcc4 	addi	r2,fp,-13
 4100548:	1019883a 	mov	r12,r2
 410054c:	d1670c04 	addi	r5,gp,-25552
 4100550:	d1270a04 	addi	r4,gp,-25560
 4100554:	41002900 	call	4100290 <remove_collisions.4111>

	    altera_avalon_mutex_lock(mutti,2);
 4100558:	d0a70f17 	ldw	r2,-25540(gp)
 410055c:	01400084 	movi	r5,2
 4100560:	1009883a 	mov	r4,r2
 4100564:	410dda40 	call	410dda4 <altera_avalon_mutex_lock>
	    for (int i = 0;i<8;i++) {
 4100568:	e03ffb15 	stw	zero,-20(fp)
 410056c:	00001206 	br	41005b8 <movebullets+0x24c>
	      IOWR_8DIRECT(WORLD_MAP,i, playerfield[i] | computerfield[i]);
 4100570:	e0fffb17 	ldw	r3,-20(fp)
 4100574:	00820134 	movhi	r2,2052
 4100578:	108000c4 	addi	r2,r2,3
 410057c:	1885883a 	add	r2,r3,r2
 4100580:	e13ffb17 	ldw	r4,-20(fp)
 4100584:	d0e70a04 	addi	r3,gp,-25560
 4100588:	20c7883a 	add	r3,r4,r3
 410058c:	19000003 	ldbu	r4,0(r3)
 4100590:	e17ffb17 	ldw	r5,-20(fp)
 4100594:	d0e70c04 	addi	r3,gp,-25552
 4100598:	28c7883a 	add	r3,r5,r3
 410059c:	18c00003 	ldbu	r3,0(r3)
 41005a0:	20c6b03a 	or	r3,r4,r3
 41005a4:	18c03fcc 	andi	r3,r3,255
 41005a8:	10c00025 	stbio	r3,0(r2)
	    	IOWR_8DIRECT(GAME_STATUS,0,'W');
	    }
	    remove_collisions(playerfield,computerfield);

	    altera_avalon_mutex_lock(mutti,2);
	    for (int i = 0;i<8;i++) {
 41005ac:	e0bffb17 	ldw	r2,-20(fp)
 41005b0:	10800044 	addi	r2,r2,1
 41005b4:	e0bffb15 	stw	r2,-20(fp)
 41005b8:	e0bffb17 	ldw	r2,-20(fp)
 41005bc:	10800210 	cmplti	r2,r2,8
 41005c0:	103feb1e 	bne	r2,zero,4100570 <movebullets+0x204>
	      IOWR_8DIRECT(WORLD_MAP,i, playerfield[i] | computerfield[i]);
	    }
	    altera_avalon_mutex_unlock(mutti);
 41005c4:	d0a70f17 	ldw	r2,-25540(gp)
 41005c8:	1009883a 	mov	r4,r2
 41005cc:	410de900 	call	410de90 <altera_avalon_mutex_unlock>
	    OSTimeDlyHMSM(0,0,1,0);
 41005d0:	000f883a 	mov	r7,zero
 41005d4:	01800044 	movi	r6,1
 41005d8:	000b883a 	mov	r5,zero
 41005dc:	0009883a 	mov	r4,zero
 41005e0:	410bfd40 	call	410bfd4 <OSTimeDlyHMSM>
		  }
	  }
 41005e4:	003f6c06 	br	4100398 <movebullets+0x2c>

041005e8 <computermove>:
}

/* Update game map with random computer move */
static void computermove(void* pdata) {
 41005e8:	defffc04 	addi	sp,sp,-16
 41005ec:	dfc00315 	stw	ra,12(sp)
 41005f0:	df000215 	stw	fp,8(sp)
 41005f4:	df000204 	addi	fp,sp,8
 41005f8:	e13fff15 	stw	r4,-4(fp)

	srand(time(0));
 41005fc:	0009883a 	mov	r4,zero
 4100600:	4100f040 	call	4100f04 <time>
 4100604:	1009883a 	mov	r4,r2
 4100608:	4100df00 	call	4100df0 <srand>
	while(1) {
		int plant = rand();
 410060c:	4100e080 	call	4100e08 <rand>
 4100610:	e0bffe15 	stw	r2,-8(fp)
		if(plant % 2 == 0) {
 4100614:	e0bffe17 	ldw	r2,-8(fp)
 4100618:	1080004c 	andi	r2,r2,1
 410061c:	1000091e 	bne	r2,zero,4100644 <computermove+0x5c>
			// Move right (prevent out of map move)
		    if(computerfield[7] != 0b00000111) {
 4100620:	d0a70dc3 	ldbu	r2,-25545(gp)
 4100624:	10803fcc 	andi	r2,r2,255
 4100628:	108001e0 	cmpeqi	r2,r2,7
 410062c:	10000c1e 	bne	r2,zero,4100660 <computermove+0x78>
			    computerfield[7] = computerfield[7] >> 1;
 4100630:	d0a70dc3 	ldbu	r2,-25545(gp)
 4100634:	10803fcc 	andi	r2,r2,255
 4100638:	1004d07a 	srli	r2,r2,1
 410063c:	d0a70dc5 	stb	r2,-25545(gp)
 4100640:	00000706 	br	4100660 <computermove+0x78>
		    }
		} else {
			// Move left (prevent out of map move)
			if(computerfield[7] != 0b11100000) {
 4100644:	d0a70dc3 	ldbu	r2,-25545(gp)
 4100648:	10803fcc 	andi	r2,r2,255
 410064c:	10803820 	cmpeqi	r2,r2,224
 4100650:	1000031e 	bne	r2,zero,4100660 <computermove+0x78>
				computerfield[7] = computerfield[7] << 1;
 4100654:	d0a70dc3 	ldbu	r2,-25545(gp)
 4100658:	1085883a 	add	r2,r2,r2
 410065c:	d0a70dc5 	stb	r2,-25545(gp)
			}
		}
		if(plant % 3 == 0) {
 4100660:	e0bffe17 	ldw	r2,-8(fp)
 4100664:	014000c4 	movi	r5,3
 4100668:	1009883a 	mov	r4,r2
 410066c:	4100aa40 	call	4100aa4 <__modsi3>
 4100670:	10000c1e 	bne	r2,zero,41006a4 <computermove+0xbc>
			// Shoot bullet from current position
			recentshot_computer = computerfield[7] & (computerfield[7] << 1) & (computerfield[7] >> 1);
 4100674:	d0a70dc3 	ldbu	r2,-25545(gp)
 4100678:	1007883a 	mov	r3,r2
 410067c:	d0a70dc3 	ldbu	r2,-25545(gp)
 4100680:	10803fcc 	andi	r2,r2,255
 4100684:	1085883a 	add	r2,r2,r2
 4100688:	1884703a 	and	r2,r3,r2
 410068c:	1007883a 	mov	r3,r2
 4100690:	d0a70dc3 	ldbu	r2,-25545(gp)
 4100694:	10803fcc 	andi	r2,r2,255
 4100698:	1004d07a 	srli	r2,r2,1
 410069c:	1884703a 	and	r2,r3,r2
 41006a0:	d0a70e45 	stb	r2,-25543(gp)
      	}
	    // write changes to the map
		altera_avalon_mutex_lock(mutti, 3);
 41006a4:	d0a70f17 	ldw	r2,-25540(gp)
 41006a8:	014000c4 	movi	r5,3
 41006ac:	1009883a 	mov	r4,r2
 41006b0:	410dda40 	call	410dda4 <altera_avalon_mutex_lock>
		IOWR_8DIRECT(WORLD_MAP, 0, playerfield[0]);
 41006b4:	d0a70a03 	ldbu	r2,-25560(gp)
 41006b8:	10c03fcc 	andi	r3,r2,255
 41006bc:	00820134 	movhi	r2,2052
 41006c0:	108000c4 	addi	r2,r2,3
 41006c4:	10c00025 	stbio	r3,0(r2)
		altera_avalon_mutex_unlock(mutti);
 41006c8:	d0a70f17 	ldw	r2,-25540(gp)
 41006cc:	1009883a 	mov	r4,r2
 41006d0:	410de900 	call	410de90 <altera_avalon_mutex_unlock>
		// pause task for delay adapted to computer movement speed
    	OSTimeDlyHMSM(0, 0, 1, 0);
 41006d4:	000f883a 	mov	r7,zero
 41006d8:	01800044 	movi	r6,1
 41006dc:	000b883a 	mov	r5,zero
 41006e0:	0009883a 	mov	r4,zero
 41006e4:	410bfd40 	call	410bfd4 <OSTimeDlyHMSM>
	}
 41006e8:	003fc806 	br	410060c <computermove+0x24>

041006ec <playermove>:
}

//////////////////////////////////////////////////////////////////////////////////////

/* Update game map with player's chosen move. This is the buttons' ISR */
static void playermove(void* context) {
 41006ec:	defffd04 	addi	sp,sp,-12
 41006f0:	dfc00215 	stw	ra,8(sp)
 41006f4:	df000115 	stw	fp,4(sp)
 41006f8:	df000104 	addi	fp,sp,4
 41006fc:	e13fff15 	stw	r4,-4(fp)

	player_ready = 1;
 4100700:	00800044 	movi	r2,1
 4100704:	d0a70e85 	stb	r2,-25542(gp)
    switch(IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE)) {
 4100708:	00840f04 	movi	r2,4156
 410070c:	10800037 	ldwio	r2,0(r2)
 4100710:	10c000a0 	cmpeqi	r3,r2,2
 4100714:	18000e1e 	bne	r3,zero,4100750 <playermove+0x64>
 4100718:	10c00120 	cmpeqi	r3,r2,4
 410071c:	1800191e 	bne	r3,zero,4100784 <playermove+0x98>
 4100720:	10800060 	cmpeqi	r2,r2,1
 4100724:	1000011e 	bne	r2,zero,410072c <playermove+0x40>
	    if(playerfield[0] != 0b11100000) {
		    playerfield[0] = playerfield[0] << 1;
	  	}
	    break;
      default: // invalid call
    	break;
 4100728:	00002106 	br	41007b0 <playermove+0xc4>
static void playermove(void* context) {

	player_ready = 1;
    switch(IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE)) {
      case 0b001: // Move right (prevent out of map move)
        if(playerfield[0] != 0b00000111) {
 410072c:	d0a70a03 	ldbu	r2,-25560(gp)
 4100730:	10803fcc 	andi	r2,r2,255
 4100734:	108001e0 	cmpeqi	r2,r2,7
 4100738:	10001a1e 	bne	r2,zero,41007a4 <playermove+0xb8>
    	    playerfield[0] = playerfield[0] >> 1;
 410073c:	d0a70a03 	ldbu	r2,-25560(gp)
 4100740:	10803fcc 	andi	r2,r2,255
 4100744:	1004d07a 	srli	r2,r2,1
 4100748:	d0a70a05 	stb	r2,-25560(gp)
        }
        break;
 410074c:	00001506 	br	41007a4 <playermove+0xb8>
      case 0b010: // shoot
	    recentshot_player = playerfield[0] & (playerfield[0] << 1) & (playerfield[0] >> 1);
 4100750:	d0a70a03 	ldbu	r2,-25560(gp)
 4100754:	1007883a 	mov	r3,r2
 4100758:	d0a70a03 	ldbu	r2,-25560(gp)
 410075c:	10803fcc 	andi	r2,r2,255
 4100760:	1085883a 	add	r2,r2,r2
 4100764:	1884703a 	and	r2,r3,r2
 4100768:	1007883a 	mov	r3,r2
 410076c:	d0a70a03 	ldbu	r2,-25560(gp)
 4100770:	10803fcc 	andi	r2,r2,255
 4100774:	1004d07a 	srli	r2,r2,1
 4100778:	1884703a 	and	r2,r3,r2
 410077c:	d0a70e05 	stb	r2,-25544(gp)
	    recentshot_player = 0^tmp; // why the XOR 0? -- filip
	    //todo: regenerate bullet.
	    //playerfield[1] ^= tmp; //<-- removed while debugging
	    printf("SHOOT!");
#endif
        break;
 4100780:	00000b06 	br	41007b0 <playermove+0xc4>
      case 0b100:  //Move left (prevent out of map move)
	    if(playerfield[0] != 0b11100000) {
 4100784:	d0a70a03 	ldbu	r2,-25560(gp)
 4100788:	10803fcc 	andi	r2,r2,255
 410078c:	10803820 	cmpeqi	r2,r2,224
 4100790:	1000061e 	bne	r2,zero,41007ac <playermove+0xc0>
		    playerfield[0] = playerfield[0] << 1;
 4100794:	d0a70a03 	ldbu	r2,-25560(gp)
 4100798:	1085883a 	add	r2,r2,r2
 410079c:	d0a70a05 	stb	r2,-25560(gp)
	  	}
	    break;
 41007a0:	00000206 	br	41007ac <playermove+0xc0>
    switch(IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE)) {
      case 0b001: // Move right (prevent out of map move)
        if(playerfield[0] != 0b00000111) {
    	    playerfield[0] = playerfield[0] >> 1;
        }
        break;
 41007a4:	0001883a 	nop
 41007a8:	00000106 	br	41007b0 <playermove+0xc4>
        break;
      case 0b100:  //Move left (prevent out of map move)
	    if(playerfield[0] != 0b11100000) {
		    playerfield[0] = playerfield[0] << 1;
	  	}
	    break;
 41007ac:	0001883a 	nop
      default: // invalid call
    	break;
  	}
    // write changes to the map
	altera_avalon_mutex_lock(mutti, 4);
 41007b0:	d0a70f17 	ldw	r2,-25540(gp)
 41007b4:	01400104 	movi	r5,4
 41007b8:	1009883a 	mov	r4,r2
 41007bc:	410dda40 	call	410dda4 <altera_avalon_mutex_lock>
	IOWR_8DIRECT(WORLD_MAP, 0, playerfield[0]);
 41007c0:	d0a70a03 	ldbu	r2,-25560(gp)
 41007c4:	10c03fcc 	andi	r3,r2,255
 41007c8:	00820134 	movhi	r2,2052
 41007cc:	108000c4 	addi	r2,r2,3
 41007d0:	10c00025 	stbio	r3,0(r2)
	altera_avalon_mutex_unlock(mutti);
 41007d4:	d0a70f17 	ldw	r2,-25540(gp)
 41007d8:	1009883a 	mov	r4,r2
 41007dc:	410de900 	call	410de90 <altera_avalon_mutex_unlock>
	// acknowledge interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE, 0x0);
 41007e0:	0007883a 	mov	r3,zero
 41007e4:	00840f04 	movi	r2,4156
 41007e8:	10c00035 	stwio	r3,0(r2)
}
 41007ec:	0001883a 	nop
 41007f0:	e037883a 	mov	sp,fp
 41007f4:	dfc00117 	ldw	ra,4(sp)
 41007f8:	df000017 	ldw	fp,0(sp)
 41007fc:	dec00204 	addi	sp,sp,8
 4100800:	f800283a 	ret

04100804 <reset_game>:


//////////////////////////////////////////////////////////////////////////////////////

void reset_game(void) {
 4100804:	defffd04 	addi	sp,sp,-12
 4100808:	dfc00215 	stw	ra,8(sp)
 410080c:	df000115 	stw	fp,4(sp)
 4100810:	df000104 	addi	fp,sp,4

	altera_avalon_mutex_lock(mutti, 5);
 4100814:	d0a70f17 	ldw	r2,-25540(gp)
 4100818:	01400144 	movi	r5,5
 410081c:	1009883a 	mov	r4,r2
 4100820:	410dda40 	call	410dda4 <altera_avalon_mutex_lock>
//	IOWR_8DIRECT(GAME_STATUS,0,'W');
	for (int i = 0; i<8;i++) {
 4100824:	e03fff15 	stw	zero,-4(fp)
 4100828:	00001106 	br	4100870 <reset_game+0x6c>
		IOWR_8DIRECT(WORLD_MAP,i,0); //maybe more efficient way?
 410082c:	e0ffff17 	ldw	r3,-4(fp)
 4100830:	00820134 	movhi	r2,2052
 4100834:	108000c4 	addi	r2,r2,3
 4100838:	1885883a 	add	r2,r3,r2
 410083c:	0007883a 	mov	r3,zero
 4100840:	10c00025 	stbio	r3,0(r2)
		playerfield[i] = 0;
 4100844:	e0ffff17 	ldw	r3,-4(fp)
 4100848:	d0a70a04 	addi	r2,gp,-25560
 410084c:	1885883a 	add	r2,r3,r2
 4100850:	10000005 	stb	zero,0(r2)
		computerfield[i] = 0;
 4100854:	e0ffff17 	ldw	r3,-4(fp)
 4100858:	d0a70c04 	addi	r2,gp,-25552
 410085c:	1885883a 	add	r2,r3,r2
 4100860:	10000005 	stb	zero,0(r2)

void reset_game(void) {

	altera_avalon_mutex_lock(mutti, 5);
//	IOWR_8DIRECT(GAME_STATUS,0,'W');
	for (int i = 0; i<8;i++) {
 4100864:	e0bfff17 	ldw	r2,-4(fp)
 4100868:	10800044 	addi	r2,r2,1
 410086c:	e0bfff15 	stw	r2,-4(fp)
 4100870:	e0bfff17 	ldw	r2,-4(fp)
 4100874:	10800210 	cmplti	r2,r2,8
 4100878:	103fec1e 	bne	r2,zero,410082c <reset_game+0x28>
		IOWR_8DIRECT(WORLD_MAP,i,0); //maybe more efficient way?
		playerfield[i] = 0;
		computerfield[i] = 0;
	}
	playerfield[0] = 0b00111000;
 410087c:	00800e04 	movi	r2,56
 4100880:	d0a70a05 	stb	r2,-25560(gp)
	computerfield[7] = 0b00111000;
 4100884:	00800e04 	movi	r2,56
 4100888:	d0a70dc5 	stb	r2,-25545(gp)
//	IOWR_8DIRECT(WORLD_MAP,0, 0b00111000);//playerfield[0]);// | computerfield[i]);
	altera_avalon_mutex_unlock(mutti);
 410088c:	d0a70f17 	ldw	r2,-25540(gp)
 4100890:	1009883a 	mov	r4,r2
 4100894:	410de900 	call	410de90 <altera_avalon_mutex_unlock>

	recentshot_player = 0;
 4100898:	d0270e05 	stb	zero,-25544(gp)
	recentshot_computer = 0;
 410089c:	d0270e45 	stb	zero,-25543(gp)
	player_ready = 0; // replace by player button press
 41008a0:	d0270e85 	stb	zero,-25542(gp)
}
 41008a4:	0001883a 	nop
 41008a8:	e037883a 	mov	sp,fp
 41008ac:	dfc00117 	ldw	ra,4(sp)
 41008b0:	df000017 	ldw	fp,0(sp)
 41008b4:	dec00204 	addi	sp,sp,8
 41008b8:	f800283a 	ret

041008bc <reset_score>:

void reset_score(void) {
 41008bc:	deffff04 	addi	sp,sp,-4
 41008c0:	df000015 	stw	fp,0(sp)
 41008c4:	d839883a 	mov	fp,sp
	// to be used when scores are filled
	IOWR_8DIRECT(PLAYER_SCORE, 0, 0);
 41008c8:	0007883a 	mov	r3,zero
 41008cc:	00820134 	movhi	r2,2052
 41008d0:	10800044 	addi	r2,r2,1
 41008d4:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(COMPUTER_SCORE, 0, 0);
 41008d8:	0007883a 	mov	r3,zero
 41008dc:	00820134 	movhi	r2,2052
 41008e0:	10800084 	addi	r2,r2,2
 41008e4:	10c00025 	stbio	r3,0(r2)
}
 41008e8:	0001883a 	nop
 41008ec:	e037883a 	mov	sp,fp
 41008f0:	df000017 	ldw	fp,0(sp)
 41008f4:	dec00104 	addi	sp,sp,4
 41008f8:	f800283a 	ret

041008fc <init>:

void init() {
 41008fc:	defffd04 	addi	sp,sp,-12
 4100900:	dfc00215 	stw	ra,8(sp)
 4100904:	df000115 	stw	fp,4(sp)
 4100908:	df000104 	addi	fp,sp,4
  alt_ic_isr_register(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID, PIO_0_IRQ, playermove, NULL, NULL);
 410090c:	d8000015 	stw	zero,0(sp)
 4100910:	000f883a 	mov	r7,zero
 4100914:	01810434 	movhi	r6,1040
 4100918:	3181bb04 	addi	r6,r6,1772
 410091c:	01400044 	movi	r5,1
 4100920:	0009883a 	mov	r4,zero
 4100924:	4103d880 	call	4103d88 <alt_ic_isr_register>
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE, 0x0);
 4100928:	0007883a 	mov	r3,zero
 410092c:	00840f04 	movi	r2,4156
 4100930:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_0_BASE, 0xF);
 4100934:	00c003c4 	movi	r3,15
 4100938:	00840e04 	movi	r2,4152
 410093c:	10c00035 	stwio	r3,0(r2)

  reset_game();
 4100940:	41008040 	call	4100804 <reset_game>
  reset_score();
 4100944:	41008bc0 	call	41008bc <reset_score>
}
 4100948:	0001883a 	nop
 410094c:	e037883a 	mov	sp,fp
 4100950:	dfc00117 	ldw	ra,4(sp)
 4100954:	df000017 	ldw	fp,0(sp)
 4100958:	dec00204 	addi	sp,sp,8
 410095c:	f800283a 	ret

04100960 <main>:

int main(void) {
 4100960:	defff904 	addi	sp,sp,-28
 4100964:	dfc00615 	stw	ra,24(sp)
 4100968:	df000515 	stw	fp,20(sp)
 410096c:	df000504 	addi	fp,sp,20
	mutti = altera_avalon_mutex_open(MUTEX_0_NAME);
 4100970:	01010474 	movhi	r4,1041
 4100974:	213de104 	addi	r4,r4,-2172
 4100978:	410dd2c0 	call	410dd2c <altera_avalon_mutex_open>
 410097c:	d0a70f15 	stw	r2,-25540(gp)
	init();
 4100980:	41008fc0 	call	41008fc <init>

	OSTaskCreateExt(computermove,
 4100984:	d8000415 	stw	zero,16(sp)
 4100988:	d8000315 	stw	zero,12(sp)
 410098c:	00820004 	movi	r2,2048
 4100990:	d8800215 	stw	r2,8(sp)
 4100994:	00810474 	movhi	r2,1041
 4100998:	10947104 	addi	r2,r2,20932
 410099c:	d8800115 	stw	r2,4(sp)
 41009a0:	00800084 	movi	r2,2
 41009a4:	d8800015 	stw	r2,0(sp)
 41009a8:	01c00084 	movi	r7,2
 41009ac:	01810474 	movhi	r6,1041
 41009b0:	319c7004 	addi	r6,r6,29120
 41009b4:	000b883a 	mov	r5,zero
 41009b8:	01010434 	movhi	r4,1040
 41009bc:	21017a04 	addi	r4,r4,1512
 41009c0:	410ae000 	call	410ae00 <OSTaskCreateExt>
				    task2_stk,
				    TASK_STACKSIZE,
				    NULL,
				    0);

	OSTaskCreateExt(movebullets,
 41009c4:	d8000415 	stw	zero,16(sp)
 41009c8:	d8000315 	stw	zero,12(sp)
 41009cc:	00820004 	movi	r2,2048
 41009d0:	d8800215 	stw	r2,8(sp)
 41009d4:	00810474 	movhi	r2,1041
 41009d8:	109c7104 	addi	r2,r2,29124
 41009dc:	d8800115 	stw	r2,4(sp)
 41009e0:	008000c4 	movi	r2,3
 41009e4:	d8800015 	stw	r2,0(sp)
 41009e8:	01c000c4 	movi	r7,3
 41009ec:	018104b4 	movhi	r6,1042
 41009f0:	31a47004 	addi	r6,r6,-28224
 41009f4:	000b883a 	mov	r5,zero
 41009f8:	01010434 	movhi	r4,1040
 41009fc:	2100db04 	addi	r4,r4,876
 4100a00:	410ae000 	call	410ae00 <OSTaskCreateExt>
				    task3_stk,
				    TASK_STACKSIZE,
				    NULL,
				    0);

  OSStart();
 4100a04:	41057680 	call	4105768 <OSStart>
  return 0;
 4100a08:	0005883a 	mov	r2,zero
}
 4100a0c:	e037883a 	mov	sp,fp
 4100a10:	dfc00117 	ldw	ra,4(sp)
 4100a14:	df000017 	ldw	fp,0(sp)
 4100a18:	dec00204 	addi	sp,sp,8
 4100a1c:	f800283a 	ret

04100a20 <__divsi3>:
 4100a20:	20001b16 	blt	r4,zero,4100a90 <__divsi3+0x70>
 4100a24:	000f883a 	mov	r7,zero
 4100a28:	28001616 	blt	r5,zero,4100a84 <__divsi3+0x64>
 4100a2c:	200d883a 	mov	r6,r4
 4100a30:	29001a2e 	bgeu	r5,r4,4100a9c <__divsi3+0x7c>
 4100a34:	00800804 	movi	r2,32
 4100a38:	00c00044 	movi	r3,1
 4100a3c:	00000106 	br	4100a44 <__divsi3+0x24>
 4100a40:	10000d26 	beq	r2,zero,4100a78 <__divsi3+0x58>
 4100a44:	294b883a 	add	r5,r5,r5
 4100a48:	10bfffc4 	addi	r2,r2,-1
 4100a4c:	18c7883a 	add	r3,r3,r3
 4100a50:	293ffb36 	bltu	r5,r4,4100a40 <__divsi3+0x20>
 4100a54:	0005883a 	mov	r2,zero
 4100a58:	18000726 	beq	r3,zero,4100a78 <__divsi3+0x58>
 4100a5c:	0005883a 	mov	r2,zero
 4100a60:	31400236 	bltu	r6,r5,4100a6c <__divsi3+0x4c>
 4100a64:	314dc83a 	sub	r6,r6,r5
 4100a68:	10c4b03a 	or	r2,r2,r3
 4100a6c:	1806d07a 	srli	r3,r3,1
 4100a70:	280ad07a 	srli	r5,r5,1
 4100a74:	183ffa1e 	bne	r3,zero,4100a60 <__divsi3+0x40>
 4100a78:	38000126 	beq	r7,zero,4100a80 <__divsi3+0x60>
 4100a7c:	0085c83a 	sub	r2,zero,r2
 4100a80:	f800283a 	ret
 4100a84:	014bc83a 	sub	r5,zero,r5
 4100a88:	39c0005c 	xori	r7,r7,1
 4100a8c:	003fe706 	br	4100a2c <__divsi3+0xc>
 4100a90:	0109c83a 	sub	r4,zero,r4
 4100a94:	01c00044 	movi	r7,1
 4100a98:	003fe306 	br	4100a28 <__divsi3+0x8>
 4100a9c:	00c00044 	movi	r3,1
 4100aa0:	003fee06 	br	4100a5c <__divsi3+0x3c>

04100aa4 <__modsi3>:
 4100aa4:	20001716 	blt	r4,zero,4100b04 <__modsi3+0x60>
 4100aa8:	000f883a 	mov	r7,zero
 4100aac:	2005883a 	mov	r2,r4
 4100ab0:	28001216 	blt	r5,zero,4100afc <__modsi3+0x58>
 4100ab4:	2900162e 	bgeu	r5,r4,4100b10 <__modsi3+0x6c>
 4100ab8:	01800804 	movi	r6,32
 4100abc:	00c00044 	movi	r3,1
 4100ac0:	00000106 	br	4100ac8 <__modsi3+0x24>
 4100ac4:	30000a26 	beq	r6,zero,4100af0 <__modsi3+0x4c>
 4100ac8:	294b883a 	add	r5,r5,r5
 4100acc:	31bfffc4 	addi	r6,r6,-1
 4100ad0:	18c7883a 	add	r3,r3,r3
 4100ad4:	293ffb36 	bltu	r5,r4,4100ac4 <__modsi3+0x20>
 4100ad8:	18000526 	beq	r3,zero,4100af0 <__modsi3+0x4c>
 4100adc:	1806d07a 	srli	r3,r3,1
 4100ae0:	11400136 	bltu	r2,r5,4100ae8 <__modsi3+0x44>
 4100ae4:	1145c83a 	sub	r2,r2,r5
 4100ae8:	280ad07a 	srli	r5,r5,1
 4100aec:	183ffb1e 	bne	r3,zero,4100adc <__modsi3+0x38>
 4100af0:	38000126 	beq	r7,zero,4100af8 <__modsi3+0x54>
 4100af4:	0085c83a 	sub	r2,zero,r2
 4100af8:	f800283a 	ret
 4100afc:	014bc83a 	sub	r5,zero,r5
 4100b00:	003fec06 	br	4100ab4 <__modsi3+0x10>
 4100b04:	0109c83a 	sub	r4,zero,r4
 4100b08:	01c00044 	movi	r7,1
 4100b0c:	003fe706 	br	4100aac <__modsi3+0x8>
 4100b10:	00c00044 	movi	r3,1
 4100b14:	003ff106 	br	4100adc <__modsi3+0x38>

04100b18 <__udivsi3>:
 4100b18:	200d883a 	mov	r6,r4
 4100b1c:	2900152e 	bgeu	r5,r4,4100b74 <__udivsi3+0x5c>
 4100b20:	28001416 	blt	r5,zero,4100b74 <__udivsi3+0x5c>
 4100b24:	00800804 	movi	r2,32
 4100b28:	00c00044 	movi	r3,1
 4100b2c:	00000206 	br	4100b38 <__udivsi3+0x20>
 4100b30:	10000e26 	beq	r2,zero,4100b6c <__udivsi3+0x54>
 4100b34:	28000516 	blt	r5,zero,4100b4c <__udivsi3+0x34>
 4100b38:	294b883a 	add	r5,r5,r5
 4100b3c:	10bfffc4 	addi	r2,r2,-1
 4100b40:	18c7883a 	add	r3,r3,r3
 4100b44:	293ffa36 	bltu	r5,r4,4100b30 <__udivsi3+0x18>
 4100b48:	18000826 	beq	r3,zero,4100b6c <__udivsi3+0x54>
 4100b4c:	0005883a 	mov	r2,zero
 4100b50:	31400236 	bltu	r6,r5,4100b5c <__udivsi3+0x44>
 4100b54:	314dc83a 	sub	r6,r6,r5
 4100b58:	10c4b03a 	or	r2,r2,r3
 4100b5c:	1806d07a 	srli	r3,r3,1
 4100b60:	280ad07a 	srli	r5,r5,1
 4100b64:	183ffa1e 	bne	r3,zero,4100b50 <__udivsi3+0x38>
 4100b68:	f800283a 	ret
 4100b6c:	0005883a 	mov	r2,zero
 4100b70:	f800283a 	ret
 4100b74:	00c00044 	movi	r3,1
 4100b78:	003ff406 	br	4100b4c <__udivsi3+0x34>

04100b7c <__umodsi3>:
 4100b7c:	2005883a 	mov	r2,r4
 4100b80:	2900122e 	bgeu	r5,r4,4100bcc <__umodsi3+0x50>
 4100b84:	28001116 	blt	r5,zero,4100bcc <__umodsi3+0x50>
 4100b88:	01800804 	movi	r6,32
 4100b8c:	00c00044 	movi	r3,1
 4100b90:	00000206 	br	4100b9c <__umodsi3+0x20>
 4100b94:	30000c26 	beq	r6,zero,4100bc8 <__umodsi3+0x4c>
 4100b98:	28000516 	blt	r5,zero,4100bb0 <__umodsi3+0x34>
 4100b9c:	294b883a 	add	r5,r5,r5
 4100ba0:	31bfffc4 	addi	r6,r6,-1
 4100ba4:	18c7883a 	add	r3,r3,r3
 4100ba8:	293ffa36 	bltu	r5,r4,4100b94 <__umodsi3+0x18>
 4100bac:	18000626 	beq	r3,zero,4100bc8 <__umodsi3+0x4c>
 4100bb0:	1806d07a 	srli	r3,r3,1
 4100bb4:	11400136 	bltu	r2,r5,4100bbc <__umodsi3+0x40>
 4100bb8:	1145c83a 	sub	r2,r2,r5
 4100bbc:	280ad07a 	srli	r5,r5,1
 4100bc0:	183ffb1e 	bne	r3,zero,4100bb0 <__umodsi3+0x34>
 4100bc4:	f800283a 	ret
 4100bc8:	f800283a 	ret
 4100bcc:	00c00044 	movi	r3,1
 4100bd0:	003ff706 	br	4100bb0 <__umodsi3+0x34>

04100bd4 <memcpy>:
 4100bd4:	defffd04 	addi	sp,sp,-12
 4100bd8:	dfc00215 	stw	ra,8(sp)
 4100bdc:	dc400115 	stw	r17,4(sp)
 4100be0:	dc000015 	stw	r16,0(sp)
 4100be4:	00c003c4 	movi	r3,15
 4100be8:	2005883a 	mov	r2,r4
 4100bec:	1980452e 	bgeu	r3,r6,4100d04 <memcpy+0x130>
 4100bf0:	2906b03a 	or	r3,r5,r4
 4100bf4:	18c000cc 	andi	r3,r3,3
 4100bf8:	1800441e 	bne	r3,zero,4100d0c <memcpy+0x138>
 4100bfc:	347ffc04 	addi	r17,r6,-16
 4100c00:	8822d13a 	srli	r17,r17,4
 4100c04:	28c00104 	addi	r3,r5,4
 4100c08:	23400104 	addi	r13,r4,4
 4100c0c:	8820913a 	slli	r16,r17,4
 4100c10:	2b000204 	addi	r12,r5,8
 4100c14:	22c00204 	addi	r11,r4,8
 4100c18:	84000504 	addi	r16,r16,20
 4100c1c:	2a800304 	addi	r10,r5,12
 4100c20:	22400304 	addi	r9,r4,12
 4100c24:	2c21883a 	add	r16,r5,r16
 4100c28:	2811883a 	mov	r8,r5
 4100c2c:	200f883a 	mov	r7,r4
 4100c30:	41000017 	ldw	r4,0(r8)
 4100c34:	1fc00017 	ldw	ra,0(r3)
 4100c38:	63c00017 	ldw	r15,0(r12)
 4100c3c:	39000015 	stw	r4,0(r7)
 4100c40:	53800017 	ldw	r14,0(r10)
 4100c44:	6fc00015 	stw	ra,0(r13)
 4100c48:	5bc00015 	stw	r15,0(r11)
 4100c4c:	4b800015 	stw	r14,0(r9)
 4100c50:	18c00404 	addi	r3,r3,16
 4100c54:	39c00404 	addi	r7,r7,16
 4100c58:	42000404 	addi	r8,r8,16
 4100c5c:	6b400404 	addi	r13,r13,16
 4100c60:	63000404 	addi	r12,r12,16
 4100c64:	5ac00404 	addi	r11,r11,16
 4100c68:	52800404 	addi	r10,r10,16
 4100c6c:	4a400404 	addi	r9,r9,16
 4100c70:	1c3fef1e 	bne	r3,r16,4100c30 <memcpy+0x5c>
 4100c74:	89c00044 	addi	r7,r17,1
 4100c78:	380e913a 	slli	r7,r7,4
 4100c7c:	310003cc 	andi	r4,r6,15
 4100c80:	02c000c4 	movi	r11,3
 4100c84:	11c7883a 	add	r3,r2,r7
 4100c88:	29cb883a 	add	r5,r5,r7
 4100c8c:	5900212e 	bgeu	r11,r4,4100d14 <memcpy+0x140>
 4100c90:	1813883a 	mov	r9,r3
 4100c94:	2811883a 	mov	r8,r5
 4100c98:	200f883a 	mov	r7,r4
 4100c9c:	42800017 	ldw	r10,0(r8)
 4100ca0:	4a400104 	addi	r9,r9,4
 4100ca4:	39ffff04 	addi	r7,r7,-4
 4100ca8:	4abfff15 	stw	r10,-4(r9)
 4100cac:	42000104 	addi	r8,r8,4
 4100cb0:	59fffa36 	bltu	r11,r7,4100c9c <memcpy+0xc8>
 4100cb4:	213fff04 	addi	r4,r4,-4
 4100cb8:	2008d0ba 	srli	r4,r4,2
 4100cbc:	318000cc 	andi	r6,r6,3
 4100cc0:	21000044 	addi	r4,r4,1
 4100cc4:	2109883a 	add	r4,r4,r4
 4100cc8:	2109883a 	add	r4,r4,r4
 4100ccc:	1907883a 	add	r3,r3,r4
 4100cd0:	290b883a 	add	r5,r5,r4
 4100cd4:	30000626 	beq	r6,zero,4100cf0 <memcpy+0x11c>
 4100cd8:	198d883a 	add	r6,r3,r6
 4100cdc:	29c00003 	ldbu	r7,0(r5)
 4100ce0:	18c00044 	addi	r3,r3,1
 4100ce4:	29400044 	addi	r5,r5,1
 4100ce8:	19ffffc5 	stb	r7,-1(r3)
 4100cec:	19bffb1e 	bne	r3,r6,4100cdc <memcpy+0x108>
 4100cf0:	dfc00217 	ldw	ra,8(sp)
 4100cf4:	dc400117 	ldw	r17,4(sp)
 4100cf8:	dc000017 	ldw	r16,0(sp)
 4100cfc:	dec00304 	addi	sp,sp,12
 4100d00:	f800283a 	ret
 4100d04:	2007883a 	mov	r3,r4
 4100d08:	003ff206 	br	4100cd4 <memcpy+0x100>
 4100d0c:	2007883a 	mov	r3,r4
 4100d10:	003ff106 	br	4100cd8 <memcpy+0x104>
 4100d14:	200d883a 	mov	r6,r4
 4100d18:	003fee06 	br	4100cd4 <memcpy+0x100>

04100d1c <_puts_r>:
 4100d1c:	defff604 	addi	sp,sp,-40
 4100d20:	dc000715 	stw	r16,28(sp)
 4100d24:	2021883a 	mov	r16,r4
 4100d28:	2809883a 	mov	r4,r5
 4100d2c:	dc400815 	stw	r17,32(sp)
 4100d30:	dfc00915 	stw	ra,36(sp)
 4100d34:	2823883a 	mov	r17,r5
 4100d38:	4100e6c0 	call	4100e6c <strlen>
 4100d3c:	10c00044 	addi	r3,r2,1
 4100d40:	d8800115 	stw	r2,4(sp)
 4100d44:	00810474 	movhi	r2,1041
 4100d48:	10bde504 	addi	r2,r2,-2156
 4100d4c:	d8800215 	stw	r2,8(sp)
 4100d50:	00800044 	movi	r2,1
 4100d54:	d8800315 	stw	r2,12(sp)
 4100d58:	00800084 	movi	r2,2
 4100d5c:	dc400015 	stw	r17,0(sp)
 4100d60:	d8c00615 	stw	r3,24(sp)
 4100d64:	dec00415 	stw	sp,16(sp)
 4100d68:	d8800515 	stw	r2,20(sp)
 4100d6c:	80000226 	beq	r16,zero,4100d78 <_puts_r+0x5c>
 4100d70:	80800e17 	ldw	r2,56(r16)
 4100d74:	10001426 	beq	r2,zero,4100dc8 <_puts_r+0xac>
 4100d78:	81400217 	ldw	r5,8(r16)
 4100d7c:	2880030b 	ldhu	r2,12(r5)
 4100d80:	10c8000c 	andi	r3,r2,8192
 4100d84:	1800061e 	bne	r3,zero,4100da0 <_puts_r+0x84>
 4100d88:	29001917 	ldw	r4,100(r5)
 4100d8c:	00f7ffc4 	movi	r3,-8193
 4100d90:	10880014 	ori	r2,r2,8192
 4100d94:	20c6703a 	and	r3,r4,r3
 4100d98:	2880030d 	sth	r2,12(r5)
 4100d9c:	28c01915 	stw	r3,100(r5)
 4100da0:	d9800404 	addi	r6,sp,16
 4100da4:	8009883a 	mov	r4,r16
 4100da8:	41012f40 	call	41012f4 <__sfvwrite_r>
 4100dac:	1000091e 	bne	r2,zero,4100dd4 <_puts_r+0xb8>
 4100db0:	00800284 	movi	r2,10
 4100db4:	dfc00917 	ldw	ra,36(sp)
 4100db8:	dc400817 	ldw	r17,32(sp)
 4100dbc:	dc000717 	ldw	r16,28(sp)
 4100dc0:	dec00a04 	addi	sp,sp,40
 4100dc4:	f800283a 	ret
 4100dc8:	8009883a 	mov	r4,r16
 4100dcc:	41012a40 	call	41012a4 <__sinit>
 4100dd0:	003fe906 	br	4100d78 <_puts_r+0x5c>
 4100dd4:	00bfffc4 	movi	r2,-1
 4100dd8:	003ff606 	br	4100db4 <_puts_r+0x98>

04100ddc <puts>:
 4100ddc:	00810474 	movhi	r2,1041
 4100de0:	10853004 	addi	r2,r2,5312
 4100de4:	200b883a 	mov	r5,r4
 4100de8:	11000017 	ldw	r4,0(r2)
 4100dec:	4100d1c1 	jmpi	4100d1c <_puts_r>

04100df0 <srand>:
 4100df0:	00810474 	movhi	r2,1041
 4100df4:	10853004 	addi	r2,r2,5312
 4100df8:	10800017 	ldw	r2,0(r2)
 4100dfc:	11002915 	stw	r4,164(r2)
 4100e00:	10002a15 	stw	zero,168(r2)
 4100e04:	f800283a 	ret

04100e08 <rand>:
 4100e08:	00810474 	movhi	r2,1041
 4100e0c:	defffe04 	addi	sp,sp,-8
 4100e10:	10853004 	addi	r2,r2,5312
 4100e14:	dc000015 	stw	r16,0(sp)
 4100e18:	14000017 	ldw	r16,0(r2)
 4100e1c:	dfc00115 	stw	ra,4(sp)
 4100e20:	01932574 	movhi	r6,19605
 4100e24:	81002917 	ldw	r4,164(r16)
 4100e28:	81402a17 	ldw	r5,168(r16)
 4100e2c:	01d614b4 	movhi	r7,22610
 4100e30:	319fcb44 	addi	r6,r6,32557
 4100e34:	39fd0b44 	addi	r7,r7,-3027
 4100e38:	41039100 	call	4103910 <__muldi3>
 4100e3c:	11000044 	addi	r4,r2,1
 4100e40:	2085803a 	cmpltu	r2,r4,r2
 4100e44:	10c7883a 	add	r3,r2,r3
 4100e48:	00a00034 	movhi	r2,32768
 4100e4c:	10bfffc4 	addi	r2,r2,-1
 4100e50:	1884703a 	and	r2,r3,r2
 4100e54:	81002915 	stw	r4,164(r16)
 4100e58:	80c02a15 	stw	r3,168(r16)
 4100e5c:	dfc00117 	ldw	ra,4(sp)
 4100e60:	dc000017 	ldw	r16,0(sp)
 4100e64:	dec00204 	addi	sp,sp,8
 4100e68:	f800283a 	ret

04100e6c <strlen>:
 4100e6c:	208000cc 	andi	r2,r4,3
 4100e70:	10002026 	beq	r2,zero,4100ef4 <strlen+0x88>
 4100e74:	20800007 	ldb	r2,0(r4)
 4100e78:	10002026 	beq	r2,zero,4100efc <strlen+0x90>
 4100e7c:	2005883a 	mov	r2,r4
 4100e80:	00000206 	br	4100e8c <strlen+0x20>
 4100e84:	10c00007 	ldb	r3,0(r2)
 4100e88:	18001826 	beq	r3,zero,4100eec <strlen+0x80>
 4100e8c:	10800044 	addi	r2,r2,1
 4100e90:	10c000cc 	andi	r3,r2,3
 4100e94:	183ffb1e 	bne	r3,zero,4100e84 <strlen+0x18>
 4100e98:	10c00017 	ldw	r3,0(r2)
 4100e9c:	01ffbff4 	movhi	r7,65279
 4100ea0:	39ffbfc4 	addi	r7,r7,-257
 4100ea4:	00ca303a 	nor	r5,zero,r3
 4100ea8:	01a02074 	movhi	r6,32897
 4100eac:	19c7883a 	add	r3,r3,r7
 4100eb0:	31a02004 	addi	r6,r6,-32640
 4100eb4:	1946703a 	and	r3,r3,r5
 4100eb8:	1986703a 	and	r3,r3,r6
 4100ebc:	1800091e 	bne	r3,zero,4100ee4 <strlen+0x78>
 4100ec0:	10800104 	addi	r2,r2,4
 4100ec4:	10c00017 	ldw	r3,0(r2)
 4100ec8:	19cb883a 	add	r5,r3,r7
 4100ecc:	00c6303a 	nor	r3,zero,r3
 4100ed0:	28c6703a 	and	r3,r5,r3
 4100ed4:	1986703a 	and	r3,r3,r6
 4100ed8:	183ff926 	beq	r3,zero,4100ec0 <strlen+0x54>
 4100edc:	00000106 	br	4100ee4 <strlen+0x78>
 4100ee0:	10800044 	addi	r2,r2,1
 4100ee4:	10c00007 	ldb	r3,0(r2)
 4100ee8:	183ffd1e 	bne	r3,zero,4100ee0 <strlen+0x74>
 4100eec:	1105c83a 	sub	r2,r2,r4
 4100ef0:	f800283a 	ret
 4100ef4:	2005883a 	mov	r2,r4
 4100ef8:	003fe706 	br	4100e98 <strlen+0x2c>
 4100efc:	0005883a 	mov	r2,zero
 4100f00:	f800283a 	ret

04100f04 <time>:
 4100f04:	00810474 	movhi	r2,1041
 4100f08:	defffc04 	addi	sp,sp,-16
 4100f0c:	10853004 	addi	r2,r2,5312
 4100f10:	dc000215 	stw	r16,8(sp)
 4100f14:	2021883a 	mov	r16,r4
 4100f18:	11000017 	ldw	r4,0(r2)
 4100f1c:	000d883a 	mov	r6,zero
 4100f20:	d80b883a 	mov	r5,sp
 4100f24:	dfc00315 	stw	ra,12(sp)
 4100f28:	41019380 	call	4101938 <_gettimeofday_r>
 4100f2c:	10000716 	blt	r2,zero,4100f4c <time+0x48>
 4100f30:	d8800017 	ldw	r2,0(sp)
 4100f34:	80000126 	beq	r16,zero,4100f3c <time+0x38>
 4100f38:	80800015 	stw	r2,0(r16)
 4100f3c:	dfc00317 	ldw	ra,12(sp)
 4100f40:	dc000217 	ldw	r16,8(sp)
 4100f44:	dec00404 	addi	sp,sp,16
 4100f48:	f800283a 	ret
 4100f4c:	00bfffc4 	movi	r2,-1
 4100f50:	003ffa06 	br	4100f3c <time+0x38>

04100f54 <__fp_unlock>:
 4100f54:	0005883a 	mov	r2,zero
 4100f58:	f800283a 	ret

04100f5c <_cleanup_r>:
 4100f5c:	01410434 	movhi	r5,1040
 4100f60:	294b8104 	addi	r5,r5,11780
 4100f64:	41018741 	jmpi	4101874 <_fwalk_reent>

04100f68 <__sinit.part.1>:
 4100f68:	defff704 	addi	sp,sp,-36
 4100f6c:	00c10434 	movhi	r3,1040
 4100f70:	dfc00815 	stw	ra,32(sp)
 4100f74:	ddc00715 	stw	r23,28(sp)
 4100f78:	dd800615 	stw	r22,24(sp)
 4100f7c:	dd400515 	stw	r21,20(sp)
 4100f80:	dd000415 	stw	r20,16(sp)
 4100f84:	dcc00315 	stw	r19,12(sp)
 4100f88:	dc800215 	stw	r18,8(sp)
 4100f8c:	dc400115 	stw	r17,4(sp)
 4100f90:	dc000015 	stw	r16,0(sp)
 4100f94:	18c3d704 	addi	r3,r3,3932
 4100f98:	24000117 	ldw	r16,4(r4)
 4100f9c:	20c00f15 	stw	r3,60(r4)
 4100fa0:	2080bb04 	addi	r2,r4,748
 4100fa4:	00c000c4 	movi	r3,3
 4100fa8:	20c0b915 	stw	r3,740(r4)
 4100fac:	2080ba15 	stw	r2,744(r4)
 4100fb0:	2000b815 	stw	zero,736(r4)
 4100fb4:	05c00204 	movi	r23,8
 4100fb8:	00800104 	movi	r2,4
 4100fbc:	2025883a 	mov	r18,r4
 4100fc0:	b80d883a 	mov	r6,r23
 4100fc4:	81001704 	addi	r4,r16,92
 4100fc8:	000b883a 	mov	r5,zero
 4100fcc:	80000015 	stw	zero,0(r16)
 4100fd0:	80000115 	stw	zero,4(r16)
 4100fd4:	80000215 	stw	zero,8(r16)
 4100fd8:	8080030d 	sth	r2,12(r16)
 4100fdc:	80001915 	stw	zero,100(r16)
 4100fe0:	8000038d 	sth	zero,14(r16)
 4100fe4:	80000415 	stw	zero,16(r16)
 4100fe8:	80000515 	stw	zero,20(r16)
 4100fec:	80000615 	stw	zero,24(r16)
 4100ff0:	41023e00 	call	41023e0 <memset>
 4100ff4:	05810434 	movhi	r22,1040
 4100ff8:	94400217 	ldw	r17,8(r18)
 4100ffc:	05410434 	movhi	r21,1040
 4101000:	05010434 	movhi	r20,1040
 4101004:	04c10434 	movhi	r19,1040
 4101008:	b58ab004 	addi	r22,r22,10944
 410100c:	ad4ac704 	addi	r21,r21,11036
 4101010:	a50ae604 	addi	r20,r20,11160
 4101014:	9ccafd04 	addi	r19,r19,11252
 4101018:	85800815 	stw	r22,32(r16)
 410101c:	85400915 	stw	r21,36(r16)
 4101020:	85000a15 	stw	r20,40(r16)
 4101024:	84c00b15 	stw	r19,44(r16)
 4101028:	84000715 	stw	r16,28(r16)
 410102c:	00800284 	movi	r2,10
 4101030:	8880030d 	sth	r2,12(r17)
 4101034:	00800044 	movi	r2,1
 4101038:	b80d883a 	mov	r6,r23
 410103c:	89001704 	addi	r4,r17,92
 4101040:	000b883a 	mov	r5,zero
 4101044:	88000015 	stw	zero,0(r17)
 4101048:	88000115 	stw	zero,4(r17)
 410104c:	88000215 	stw	zero,8(r17)
 4101050:	88001915 	stw	zero,100(r17)
 4101054:	8880038d 	sth	r2,14(r17)
 4101058:	88000415 	stw	zero,16(r17)
 410105c:	88000515 	stw	zero,20(r17)
 4101060:	88000615 	stw	zero,24(r17)
 4101064:	41023e00 	call	41023e0 <memset>
 4101068:	94000317 	ldw	r16,12(r18)
 410106c:	00800484 	movi	r2,18
 4101070:	8c400715 	stw	r17,28(r17)
 4101074:	8d800815 	stw	r22,32(r17)
 4101078:	8d400915 	stw	r21,36(r17)
 410107c:	8d000a15 	stw	r20,40(r17)
 4101080:	8cc00b15 	stw	r19,44(r17)
 4101084:	8080030d 	sth	r2,12(r16)
 4101088:	00800084 	movi	r2,2
 410108c:	80000015 	stw	zero,0(r16)
 4101090:	80000115 	stw	zero,4(r16)
 4101094:	80000215 	stw	zero,8(r16)
 4101098:	80001915 	stw	zero,100(r16)
 410109c:	8080038d 	sth	r2,14(r16)
 41010a0:	80000415 	stw	zero,16(r16)
 41010a4:	80000515 	stw	zero,20(r16)
 41010a8:	80000615 	stw	zero,24(r16)
 41010ac:	b80d883a 	mov	r6,r23
 41010b0:	000b883a 	mov	r5,zero
 41010b4:	81001704 	addi	r4,r16,92
 41010b8:	41023e00 	call	41023e0 <memset>
 41010bc:	00800044 	movi	r2,1
 41010c0:	84000715 	stw	r16,28(r16)
 41010c4:	85800815 	stw	r22,32(r16)
 41010c8:	85400915 	stw	r21,36(r16)
 41010cc:	85000a15 	stw	r20,40(r16)
 41010d0:	84c00b15 	stw	r19,44(r16)
 41010d4:	90800e15 	stw	r2,56(r18)
 41010d8:	dfc00817 	ldw	ra,32(sp)
 41010dc:	ddc00717 	ldw	r23,28(sp)
 41010e0:	dd800617 	ldw	r22,24(sp)
 41010e4:	dd400517 	ldw	r21,20(sp)
 41010e8:	dd000417 	ldw	r20,16(sp)
 41010ec:	dcc00317 	ldw	r19,12(sp)
 41010f0:	dc800217 	ldw	r18,8(sp)
 41010f4:	dc400117 	ldw	r17,4(sp)
 41010f8:	dc000017 	ldw	r16,0(sp)
 41010fc:	dec00904 	addi	sp,sp,36
 4101100:	f800283a 	ret

04101104 <__fp_lock>:
 4101104:	0005883a 	mov	r2,zero
 4101108:	f800283a 	ret

0410110c <__sfmoreglue>:
 410110c:	defffc04 	addi	sp,sp,-16
 4101110:	dc400115 	stw	r17,4(sp)
 4101114:	2c7fffc4 	addi	r17,r5,-1
 4101118:	8c401a24 	muli	r17,r17,104
 410111c:	dc800215 	stw	r18,8(sp)
 4101120:	2825883a 	mov	r18,r5
 4101124:	89401d04 	addi	r5,r17,116
 4101128:	dc000015 	stw	r16,0(sp)
 410112c:	dfc00315 	stw	ra,12(sp)
 4101130:	41019940 	call	4101994 <_malloc_r>
 4101134:	1021883a 	mov	r16,r2
 4101138:	10000726 	beq	r2,zero,4101158 <__sfmoreglue+0x4c>
 410113c:	11000304 	addi	r4,r2,12
 4101140:	10000015 	stw	zero,0(r2)
 4101144:	14800115 	stw	r18,4(r2)
 4101148:	11000215 	stw	r4,8(r2)
 410114c:	89801a04 	addi	r6,r17,104
 4101150:	000b883a 	mov	r5,zero
 4101154:	41023e00 	call	41023e0 <memset>
 4101158:	8005883a 	mov	r2,r16
 410115c:	dfc00317 	ldw	ra,12(sp)
 4101160:	dc800217 	ldw	r18,8(sp)
 4101164:	dc400117 	ldw	r17,4(sp)
 4101168:	dc000017 	ldw	r16,0(sp)
 410116c:	dec00404 	addi	sp,sp,16
 4101170:	f800283a 	ret

04101174 <__sfp>:
 4101174:	defffb04 	addi	sp,sp,-20
 4101178:	dc000015 	stw	r16,0(sp)
 410117c:	04010474 	movhi	r16,1041
 4101180:	84052f04 	addi	r16,r16,5308
 4101184:	dcc00315 	stw	r19,12(sp)
 4101188:	2027883a 	mov	r19,r4
 410118c:	81000017 	ldw	r4,0(r16)
 4101190:	dfc00415 	stw	ra,16(sp)
 4101194:	dc800215 	stw	r18,8(sp)
 4101198:	20800e17 	ldw	r2,56(r4)
 410119c:	dc400115 	stw	r17,4(sp)
 41011a0:	1000021e 	bne	r2,zero,41011ac <__sfp+0x38>
 41011a4:	4100f680 	call	4100f68 <__sinit.part.1>
 41011a8:	81000017 	ldw	r4,0(r16)
 41011ac:	2480b804 	addi	r18,r4,736
 41011b0:	047fffc4 	movi	r17,-1
 41011b4:	91000117 	ldw	r4,4(r18)
 41011b8:	94000217 	ldw	r16,8(r18)
 41011bc:	213fffc4 	addi	r4,r4,-1
 41011c0:	20000a16 	blt	r4,zero,41011ec <__sfp+0x78>
 41011c4:	8080030f 	ldh	r2,12(r16)
 41011c8:	10000c26 	beq	r2,zero,41011fc <__sfp+0x88>
 41011cc:	80c01d04 	addi	r3,r16,116
 41011d0:	00000206 	br	41011dc <__sfp+0x68>
 41011d4:	18bfe60f 	ldh	r2,-104(r3)
 41011d8:	10000826 	beq	r2,zero,41011fc <__sfp+0x88>
 41011dc:	213fffc4 	addi	r4,r4,-1
 41011e0:	1c3ffd04 	addi	r16,r3,-12
 41011e4:	18c01a04 	addi	r3,r3,104
 41011e8:	247ffa1e 	bne	r4,r17,41011d4 <__sfp+0x60>
 41011ec:	90800017 	ldw	r2,0(r18)
 41011f0:	10001d26 	beq	r2,zero,4101268 <__sfp+0xf4>
 41011f4:	1025883a 	mov	r18,r2
 41011f8:	003fee06 	br	41011b4 <__sfp+0x40>
 41011fc:	00bfffc4 	movi	r2,-1
 4101200:	8080038d 	sth	r2,14(r16)
 4101204:	00800044 	movi	r2,1
 4101208:	8080030d 	sth	r2,12(r16)
 410120c:	80001915 	stw	zero,100(r16)
 4101210:	80000015 	stw	zero,0(r16)
 4101214:	80000215 	stw	zero,8(r16)
 4101218:	80000115 	stw	zero,4(r16)
 410121c:	80000415 	stw	zero,16(r16)
 4101220:	80000515 	stw	zero,20(r16)
 4101224:	80000615 	stw	zero,24(r16)
 4101228:	01800204 	movi	r6,8
 410122c:	000b883a 	mov	r5,zero
 4101230:	81001704 	addi	r4,r16,92
 4101234:	41023e00 	call	41023e0 <memset>
 4101238:	8005883a 	mov	r2,r16
 410123c:	80000c15 	stw	zero,48(r16)
 4101240:	80000d15 	stw	zero,52(r16)
 4101244:	80001115 	stw	zero,68(r16)
 4101248:	80001215 	stw	zero,72(r16)
 410124c:	dfc00417 	ldw	ra,16(sp)
 4101250:	dcc00317 	ldw	r19,12(sp)
 4101254:	dc800217 	ldw	r18,8(sp)
 4101258:	dc400117 	ldw	r17,4(sp)
 410125c:	dc000017 	ldw	r16,0(sp)
 4101260:	dec00504 	addi	sp,sp,20
 4101264:	f800283a 	ret
 4101268:	01400104 	movi	r5,4
 410126c:	9809883a 	mov	r4,r19
 4101270:	410110c0 	call	410110c <__sfmoreglue>
 4101274:	90800015 	stw	r2,0(r18)
 4101278:	103fde1e 	bne	r2,zero,41011f4 <__sfp+0x80>
 410127c:	00800304 	movi	r2,12
 4101280:	98800015 	stw	r2,0(r19)
 4101284:	0005883a 	mov	r2,zero
 4101288:	003ff006 	br	410124c <__sfp+0xd8>

0410128c <_cleanup>:
 410128c:	00810474 	movhi	r2,1041
 4101290:	10852f04 	addi	r2,r2,5308
 4101294:	11000017 	ldw	r4,0(r2)
 4101298:	01410434 	movhi	r5,1040
 410129c:	294b8104 	addi	r5,r5,11780
 41012a0:	41018741 	jmpi	4101874 <_fwalk_reent>

041012a4 <__sinit>:
 41012a4:	20800e17 	ldw	r2,56(r4)
 41012a8:	10000126 	beq	r2,zero,41012b0 <__sinit+0xc>
 41012ac:	f800283a 	ret
 41012b0:	4100f681 	jmpi	4100f68 <__sinit.part.1>

041012b4 <__sfp_lock_acquire>:
 41012b4:	f800283a 	ret

041012b8 <__sfp_lock_release>:
 41012b8:	f800283a 	ret

041012bc <__sinit_lock_acquire>:
 41012bc:	f800283a 	ret

041012c0 <__sinit_lock_release>:
 41012c0:	f800283a 	ret

041012c4 <__fp_lock_all>:
 41012c4:	00810474 	movhi	r2,1041
 41012c8:	10853004 	addi	r2,r2,5312
 41012cc:	11000017 	ldw	r4,0(r2)
 41012d0:	01410434 	movhi	r5,1040
 41012d4:	29444104 	addi	r5,r5,4356
 41012d8:	41017b01 	jmpi	41017b0 <_fwalk>

041012dc <__fp_unlock_all>:
 41012dc:	00810474 	movhi	r2,1041
 41012e0:	10853004 	addi	r2,r2,5312
 41012e4:	11000017 	ldw	r4,0(r2)
 41012e8:	01410434 	movhi	r5,1040
 41012ec:	2943d504 	addi	r5,r5,3924
 41012f0:	41017b01 	jmpi	41017b0 <_fwalk>

041012f4 <__sfvwrite_r>:
 41012f4:	30800217 	ldw	r2,8(r6)
 41012f8:	10006726 	beq	r2,zero,4101498 <__sfvwrite_r+0x1a4>
 41012fc:	28c0030b 	ldhu	r3,12(r5)
 4101300:	defff404 	addi	sp,sp,-48
 4101304:	dd400715 	stw	r21,28(sp)
 4101308:	dd000615 	stw	r20,24(sp)
 410130c:	dc000215 	stw	r16,8(sp)
 4101310:	dfc00b15 	stw	ra,44(sp)
 4101314:	df000a15 	stw	fp,40(sp)
 4101318:	ddc00915 	stw	r23,36(sp)
 410131c:	dd800815 	stw	r22,32(sp)
 4101320:	dcc00515 	stw	r19,20(sp)
 4101324:	dc800415 	stw	r18,16(sp)
 4101328:	dc400315 	stw	r17,12(sp)
 410132c:	1880020c 	andi	r2,r3,8
 4101330:	2821883a 	mov	r16,r5
 4101334:	202b883a 	mov	r21,r4
 4101338:	3029883a 	mov	r20,r6
 410133c:	10002726 	beq	r2,zero,41013dc <__sfvwrite_r+0xe8>
 4101340:	28800417 	ldw	r2,16(r5)
 4101344:	10002526 	beq	r2,zero,41013dc <__sfvwrite_r+0xe8>
 4101348:	1880008c 	andi	r2,r3,2
 410134c:	a4400017 	ldw	r17,0(r20)
 4101350:	10002a26 	beq	r2,zero,41013fc <__sfvwrite_r+0x108>
 4101354:	05a00034 	movhi	r22,32768
 4101358:	0027883a 	mov	r19,zero
 410135c:	0025883a 	mov	r18,zero
 4101360:	b5bf0004 	addi	r22,r22,-1024
 4101364:	980d883a 	mov	r6,r19
 4101368:	a809883a 	mov	r4,r21
 410136c:	90004626 	beq	r18,zero,4101488 <__sfvwrite_r+0x194>
 4101370:	900f883a 	mov	r7,r18
 4101374:	b480022e 	bgeu	r22,r18,4101380 <__sfvwrite_r+0x8c>
 4101378:	01e00034 	movhi	r7,32768
 410137c:	39ff0004 	addi	r7,r7,-1024
 4101380:	80800917 	ldw	r2,36(r16)
 4101384:	81400717 	ldw	r5,28(r16)
 4101388:	103ee83a 	callr	r2
 410138c:	0080570e 	bge	zero,r2,41014ec <__sfvwrite_r+0x1f8>
 4101390:	a0c00217 	ldw	r3,8(r20)
 4101394:	98a7883a 	add	r19,r19,r2
 4101398:	90a5c83a 	sub	r18,r18,r2
 410139c:	1885c83a 	sub	r2,r3,r2
 41013a0:	a0800215 	stw	r2,8(r20)
 41013a4:	103fef1e 	bne	r2,zero,4101364 <__sfvwrite_r+0x70>
 41013a8:	0005883a 	mov	r2,zero
 41013ac:	dfc00b17 	ldw	ra,44(sp)
 41013b0:	df000a17 	ldw	fp,40(sp)
 41013b4:	ddc00917 	ldw	r23,36(sp)
 41013b8:	dd800817 	ldw	r22,32(sp)
 41013bc:	dd400717 	ldw	r21,28(sp)
 41013c0:	dd000617 	ldw	r20,24(sp)
 41013c4:	dcc00517 	ldw	r19,20(sp)
 41013c8:	dc800417 	ldw	r18,16(sp)
 41013cc:	dc400317 	ldw	r17,12(sp)
 41013d0:	dc000217 	ldw	r16,8(sp)
 41013d4:	dec00c04 	addi	sp,sp,48
 41013d8:	f800283a 	ret
 41013dc:	800b883a 	mov	r5,r16
 41013e0:	a809883a 	mov	r4,r21
 41013e4:	4102c5c0 	call	4102c5c <__swsetup_r>
 41013e8:	1000eb1e 	bne	r2,zero,4101798 <__sfvwrite_r+0x4a4>
 41013ec:	80c0030b 	ldhu	r3,12(r16)
 41013f0:	a4400017 	ldw	r17,0(r20)
 41013f4:	1880008c 	andi	r2,r3,2
 41013f8:	103fd61e 	bne	r2,zero,4101354 <__sfvwrite_r+0x60>
 41013fc:	1880004c 	andi	r2,r3,1
 4101400:	10003f1e 	bne	r2,zero,4101500 <__sfvwrite_r+0x20c>
 4101404:	0039883a 	mov	fp,zero
 4101408:	0025883a 	mov	r18,zero
 410140c:	90001a26 	beq	r18,zero,4101478 <__sfvwrite_r+0x184>
 4101410:	1880800c 	andi	r2,r3,512
 4101414:	84c00217 	ldw	r19,8(r16)
 4101418:	10002126 	beq	r2,zero,41014a0 <__sfvwrite_r+0x1ac>
 410141c:	982f883a 	mov	r23,r19
 4101420:	94c09336 	bltu	r18,r19,4101670 <__sfvwrite_r+0x37c>
 4101424:	1881200c 	andi	r2,r3,1152
 4101428:	10009e1e 	bne	r2,zero,41016a4 <__sfvwrite_r+0x3b0>
 410142c:	81000017 	ldw	r4,0(r16)
 4101430:	b80d883a 	mov	r6,r23
 4101434:	e00b883a 	mov	r5,fp
 4101438:	41022840 	call	4102284 <memmove>
 410143c:	80c00217 	ldw	r3,8(r16)
 4101440:	81000017 	ldw	r4,0(r16)
 4101444:	9005883a 	mov	r2,r18
 4101448:	1ce7c83a 	sub	r19,r3,r19
 410144c:	25cf883a 	add	r7,r4,r23
 4101450:	84c00215 	stw	r19,8(r16)
 4101454:	81c00015 	stw	r7,0(r16)
 4101458:	a0c00217 	ldw	r3,8(r20)
 410145c:	e0b9883a 	add	fp,fp,r2
 4101460:	90a5c83a 	sub	r18,r18,r2
 4101464:	18a7c83a 	sub	r19,r3,r2
 4101468:	a4c00215 	stw	r19,8(r20)
 410146c:	983fce26 	beq	r19,zero,41013a8 <__sfvwrite_r+0xb4>
 4101470:	80c0030b 	ldhu	r3,12(r16)
 4101474:	903fe61e 	bne	r18,zero,4101410 <__sfvwrite_r+0x11c>
 4101478:	8f000017 	ldw	fp,0(r17)
 410147c:	8c800117 	ldw	r18,4(r17)
 4101480:	8c400204 	addi	r17,r17,8
 4101484:	003fe106 	br	410140c <__sfvwrite_r+0x118>
 4101488:	8cc00017 	ldw	r19,0(r17)
 410148c:	8c800117 	ldw	r18,4(r17)
 4101490:	8c400204 	addi	r17,r17,8
 4101494:	003fb306 	br	4101364 <__sfvwrite_r+0x70>
 4101498:	0005883a 	mov	r2,zero
 410149c:	f800283a 	ret
 41014a0:	81000017 	ldw	r4,0(r16)
 41014a4:	80800417 	ldw	r2,16(r16)
 41014a8:	11005736 	bltu	r2,r4,4101608 <__sfvwrite_r+0x314>
 41014ac:	85c00517 	ldw	r23,20(r16)
 41014b0:	95c05536 	bltu	r18,r23,4101608 <__sfvwrite_r+0x314>
 41014b4:	00a00034 	movhi	r2,32768
 41014b8:	10bfffc4 	addi	r2,r2,-1
 41014bc:	9009883a 	mov	r4,r18
 41014c0:	1480012e 	bgeu	r2,r18,41014c8 <__sfvwrite_r+0x1d4>
 41014c4:	1009883a 	mov	r4,r2
 41014c8:	b80b883a 	mov	r5,r23
 41014cc:	4100a200 	call	4100a20 <__divsi3>
 41014d0:	15cf383a 	mul	r7,r2,r23
 41014d4:	81400717 	ldw	r5,28(r16)
 41014d8:	80800917 	ldw	r2,36(r16)
 41014dc:	e00d883a 	mov	r6,fp
 41014e0:	a809883a 	mov	r4,r21
 41014e4:	103ee83a 	callr	r2
 41014e8:	00bfdb16 	blt	zero,r2,4101458 <__sfvwrite_r+0x164>
 41014ec:	8080030b 	ldhu	r2,12(r16)
 41014f0:	10801014 	ori	r2,r2,64
 41014f4:	8080030d 	sth	r2,12(r16)
 41014f8:	00bfffc4 	movi	r2,-1
 41014fc:	003fab06 	br	41013ac <__sfvwrite_r+0xb8>
 4101500:	0027883a 	mov	r19,zero
 4101504:	0011883a 	mov	r8,zero
 4101508:	0039883a 	mov	fp,zero
 410150c:	0025883a 	mov	r18,zero
 4101510:	90001f26 	beq	r18,zero,4101590 <__sfvwrite_r+0x29c>
 4101514:	40005a26 	beq	r8,zero,4101680 <__sfvwrite_r+0x38c>
 4101518:	982d883a 	mov	r22,r19
 410151c:	94c0012e 	bgeu	r18,r19,4101524 <__sfvwrite_r+0x230>
 4101520:	902d883a 	mov	r22,r18
 4101524:	81000017 	ldw	r4,0(r16)
 4101528:	80800417 	ldw	r2,16(r16)
 410152c:	b02f883a 	mov	r23,r22
 4101530:	81c00517 	ldw	r7,20(r16)
 4101534:	1100032e 	bgeu	r2,r4,4101544 <__sfvwrite_r+0x250>
 4101538:	80c00217 	ldw	r3,8(r16)
 410153c:	38c7883a 	add	r3,r7,r3
 4101540:	1d801816 	blt	r3,r22,41015a4 <__sfvwrite_r+0x2b0>
 4101544:	b1c03e16 	blt	r22,r7,4101640 <__sfvwrite_r+0x34c>
 4101548:	80800917 	ldw	r2,36(r16)
 410154c:	81400717 	ldw	r5,28(r16)
 4101550:	e00d883a 	mov	r6,fp
 4101554:	da000115 	stw	r8,4(sp)
 4101558:	a809883a 	mov	r4,r21
 410155c:	103ee83a 	callr	r2
 4101560:	102f883a 	mov	r23,r2
 4101564:	da000117 	ldw	r8,4(sp)
 4101568:	00bfe00e 	bge	zero,r2,41014ec <__sfvwrite_r+0x1f8>
 410156c:	9de7c83a 	sub	r19,r19,r23
 4101570:	98001f26 	beq	r19,zero,41015f0 <__sfvwrite_r+0x2fc>
 4101574:	a0800217 	ldw	r2,8(r20)
 4101578:	e5f9883a 	add	fp,fp,r23
 410157c:	95e5c83a 	sub	r18,r18,r23
 4101580:	15efc83a 	sub	r23,r2,r23
 4101584:	a5c00215 	stw	r23,8(r20)
 4101588:	b83f8726 	beq	r23,zero,41013a8 <__sfvwrite_r+0xb4>
 410158c:	903fe11e 	bne	r18,zero,4101514 <__sfvwrite_r+0x220>
 4101590:	8f000017 	ldw	fp,0(r17)
 4101594:	8c800117 	ldw	r18,4(r17)
 4101598:	0011883a 	mov	r8,zero
 410159c:	8c400204 	addi	r17,r17,8
 41015a0:	003fdb06 	br	4101510 <__sfvwrite_r+0x21c>
 41015a4:	180d883a 	mov	r6,r3
 41015a8:	e00b883a 	mov	r5,fp
 41015ac:	da000115 	stw	r8,4(sp)
 41015b0:	d8c00015 	stw	r3,0(sp)
 41015b4:	41022840 	call	4102284 <memmove>
 41015b8:	d8c00017 	ldw	r3,0(sp)
 41015bc:	80800017 	ldw	r2,0(r16)
 41015c0:	800b883a 	mov	r5,r16
 41015c4:	a809883a 	mov	r4,r21
 41015c8:	10c5883a 	add	r2,r2,r3
 41015cc:	80800015 	stw	r2,0(r16)
 41015d0:	d8c00015 	stw	r3,0(sp)
 41015d4:	41031240 	call	4103124 <_fflush_r>
 41015d8:	d8c00017 	ldw	r3,0(sp)
 41015dc:	da000117 	ldw	r8,4(sp)
 41015e0:	103fc21e 	bne	r2,zero,41014ec <__sfvwrite_r+0x1f8>
 41015e4:	182f883a 	mov	r23,r3
 41015e8:	9de7c83a 	sub	r19,r19,r23
 41015ec:	983fe11e 	bne	r19,zero,4101574 <__sfvwrite_r+0x280>
 41015f0:	800b883a 	mov	r5,r16
 41015f4:	a809883a 	mov	r4,r21
 41015f8:	41031240 	call	4103124 <_fflush_r>
 41015fc:	103fbb1e 	bne	r2,zero,41014ec <__sfvwrite_r+0x1f8>
 4101600:	0011883a 	mov	r8,zero
 4101604:	003fdb06 	br	4101574 <__sfvwrite_r+0x280>
 4101608:	94c0012e 	bgeu	r18,r19,4101610 <__sfvwrite_r+0x31c>
 410160c:	9027883a 	mov	r19,r18
 4101610:	980d883a 	mov	r6,r19
 4101614:	e00b883a 	mov	r5,fp
 4101618:	41022840 	call	4102284 <memmove>
 410161c:	80800217 	ldw	r2,8(r16)
 4101620:	80c00017 	ldw	r3,0(r16)
 4101624:	14c5c83a 	sub	r2,r2,r19
 4101628:	1cc7883a 	add	r3,r3,r19
 410162c:	80800215 	stw	r2,8(r16)
 4101630:	80c00015 	stw	r3,0(r16)
 4101634:	10004326 	beq	r2,zero,4101744 <__sfvwrite_r+0x450>
 4101638:	9805883a 	mov	r2,r19
 410163c:	003f8606 	br	4101458 <__sfvwrite_r+0x164>
 4101640:	b00d883a 	mov	r6,r22
 4101644:	e00b883a 	mov	r5,fp
 4101648:	da000115 	stw	r8,4(sp)
 410164c:	41022840 	call	4102284 <memmove>
 4101650:	80800217 	ldw	r2,8(r16)
 4101654:	80c00017 	ldw	r3,0(r16)
 4101658:	da000117 	ldw	r8,4(sp)
 410165c:	1585c83a 	sub	r2,r2,r22
 4101660:	1dad883a 	add	r22,r3,r22
 4101664:	80800215 	stw	r2,8(r16)
 4101668:	85800015 	stw	r22,0(r16)
 410166c:	003fbf06 	br	410156c <__sfvwrite_r+0x278>
 4101670:	81000017 	ldw	r4,0(r16)
 4101674:	9027883a 	mov	r19,r18
 4101678:	902f883a 	mov	r23,r18
 410167c:	003f6c06 	br	4101430 <__sfvwrite_r+0x13c>
 4101680:	900d883a 	mov	r6,r18
 4101684:	01400284 	movi	r5,10
 4101688:	e009883a 	mov	r4,fp
 410168c:	41021a00 	call	41021a0 <memchr>
 4101690:	10003e26 	beq	r2,zero,410178c <__sfvwrite_r+0x498>
 4101694:	10800044 	addi	r2,r2,1
 4101698:	1727c83a 	sub	r19,r2,fp
 410169c:	02000044 	movi	r8,1
 41016a0:	003f9d06 	br	4101518 <__sfvwrite_r+0x224>
 41016a4:	80800517 	ldw	r2,20(r16)
 41016a8:	81400417 	ldw	r5,16(r16)
 41016ac:	81c00017 	ldw	r7,0(r16)
 41016b0:	10a7883a 	add	r19,r2,r2
 41016b4:	9885883a 	add	r2,r19,r2
 41016b8:	1026d7fa 	srli	r19,r2,31
 41016bc:	396dc83a 	sub	r22,r7,r5
 41016c0:	b1000044 	addi	r4,r22,1
 41016c4:	9885883a 	add	r2,r19,r2
 41016c8:	1027d07a 	srai	r19,r2,1
 41016cc:	2485883a 	add	r2,r4,r18
 41016d0:	980d883a 	mov	r6,r19
 41016d4:	9880022e 	bgeu	r19,r2,41016e0 <__sfvwrite_r+0x3ec>
 41016d8:	1027883a 	mov	r19,r2
 41016dc:	100d883a 	mov	r6,r2
 41016e0:	18c1000c 	andi	r3,r3,1024
 41016e4:	18001c26 	beq	r3,zero,4101758 <__sfvwrite_r+0x464>
 41016e8:	300b883a 	mov	r5,r6
 41016ec:	a809883a 	mov	r4,r21
 41016f0:	41019940 	call	4101994 <_malloc_r>
 41016f4:	102f883a 	mov	r23,r2
 41016f8:	10002926 	beq	r2,zero,41017a0 <__sfvwrite_r+0x4ac>
 41016fc:	81400417 	ldw	r5,16(r16)
 4101700:	b00d883a 	mov	r6,r22
 4101704:	1009883a 	mov	r4,r2
 4101708:	4100bd40 	call	4100bd4 <memcpy>
 410170c:	8080030b 	ldhu	r2,12(r16)
 4101710:	00fedfc4 	movi	r3,-1153
 4101714:	10c4703a 	and	r2,r2,r3
 4101718:	10802014 	ori	r2,r2,128
 410171c:	8080030d 	sth	r2,12(r16)
 4101720:	bd89883a 	add	r4,r23,r22
 4101724:	9d8fc83a 	sub	r7,r19,r22
 4101728:	85c00415 	stw	r23,16(r16)
 410172c:	84c00515 	stw	r19,20(r16)
 4101730:	81000015 	stw	r4,0(r16)
 4101734:	9027883a 	mov	r19,r18
 4101738:	81c00215 	stw	r7,8(r16)
 410173c:	902f883a 	mov	r23,r18
 4101740:	003f3b06 	br	4101430 <__sfvwrite_r+0x13c>
 4101744:	800b883a 	mov	r5,r16
 4101748:	a809883a 	mov	r4,r21
 410174c:	41031240 	call	4103124 <_fflush_r>
 4101750:	103fb926 	beq	r2,zero,4101638 <__sfvwrite_r+0x344>
 4101754:	003f6506 	br	41014ec <__sfvwrite_r+0x1f8>
 4101758:	a809883a 	mov	r4,r21
 410175c:	41025080 	call	4102508 <_realloc_r>
 4101760:	102f883a 	mov	r23,r2
 4101764:	103fee1e 	bne	r2,zero,4101720 <__sfvwrite_r+0x42c>
 4101768:	81400417 	ldw	r5,16(r16)
 410176c:	a809883a 	mov	r4,r21
 4101770:	41032d40 	call	41032d4 <_free_r>
 4101774:	8080030b 	ldhu	r2,12(r16)
 4101778:	00ffdfc4 	movi	r3,-129
 410177c:	1884703a 	and	r2,r3,r2
 4101780:	00c00304 	movi	r3,12
 4101784:	a8c00015 	stw	r3,0(r21)
 4101788:	003f5906 	br	41014f0 <__sfvwrite_r+0x1fc>
 410178c:	94c00044 	addi	r19,r18,1
 4101790:	02000044 	movi	r8,1
 4101794:	003f6006 	br	4101518 <__sfvwrite_r+0x224>
 4101798:	00bfffc4 	movi	r2,-1
 410179c:	003f0306 	br	41013ac <__sfvwrite_r+0xb8>
 41017a0:	00800304 	movi	r2,12
 41017a4:	a8800015 	stw	r2,0(r21)
 41017a8:	8080030b 	ldhu	r2,12(r16)
 41017ac:	003f5006 	br	41014f0 <__sfvwrite_r+0x1fc>

041017b0 <_fwalk>:
 41017b0:	defff704 	addi	sp,sp,-36
 41017b4:	dd000415 	stw	r20,16(sp)
 41017b8:	dfc00815 	stw	ra,32(sp)
 41017bc:	ddc00715 	stw	r23,28(sp)
 41017c0:	dd800615 	stw	r22,24(sp)
 41017c4:	dd400515 	stw	r21,20(sp)
 41017c8:	dcc00315 	stw	r19,12(sp)
 41017cc:	dc800215 	stw	r18,8(sp)
 41017d0:	dc400115 	stw	r17,4(sp)
 41017d4:	dc000015 	stw	r16,0(sp)
 41017d8:	2500b804 	addi	r20,r4,736
 41017dc:	a0002326 	beq	r20,zero,410186c <_fwalk+0xbc>
 41017e0:	282b883a 	mov	r21,r5
 41017e4:	002f883a 	mov	r23,zero
 41017e8:	05800044 	movi	r22,1
 41017ec:	04ffffc4 	movi	r19,-1
 41017f0:	a4400117 	ldw	r17,4(r20)
 41017f4:	a4800217 	ldw	r18,8(r20)
 41017f8:	8c7fffc4 	addi	r17,r17,-1
 41017fc:	88000d16 	blt	r17,zero,4101834 <_fwalk+0x84>
 4101800:	94000304 	addi	r16,r18,12
 4101804:	94800384 	addi	r18,r18,14
 4101808:	8080000b 	ldhu	r2,0(r16)
 410180c:	8c7fffc4 	addi	r17,r17,-1
 4101810:	813ffd04 	addi	r4,r16,-12
 4101814:	b080042e 	bgeu	r22,r2,4101828 <_fwalk+0x78>
 4101818:	9080000f 	ldh	r2,0(r18)
 410181c:	14c00226 	beq	r2,r19,4101828 <_fwalk+0x78>
 4101820:	a83ee83a 	callr	r21
 4101824:	b8aeb03a 	or	r23,r23,r2
 4101828:	84001a04 	addi	r16,r16,104
 410182c:	94801a04 	addi	r18,r18,104
 4101830:	8cfff51e 	bne	r17,r19,4101808 <_fwalk+0x58>
 4101834:	a5000017 	ldw	r20,0(r20)
 4101838:	a03fed1e 	bne	r20,zero,41017f0 <_fwalk+0x40>
 410183c:	b805883a 	mov	r2,r23
 4101840:	dfc00817 	ldw	ra,32(sp)
 4101844:	ddc00717 	ldw	r23,28(sp)
 4101848:	dd800617 	ldw	r22,24(sp)
 410184c:	dd400517 	ldw	r21,20(sp)
 4101850:	dd000417 	ldw	r20,16(sp)
 4101854:	dcc00317 	ldw	r19,12(sp)
 4101858:	dc800217 	ldw	r18,8(sp)
 410185c:	dc400117 	ldw	r17,4(sp)
 4101860:	dc000017 	ldw	r16,0(sp)
 4101864:	dec00904 	addi	sp,sp,36
 4101868:	f800283a 	ret
 410186c:	002f883a 	mov	r23,zero
 4101870:	003ff206 	br	410183c <_fwalk+0x8c>

04101874 <_fwalk_reent>:
 4101874:	defff704 	addi	sp,sp,-36
 4101878:	dd000415 	stw	r20,16(sp)
 410187c:	dfc00815 	stw	ra,32(sp)
 4101880:	ddc00715 	stw	r23,28(sp)
 4101884:	dd800615 	stw	r22,24(sp)
 4101888:	dd400515 	stw	r21,20(sp)
 410188c:	dcc00315 	stw	r19,12(sp)
 4101890:	dc800215 	stw	r18,8(sp)
 4101894:	dc400115 	stw	r17,4(sp)
 4101898:	dc000015 	stw	r16,0(sp)
 410189c:	2500b804 	addi	r20,r4,736
 41018a0:	a0002326 	beq	r20,zero,4101930 <_fwalk_reent+0xbc>
 41018a4:	282b883a 	mov	r21,r5
 41018a8:	2027883a 	mov	r19,r4
 41018ac:	002f883a 	mov	r23,zero
 41018b0:	05800044 	movi	r22,1
 41018b4:	04bfffc4 	movi	r18,-1
 41018b8:	a4400117 	ldw	r17,4(r20)
 41018bc:	a4000217 	ldw	r16,8(r20)
 41018c0:	8c7fffc4 	addi	r17,r17,-1
 41018c4:	88000c16 	blt	r17,zero,41018f8 <_fwalk_reent+0x84>
 41018c8:	84000304 	addi	r16,r16,12
 41018cc:	8080000b 	ldhu	r2,0(r16)
 41018d0:	8c7fffc4 	addi	r17,r17,-1
 41018d4:	817ffd04 	addi	r5,r16,-12
 41018d8:	b080052e 	bgeu	r22,r2,41018f0 <_fwalk_reent+0x7c>
 41018dc:	8080008f 	ldh	r2,2(r16)
 41018e0:	9809883a 	mov	r4,r19
 41018e4:	14800226 	beq	r2,r18,41018f0 <_fwalk_reent+0x7c>
 41018e8:	a83ee83a 	callr	r21
 41018ec:	b8aeb03a 	or	r23,r23,r2
 41018f0:	84001a04 	addi	r16,r16,104
 41018f4:	8cbff51e 	bne	r17,r18,41018cc <_fwalk_reent+0x58>
 41018f8:	a5000017 	ldw	r20,0(r20)
 41018fc:	a03fee1e 	bne	r20,zero,41018b8 <_fwalk_reent+0x44>
 4101900:	b805883a 	mov	r2,r23
 4101904:	dfc00817 	ldw	ra,32(sp)
 4101908:	ddc00717 	ldw	r23,28(sp)
 410190c:	dd800617 	ldw	r22,24(sp)
 4101910:	dd400517 	ldw	r21,20(sp)
 4101914:	dd000417 	ldw	r20,16(sp)
 4101918:	dcc00317 	ldw	r19,12(sp)
 410191c:	dc800217 	ldw	r18,8(sp)
 4101920:	dc400117 	ldw	r17,4(sp)
 4101924:	dc000017 	ldw	r16,0(sp)
 4101928:	dec00904 	addi	sp,sp,36
 410192c:	f800283a 	ret
 4101930:	002f883a 	mov	r23,zero
 4101934:	003ff206 	br	4101900 <_fwalk_reent+0x8c>

04101938 <_gettimeofday_r>:
 4101938:	defffd04 	addi	sp,sp,-12
 410193c:	2805883a 	mov	r2,r5
 4101940:	dc000015 	stw	r16,0(sp)
 4101944:	04010474 	movhi	r16,1041
 4101948:	dc400115 	stw	r17,4(sp)
 410194c:	840c3f04 	addi	r16,r16,12540
 4101950:	2023883a 	mov	r17,r4
 4101954:	300b883a 	mov	r5,r6
 4101958:	1009883a 	mov	r4,r2
 410195c:	dfc00215 	stw	ra,8(sp)
 4101960:	80000015 	stw	zero,0(r16)
 4101964:	4103b940 	call	4103b94 <gettimeofday>
 4101968:	00ffffc4 	movi	r3,-1
 410196c:	10c00526 	beq	r2,r3,4101984 <_gettimeofday_r+0x4c>
 4101970:	dfc00217 	ldw	ra,8(sp)
 4101974:	dc400117 	ldw	r17,4(sp)
 4101978:	dc000017 	ldw	r16,0(sp)
 410197c:	dec00304 	addi	sp,sp,12
 4101980:	f800283a 	ret
 4101984:	80c00017 	ldw	r3,0(r16)
 4101988:	183ff926 	beq	r3,zero,4101970 <_gettimeofday_r+0x38>
 410198c:	88c00015 	stw	r3,0(r17)
 4101990:	003ff706 	br	4101970 <_gettimeofday_r+0x38>

04101994 <_malloc_r>:
 4101994:	defff504 	addi	sp,sp,-44
 4101998:	dc800315 	stw	r18,12(sp)
 410199c:	dfc00a15 	stw	ra,40(sp)
 41019a0:	df000915 	stw	fp,36(sp)
 41019a4:	ddc00815 	stw	r23,32(sp)
 41019a8:	dd800715 	stw	r22,28(sp)
 41019ac:	dd400615 	stw	r21,24(sp)
 41019b0:	dd000515 	stw	r20,20(sp)
 41019b4:	dcc00415 	stw	r19,16(sp)
 41019b8:	dc400215 	stw	r17,8(sp)
 41019bc:	dc000115 	stw	r16,4(sp)
 41019c0:	288002c4 	addi	r2,r5,11
 41019c4:	00c00584 	movi	r3,22
 41019c8:	2025883a 	mov	r18,r4
 41019cc:	18807f2e 	bgeu	r3,r2,4101bcc <_malloc_r+0x238>
 41019d0:	047ffe04 	movi	r17,-8
 41019d4:	1462703a 	and	r17,r2,r17
 41019d8:	8800a316 	blt	r17,zero,4101c68 <_malloc_r+0x2d4>
 41019dc:	8940a236 	bltu	r17,r5,4101c68 <_malloc_r+0x2d4>
 41019e0:	4104a080 	call	4104a08 <__malloc_lock>
 41019e4:	00807dc4 	movi	r2,503
 41019e8:	1441e92e 	bgeu	r2,r17,4102190 <_malloc_r+0x7fc>
 41019ec:	8804d27a 	srli	r2,r17,9
 41019f0:	1000a126 	beq	r2,zero,4101c78 <_malloc_r+0x2e4>
 41019f4:	00c00104 	movi	r3,4
 41019f8:	18811e36 	bltu	r3,r2,4101e74 <_malloc_r+0x4e0>
 41019fc:	8804d1ba 	srli	r2,r17,6
 4101a00:	12000e44 	addi	r8,r2,57
 4101a04:	11c00e04 	addi	r7,r2,56
 4101a08:	4209883a 	add	r4,r8,r8
 4101a0c:	04c10474 	movhi	r19,1041
 4101a10:	2109883a 	add	r4,r4,r4
 4101a14:	9cff9004 	addi	r19,r19,-448
 4101a18:	2109883a 	add	r4,r4,r4
 4101a1c:	9909883a 	add	r4,r19,r4
 4101a20:	24000117 	ldw	r16,4(r4)
 4101a24:	213ffe04 	addi	r4,r4,-8
 4101a28:	24009726 	beq	r4,r16,4101c88 <_malloc_r+0x2f4>
 4101a2c:	80800117 	ldw	r2,4(r16)
 4101a30:	01bfff04 	movi	r6,-4
 4101a34:	014003c4 	movi	r5,15
 4101a38:	1184703a 	and	r2,r2,r6
 4101a3c:	1447c83a 	sub	r3,r2,r17
 4101a40:	28c00716 	blt	r5,r3,4101a60 <_malloc_r+0xcc>
 4101a44:	1800920e 	bge	r3,zero,4101c90 <_malloc_r+0x2fc>
 4101a48:	84000317 	ldw	r16,12(r16)
 4101a4c:	24008e26 	beq	r4,r16,4101c88 <_malloc_r+0x2f4>
 4101a50:	80800117 	ldw	r2,4(r16)
 4101a54:	1184703a 	and	r2,r2,r6
 4101a58:	1447c83a 	sub	r3,r2,r17
 4101a5c:	28fff90e 	bge	r5,r3,4101a44 <_malloc_r+0xb0>
 4101a60:	3809883a 	mov	r4,r7
 4101a64:	01810474 	movhi	r6,1041
 4101a68:	9c000417 	ldw	r16,16(r19)
 4101a6c:	31bf9004 	addi	r6,r6,-448
 4101a70:	32000204 	addi	r8,r6,8
 4101a74:	82013426 	beq	r16,r8,4101f48 <_malloc_r+0x5b4>
 4101a78:	80c00117 	ldw	r3,4(r16)
 4101a7c:	00bfff04 	movi	r2,-4
 4101a80:	188e703a 	and	r7,r3,r2
 4101a84:	3c45c83a 	sub	r2,r7,r17
 4101a88:	00c003c4 	movi	r3,15
 4101a8c:	18811f16 	blt	r3,r2,4101f0c <_malloc_r+0x578>
 4101a90:	32000515 	stw	r8,20(r6)
 4101a94:	32000415 	stw	r8,16(r6)
 4101a98:	10007f0e 	bge	r2,zero,4101c98 <_malloc_r+0x304>
 4101a9c:	00807fc4 	movi	r2,511
 4101aa0:	11c0fd36 	bltu	r2,r7,4101e98 <_malloc_r+0x504>
 4101aa4:	3806d0fa 	srli	r3,r7,3
 4101aa8:	01c00044 	movi	r7,1
 4101aac:	30800117 	ldw	r2,4(r6)
 4101ab0:	19400044 	addi	r5,r3,1
 4101ab4:	294b883a 	add	r5,r5,r5
 4101ab8:	1807d0ba 	srai	r3,r3,2
 4101abc:	294b883a 	add	r5,r5,r5
 4101ac0:	294b883a 	add	r5,r5,r5
 4101ac4:	298b883a 	add	r5,r5,r6
 4101ac8:	38c6983a 	sll	r3,r7,r3
 4101acc:	29c00017 	ldw	r7,0(r5)
 4101ad0:	2a7ffe04 	addi	r9,r5,-8
 4101ad4:	1886b03a 	or	r3,r3,r2
 4101ad8:	82400315 	stw	r9,12(r16)
 4101adc:	81c00215 	stw	r7,8(r16)
 4101ae0:	30c00115 	stw	r3,4(r6)
 4101ae4:	2c000015 	stw	r16,0(r5)
 4101ae8:	3c000315 	stw	r16,12(r7)
 4101aec:	2005d0ba 	srai	r2,r4,2
 4101af0:	01400044 	movi	r5,1
 4101af4:	288a983a 	sll	r5,r5,r2
 4101af8:	19406f36 	bltu	r3,r5,4101cb8 <_malloc_r+0x324>
 4101afc:	28c4703a 	and	r2,r5,r3
 4101b00:	10000a1e 	bne	r2,zero,4101b2c <_malloc_r+0x198>
 4101b04:	00bfff04 	movi	r2,-4
 4101b08:	294b883a 	add	r5,r5,r5
 4101b0c:	2088703a 	and	r4,r4,r2
 4101b10:	28c4703a 	and	r2,r5,r3
 4101b14:	21000104 	addi	r4,r4,4
 4101b18:	1000041e 	bne	r2,zero,4101b2c <_malloc_r+0x198>
 4101b1c:	294b883a 	add	r5,r5,r5
 4101b20:	28c4703a 	and	r2,r5,r3
 4101b24:	21000104 	addi	r4,r4,4
 4101b28:	103ffc26 	beq	r2,zero,4101b1c <_malloc_r+0x188>
 4101b2c:	02bfff04 	movi	r10,-4
 4101b30:	024003c4 	movi	r9,15
 4101b34:	21800044 	addi	r6,r4,1
 4101b38:	318d883a 	add	r6,r6,r6
 4101b3c:	318d883a 	add	r6,r6,r6
 4101b40:	318d883a 	add	r6,r6,r6
 4101b44:	998d883a 	add	r6,r19,r6
 4101b48:	333ffe04 	addi	r12,r6,-8
 4101b4c:	2017883a 	mov	r11,r4
 4101b50:	31800104 	addi	r6,r6,4
 4101b54:	34000017 	ldw	r16,0(r6)
 4101b58:	31fffd04 	addi	r7,r6,-12
 4101b5c:	81c0041e 	bne	r16,r7,4101b70 <_malloc_r+0x1dc>
 4101b60:	0000fb06 	br	4101f50 <_malloc_r+0x5bc>
 4101b64:	1801030e 	bge	r3,zero,4101f74 <_malloc_r+0x5e0>
 4101b68:	84000317 	ldw	r16,12(r16)
 4101b6c:	81c0f826 	beq	r16,r7,4101f50 <_malloc_r+0x5bc>
 4101b70:	80800117 	ldw	r2,4(r16)
 4101b74:	1284703a 	and	r2,r2,r10
 4101b78:	1447c83a 	sub	r3,r2,r17
 4101b7c:	48fff90e 	bge	r9,r3,4101b64 <_malloc_r+0x1d0>
 4101b80:	80800317 	ldw	r2,12(r16)
 4101b84:	81000217 	ldw	r4,8(r16)
 4101b88:	89400054 	ori	r5,r17,1
 4101b8c:	81400115 	stw	r5,4(r16)
 4101b90:	20800315 	stw	r2,12(r4)
 4101b94:	11000215 	stw	r4,8(r2)
 4101b98:	8463883a 	add	r17,r16,r17
 4101b9c:	9c400515 	stw	r17,20(r19)
 4101ba0:	9c400415 	stw	r17,16(r19)
 4101ba4:	18800054 	ori	r2,r3,1
 4101ba8:	88800115 	stw	r2,4(r17)
 4101bac:	8a000315 	stw	r8,12(r17)
 4101bb0:	8a000215 	stw	r8,8(r17)
 4101bb4:	88e3883a 	add	r17,r17,r3
 4101bb8:	88c00015 	stw	r3,0(r17)
 4101bbc:	9009883a 	mov	r4,r18
 4101bc0:	4104b280 	call	4104b28 <__malloc_unlock>
 4101bc4:	80800204 	addi	r2,r16,8
 4101bc8:	00001b06 	br	4101c38 <_malloc_r+0x2a4>
 4101bcc:	04400404 	movi	r17,16
 4101bd0:	89402536 	bltu	r17,r5,4101c68 <_malloc_r+0x2d4>
 4101bd4:	4104a080 	call	4104a08 <__malloc_lock>
 4101bd8:	00800184 	movi	r2,6
 4101bdc:	01000084 	movi	r4,2
 4101be0:	04c10474 	movhi	r19,1041
 4101be4:	1085883a 	add	r2,r2,r2
 4101be8:	9cff9004 	addi	r19,r19,-448
 4101bec:	1085883a 	add	r2,r2,r2
 4101bf0:	9885883a 	add	r2,r19,r2
 4101bf4:	14000117 	ldw	r16,4(r2)
 4101bf8:	10fffe04 	addi	r3,r2,-8
 4101bfc:	80c0d926 	beq	r16,r3,4101f64 <_malloc_r+0x5d0>
 4101c00:	80c00117 	ldw	r3,4(r16)
 4101c04:	81000317 	ldw	r4,12(r16)
 4101c08:	00bfff04 	movi	r2,-4
 4101c0c:	1884703a 	and	r2,r3,r2
 4101c10:	81400217 	ldw	r5,8(r16)
 4101c14:	8085883a 	add	r2,r16,r2
 4101c18:	10c00117 	ldw	r3,4(r2)
 4101c1c:	29000315 	stw	r4,12(r5)
 4101c20:	21400215 	stw	r5,8(r4)
 4101c24:	18c00054 	ori	r3,r3,1
 4101c28:	10c00115 	stw	r3,4(r2)
 4101c2c:	9009883a 	mov	r4,r18
 4101c30:	4104b280 	call	4104b28 <__malloc_unlock>
 4101c34:	80800204 	addi	r2,r16,8
 4101c38:	dfc00a17 	ldw	ra,40(sp)
 4101c3c:	df000917 	ldw	fp,36(sp)
 4101c40:	ddc00817 	ldw	r23,32(sp)
 4101c44:	dd800717 	ldw	r22,28(sp)
 4101c48:	dd400617 	ldw	r21,24(sp)
 4101c4c:	dd000517 	ldw	r20,20(sp)
 4101c50:	dcc00417 	ldw	r19,16(sp)
 4101c54:	dc800317 	ldw	r18,12(sp)
 4101c58:	dc400217 	ldw	r17,8(sp)
 4101c5c:	dc000117 	ldw	r16,4(sp)
 4101c60:	dec00b04 	addi	sp,sp,44
 4101c64:	f800283a 	ret
 4101c68:	00800304 	movi	r2,12
 4101c6c:	90800015 	stw	r2,0(r18)
 4101c70:	0005883a 	mov	r2,zero
 4101c74:	003ff006 	br	4101c38 <_malloc_r+0x2a4>
 4101c78:	01002004 	movi	r4,128
 4101c7c:	02001004 	movi	r8,64
 4101c80:	01c00fc4 	movi	r7,63
 4101c84:	003f6106 	br	4101a0c <_malloc_r+0x78>
 4101c88:	4009883a 	mov	r4,r8
 4101c8c:	003f7506 	br	4101a64 <_malloc_r+0xd0>
 4101c90:	81000317 	ldw	r4,12(r16)
 4101c94:	003fde06 	br	4101c10 <_malloc_r+0x27c>
 4101c98:	81c5883a 	add	r2,r16,r7
 4101c9c:	11400117 	ldw	r5,4(r2)
 4101ca0:	9009883a 	mov	r4,r18
 4101ca4:	29400054 	ori	r5,r5,1
 4101ca8:	11400115 	stw	r5,4(r2)
 4101cac:	4104b280 	call	4104b28 <__malloc_unlock>
 4101cb0:	80800204 	addi	r2,r16,8
 4101cb4:	003fe006 	br	4101c38 <_malloc_r+0x2a4>
 4101cb8:	9c000217 	ldw	r16,8(r19)
 4101cbc:	00bfff04 	movi	r2,-4
 4101cc0:	85800117 	ldw	r22,4(r16)
 4101cc4:	b0ac703a 	and	r22,r22,r2
 4101cc8:	b4400336 	bltu	r22,r17,4101cd8 <_malloc_r+0x344>
 4101ccc:	b445c83a 	sub	r2,r22,r17
 4101cd0:	00c003c4 	movi	r3,15
 4101cd4:	18805d16 	blt	r3,r2,4101e4c <_malloc_r+0x4b8>
 4101cd8:	05c10474 	movhi	r23,1041
 4101cdc:	00810474 	movhi	r2,1041
 4101ce0:	108c4204 	addi	r2,r2,12552
 4101ce4:	bdc53104 	addi	r23,r23,5316
 4101ce8:	15400017 	ldw	r21,0(r2)
 4101cec:	b8c00017 	ldw	r3,0(r23)
 4101cf0:	00bfffc4 	movi	r2,-1
 4101cf4:	858d883a 	add	r6,r16,r22
 4101cf8:	8d6b883a 	add	r21,r17,r21
 4101cfc:	1880ea26 	beq	r3,r2,41020a8 <_malloc_r+0x714>
 4101d00:	ad4403c4 	addi	r21,r21,4111
 4101d04:	00bc0004 	movi	r2,-4096
 4101d08:	a8aa703a 	and	r21,r21,r2
 4101d0c:	a80b883a 	mov	r5,r21
 4101d10:	9009883a 	mov	r4,r18
 4101d14:	d9800015 	stw	r6,0(sp)
 4101d18:	4102a6c0 	call	4102a6c <_sbrk_r>
 4101d1c:	1029883a 	mov	r20,r2
 4101d20:	00bfffc4 	movi	r2,-1
 4101d24:	d9800017 	ldw	r6,0(sp)
 4101d28:	a080e826 	beq	r20,r2,41020cc <_malloc_r+0x738>
 4101d2c:	a180a636 	bltu	r20,r6,4101fc8 <_malloc_r+0x634>
 4101d30:	07010474 	movhi	fp,1041
 4101d34:	e70c6704 	addi	fp,fp,12700
 4101d38:	e0800017 	ldw	r2,0(fp)
 4101d3c:	a887883a 	add	r3,r21,r2
 4101d40:	e0c00015 	stw	r3,0(fp)
 4101d44:	3500e626 	beq	r6,r20,41020e0 <_malloc_r+0x74c>
 4101d48:	b9000017 	ldw	r4,0(r23)
 4101d4c:	00bfffc4 	movi	r2,-1
 4101d50:	2080ee26 	beq	r4,r2,410210c <_malloc_r+0x778>
 4101d54:	a185c83a 	sub	r2,r20,r6
 4101d58:	10c5883a 	add	r2,r2,r3
 4101d5c:	e0800015 	stw	r2,0(fp)
 4101d60:	a0c001cc 	andi	r3,r20,7
 4101d64:	1800bc26 	beq	r3,zero,4102058 <_malloc_r+0x6c4>
 4101d68:	a0e9c83a 	sub	r20,r20,r3
 4101d6c:	00840204 	movi	r2,4104
 4101d70:	a5000204 	addi	r20,r20,8
 4101d74:	10c7c83a 	sub	r3,r2,r3
 4101d78:	a545883a 	add	r2,r20,r21
 4101d7c:	1083ffcc 	andi	r2,r2,4095
 4101d80:	18abc83a 	sub	r21,r3,r2
 4101d84:	a80b883a 	mov	r5,r21
 4101d88:	9009883a 	mov	r4,r18
 4101d8c:	4102a6c0 	call	4102a6c <_sbrk_r>
 4101d90:	00ffffc4 	movi	r3,-1
 4101d94:	10c0e126 	beq	r2,r3,410211c <_malloc_r+0x788>
 4101d98:	1505c83a 	sub	r2,r2,r20
 4101d9c:	1545883a 	add	r2,r2,r21
 4101da0:	10800054 	ori	r2,r2,1
 4101da4:	e0c00017 	ldw	r3,0(fp)
 4101da8:	9d000215 	stw	r20,8(r19)
 4101dac:	a0800115 	stw	r2,4(r20)
 4101db0:	a8c7883a 	add	r3,r21,r3
 4101db4:	e0c00015 	stw	r3,0(fp)
 4101db8:	84c00e26 	beq	r16,r19,4101df4 <_malloc_r+0x460>
 4101dbc:	018003c4 	movi	r6,15
 4101dc0:	3580a72e 	bgeu	r6,r22,4102060 <_malloc_r+0x6cc>
 4101dc4:	81400117 	ldw	r5,4(r16)
 4101dc8:	013ffe04 	movi	r4,-8
 4101dcc:	b0bffd04 	addi	r2,r22,-12
 4101dd0:	1104703a 	and	r2,r2,r4
 4101dd4:	2900004c 	andi	r4,r5,1
 4101dd8:	2088b03a 	or	r4,r4,r2
 4101ddc:	81000115 	stw	r4,4(r16)
 4101de0:	01400144 	movi	r5,5
 4101de4:	8089883a 	add	r4,r16,r2
 4101de8:	21400115 	stw	r5,4(r4)
 4101dec:	21400215 	stw	r5,8(r4)
 4101df0:	3080cd36 	bltu	r6,r2,4102128 <_malloc_r+0x794>
 4101df4:	00810474 	movhi	r2,1041
 4101df8:	108c4104 	addi	r2,r2,12548
 4101dfc:	11000017 	ldw	r4,0(r2)
 4101e00:	20c0012e 	bgeu	r4,r3,4101e08 <_malloc_r+0x474>
 4101e04:	10c00015 	stw	r3,0(r2)
 4101e08:	00810474 	movhi	r2,1041
 4101e0c:	108c4004 	addi	r2,r2,12544
 4101e10:	11000017 	ldw	r4,0(r2)
 4101e14:	9c000217 	ldw	r16,8(r19)
 4101e18:	20c0012e 	bgeu	r4,r3,4101e20 <_malloc_r+0x48c>
 4101e1c:	10c00015 	stw	r3,0(r2)
 4101e20:	80c00117 	ldw	r3,4(r16)
 4101e24:	00bfff04 	movi	r2,-4
 4101e28:	1886703a 	and	r3,r3,r2
 4101e2c:	1c45c83a 	sub	r2,r3,r17
 4101e30:	1c400236 	bltu	r3,r17,4101e3c <_malloc_r+0x4a8>
 4101e34:	00c003c4 	movi	r3,15
 4101e38:	18800416 	blt	r3,r2,4101e4c <_malloc_r+0x4b8>
 4101e3c:	9009883a 	mov	r4,r18
 4101e40:	4104b280 	call	4104b28 <__malloc_unlock>
 4101e44:	0005883a 	mov	r2,zero
 4101e48:	003f7b06 	br	4101c38 <_malloc_r+0x2a4>
 4101e4c:	88c00054 	ori	r3,r17,1
 4101e50:	80c00115 	stw	r3,4(r16)
 4101e54:	8463883a 	add	r17,r16,r17
 4101e58:	10800054 	ori	r2,r2,1
 4101e5c:	9c400215 	stw	r17,8(r19)
 4101e60:	88800115 	stw	r2,4(r17)
 4101e64:	9009883a 	mov	r4,r18
 4101e68:	4104b280 	call	4104b28 <__malloc_unlock>
 4101e6c:	80800204 	addi	r2,r16,8
 4101e70:	003f7106 	br	4101c38 <_malloc_r+0x2a4>
 4101e74:	00c00504 	movi	r3,20
 4101e78:	18804a2e 	bgeu	r3,r2,4101fa4 <_malloc_r+0x610>
 4101e7c:	00c01504 	movi	r3,84
 4101e80:	18806e36 	bltu	r3,r2,410203c <_malloc_r+0x6a8>
 4101e84:	8804d33a 	srli	r2,r17,12
 4101e88:	12001bc4 	addi	r8,r2,111
 4101e8c:	11c01b84 	addi	r7,r2,110
 4101e90:	4209883a 	add	r4,r8,r8
 4101e94:	003edd06 	br	4101a0c <_malloc_r+0x78>
 4101e98:	3804d27a 	srli	r2,r7,9
 4101e9c:	00c00104 	movi	r3,4
 4101ea0:	1880442e 	bgeu	r3,r2,4101fb4 <_malloc_r+0x620>
 4101ea4:	00c00504 	movi	r3,20
 4101ea8:	18808136 	bltu	r3,r2,41020b0 <_malloc_r+0x71c>
 4101eac:	11401704 	addi	r5,r2,92
 4101eb0:	10c016c4 	addi	r3,r2,91
 4101eb4:	294b883a 	add	r5,r5,r5
 4101eb8:	294b883a 	add	r5,r5,r5
 4101ebc:	294b883a 	add	r5,r5,r5
 4101ec0:	994b883a 	add	r5,r19,r5
 4101ec4:	28800017 	ldw	r2,0(r5)
 4101ec8:	01810474 	movhi	r6,1041
 4101ecc:	297ffe04 	addi	r5,r5,-8
 4101ed0:	31bf9004 	addi	r6,r6,-448
 4101ed4:	28806526 	beq	r5,r2,410206c <_malloc_r+0x6d8>
 4101ed8:	01bfff04 	movi	r6,-4
 4101edc:	10c00117 	ldw	r3,4(r2)
 4101ee0:	1986703a 	and	r3,r3,r6
 4101ee4:	38c0022e 	bgeu	r7,r3,4101ef0 <_malloc_r+0x55c>
 4101ee8:	10800217 	ldw	r2,8(r2)
 4101eec:	28bffb1e 	bne	r5,r2,4101edc <_malloc_r+0x548>
 4101ef0:	11400317 	ldw	r5,12(r2)
 4101ef4:	98c00117 	ldw	r3,4(r19)
 4101ef8:	81400315 	stw	r5,12(r16)
 4101efc:	80800215 	stw	r2,8(r16)
 4101f00:	2c000215 	stw	r16,8(r5)
 4101f04:	14000315 	stw	r16,12(r2)
 4101f08:	003ef806 	br	4101aec <_malloc_r+0x158>
 4101f0c:	88c00054 	ori	r3,r17,1
 4101f10:	80c00115 	stw	r3,4(r16)
 4101f14:	8463883a 	add	r17,r16,r17
 4101f18:	34400515 	stw	r17,20(r6)
 4101f1c:	34400415 	stw	r17,16(r6)
 4101f20:	10c00054 	ori	r3,r2,1
 4101f24:	8a000315 	stw	r8,12(r17)
 4101f28:	8a000215 	stw	r8,8(r17)
 4101f2c:	88c00115 	stw	r3,4(r17)
 4101f30:	88a3883a 	add	r17,r17,r2
 4101f34:	88800015 	stw	r2,0(r17)
 4101f38:	9009883a 	mov	r4,r18
 4101f3c:	4104b280 	call	4104b28 <__malloc_unlock>
 4101f40:	80800204 	addi	r2,r16,8
 4101f44:	003f3c06 	br	4101c38 <_malloc_r+0x2a4>
 4101f48:	30c00117 	ldw	r3,4(r6)
 4101f4c:	003ee706 	br	4101aec <_malloc_r+0x158>
 4101f50:	5ac00044 	addi	r11,r11,1
 4101f54:	588000cc 	andi	r2,r11,3
 4101f58:	31800204 	addi	r6,r6,8
 4101f5c:	103efd1e 	bne	r2,zero,4101b54 <_malloc_r+0x1c0>
 4101f60:	00002406 	br	4101ff4 <_malloc_r+0x660>
 4101f64:	14000317 	ldw	r16,12(r2)
 4101f68:	143f251e 	bne	r2,r16,4101c00 <_malloc_r+0x26c>
 4101f6c:	21000084 	addi	r4,r4,2
 4101f70:	003ebc06 	br	4101a64 <_malloc_r+0xd0>
 4101f74:	8085883a 	add	r2,r16,r2
 4101f78:	10c00117 	ldw	r3,4(r2)
 4101f7c:	81000317 	ldw	r4,12(r16)
 4101f80:	81400217 	ldw	r5,8(r16)
 4101f84:	18c00054 	ori	r3,r3,1
 4101f88:	10c00115 	stw	r3,4(r2)
 4101f8c:	29000315 	stw	r4,12(r5)
 4101f90:	21400215 	stw	r5,8(r4)
 4101f94:	9009883a 	mov	r4,r18
 4101f98:	4104b280 	call	4104b28 <__malloc_unlock>
 4101f9c:	80800204 	addi	r2,r16,8
 4101fa0:	003f2506 	br	4101c38 <_malloc_r+0x2a4>
 4101fa4:	12001704 	addi	r8,r2,92
 4101fa8:	11c016c4 	addi	r7,r2,91
 4101fac:	4209883a 	add	r4,r8,r8
 4101fb0:	003e9606 	br	4101a0c <_malloc_r+0x78>
 4101fb4:	3804d1ba 	srli	r2,r7,6
 4101fb8:	11400e44 	addi	r5,r2,57
 4101fbc:	10c00e04 	addi	r3,r2,56
 4101fc0:	294b883a 	add	r5,r5,r5
 4101fc4:	003fbc06 	br	4101eb8 <_malloc_r+0x524>
 4101fc8:	84ff5926 	beq	r16,r19,4101d30 <_malloc_r+0x39c>
 4101fcc:	00810474 	movhi	r2,1041
 4101fd0:	10bf9004 	addi	r2,r2,-448
 4101fd4:	14000217 	ldw	r16,8(r2)
 4101fd8:	00bfff04 	movi	r2,-4
 4101fdc:	80c00117 	ldw	r3,4(r16)
 4101fe0:	1886703a 	and	r3,r3,r2
 4101fe4:	003f9106 	br	4101e2c <_malloc_r+0x498>
 4101fe8:	60800217 	ldw	r2,8(r12)
 4101fec:	213fffc4 	addi	r4,r4,-1
 4101ff0:	1300651e 	bne	r2,r12,4102188 <_malloc_r+0x7f4>
 4101ff4:	208000cc 	andi	r2,r4,3
 4101ff8:	633ffe04 	addi	r12,r12,-8
 4101ffc:	103ffa1e 	bne	r2,zero,4101fe8 <_malloc_r+0x654>
 4102000:	98800117 	ldw	r2,4(r19)
 4102004:	0146303a 	nor	r3,zero,r5
 4102008:	1884703a 	and	r2,r3,r2
 410200c:	98800115 	stw	r2,4(r19)
 4102010:	294b883a 	add	r5,r5,r5
 4102014:	117f2836 	bltu	r2,r5,4101cb8 <_malloc_r+0x324>
 4102018:	283f2726 	beq	r5,zero,4101cb8 <_malloc_r+0x324>
 410201c:	2886703a 	and	r3,r5,r2
 4102020:	5809883a 	mov	r4,r11
 4102024:	183ec31e 	bne	r3,zero,4101b34 <_malloc_r+0x1a0>
 4102028:	294b883a 	add	r5,r5,r5
 410202c:	2886703a 	and	r3,r5,r2
 4102030:	21000104 	addi	r4,r4,4
 4102034:	183ffc26 	beq	r3,zero,4102028 <_malloc_r+0x694>
 4102038:	003ebe06 	br	4101b34 <_malloc_r+0x1a0>
 410203c:	00c05504 	movi	r3,340
 4102040:	18801236 	bltu	r3,r2,410208c <_malloc_r+0x6f8>
 4102044:	8804d3fa 	srli	r2,r17,15
 4102048:	12001e04 	addi	r8,r2,120
 410204c:	11c01dc4 	addi	r7,r2,119
 4102050:	4209883a 	add	r4,r8,r8
 4102054:	003e6d06 	br	4101a0c <_malloc_r+0x78>
 4102058:	00c40004 	movi	r3,4096
 410205c:	003f4606 	br	4101d78 <_malloc_r+0x3e4>
 4102060:	00800044 	movi	r2,1
 4102064:	a0800115 	stw	r2,4(r20)
 4102068:	003f7406 	br	4101e3c <_malloc_r+0x4a8>
 410206c:	1805d0ba 	srai	r2,r3,2
 4102070:	01c00044 	movi	r7,1
 4102074:	30c00117 	ldw	r3,4(r6)
 4102078:	388e983a 	sll	r7,r7,r2
 410207c:	2805883a 	mov	r2,r5
 4102080:	38c6b03a 	or	r3,r7,r3
 4102084:	30c00115 	stw	r3,4(r6)
 4102088:	003f9b06 	br	4101ef8 <_malloc_r+0x564>
 410208c:	00c15504 	movi	r3,1364
 4102090:	18801a36 	bltu	r3,r2,41020fc <_malloc_r+0x768>
 4102094:	8804d4ba 	srli	r2,r17,18
 4102098:	12001f44 	addi	r8,r2,125
 410209c:	11c01f04 	addi	r7,r2,124
 41020a0:	4209883a 	add	r4,r8,r8
 41020a4:	003e5906 	br	4101a0c <_malloc_r+0x78>
 41020a8:	ad400404 	addi	r21,r21,16
 41020ac:	003f1706 	br	4101d0c <_malloc_r+0x378>
 41020b0:	00c01504 	movi	r3,84
 41020b4:	18802336 	bltu	r3,r2,4102144 <_malloc_r+0x7b0>
 41020b8:	3804d33a 	srli	r2,r7,12
 41020bc:	11401bc4 	addi	r5,r2,111
 41020c0:	10c01b84 	addi	r3,r2,110
 41020c4:	294b883a 	add	r5,r5,r5
 41020c8:	003f7b06 	br	4101eb8 <_malloc_r+0x524>
 41020cc:	9c000217 	ldw	r16,8(r19)
 41020d0:	00bfff04 	movi	r2,-4
 41020d4:	80c00117 	ldw	r3,4(r16)
 41020d8:	1886703a 	and	r3,r3,r2
 41020dc:	003f5306 	br	4101e2c <_malloc_r+0x498>
 41020e0:	3083ffcc 	andi	r2,r6,4095
 41020e4:	103f181e 	bne	r2,zero,4101d48 <_malloc_r+0x3b4>
 41020e8:	99000217 	ldw	r4,8(r19)
 41020ec:	b545883a 	add	r2,r22,r21
 41020f0:	10800054 	ori	r2,r2,1
 41020f4:	20800115 	stw	r2,4(r4)
 41020f8:	003f3e06 	br	4101df4 <_malloc_r+0x460>
 41020fc:	01003f84 	movi	r4,254
 4102100:	02001fc4 	movi	r8,127
 4102104:	01c01f84 	movi	r7,126
 4102108:	003e4006 	br	4101a0c <_malloc_r+0x78>
 410210c:	00810474 	movhi	r2,1041
 4102110:	10853104 	addi	r2,r2,5316
 4102114:	15000015 	stw	r20,0(r2)
 4102118:	003f1106 	br	4101d60 <_malloc_r+0x3cc>
 410211c:	00800044 	movi	r2,1
 4102120:	002b883a 	mov	r21,zero
 4102124:	003f1f06 	br	4101da4 <_malloc_r+0x410>
 4102128:	81400204 	addi	r5,r16,8
 410212c:	9009883a 	mov	r4,r18
 4102130:	41032d40 	call	41032d4 <_free_r>
 4102134:	00810474 	movhi	r2,1041
 4102138:	108c6704 	addi	r2,r2,12700
 410213c:	10c00017 	ldw	r3,0(r2)
 4102140:	003f2c06 	br	4101df4 <_malloc_r+0x460>
 4102144:	00c05504 	movi	r3,340
 4102148:	18800536 	bltu	r3,r2,4102160 <_malloc_r+0x7cc>
 410214c:	3804d3fa 	srli	r2,r7,15
 4102150:	11401e04 	addi	r5,r2,120
 4102154:	10c01dc4 	addi	r3,r2,119
 4102158:	294b883a 	add	r5,r5,r5
 410215c:	003f5606 	br	4101eb8 <_malloc_r+0x524>
 4102160:	00c15504 	movi	r3,1364
 4102164:	18800536 	bltu	r3,r2,410217c <_malloc_r+0x7e8>
 4102168:	3804d4ba 	srli	r2,r7,18
 410216c:	11401f44 	addi	r5,r2,125
 4102170:	10c01f04 	addi	r3,r2,124
 4102174:	294b883a 	add	r5,r5,r5
 4102178:	003f4f06 	br	4101eb8 <_malloc_r+0x524>
 410217c:	01403f84 	movi	r5,254
 4102180:	00c01f84 	movi	r3,126
 4102184:	003f4c06 	br	4101eb8 <_malloc_r+0x524>
 4102188:	98800117 	ldw	r2,4(r19)
 410218c:	003fa006 	br	4102010 <_malloc_r+0x67c>
 4102190:	8808d0fa 	srli	r4,r17,3
 4102194:	20800044 	addi	r2,r4,1
 4102198:	1085883a 	add	r2,r2,r2
 410219c:	003e9006 	br	4101be0 <_malloc_r+0x24c>

041021a0 <memchr>:
 41021a0:	208000cc 	andi	r2,r4,3
 41021a4:	280f883a 	mov	r7,r5
 41021a8:	10003426 	beq	r2,zero,410227c <memchr+0xdc>
 41021ac:	30bfffc4 	addi	r2,r6,-1
 41021b0:	30001a26 	beq	r6,zero,410221c <memchr+0x7c>
 41021b4:	20c00003 	ldbu	r3,0(r4)
 41021b8:	29803fcc 	andi	r6,r5,255
 41021bc:	30c0051e 	bne	r6,r3,41021d4 <memchr+0x34>
 41021c0:	00001806 	br	4102224 <memchr+0x84>
 41021c4:	10001526 	beq	r2,zero,410221c <memchr+0x7c>
 41021c8:	20c00003 	ldbu	r3,0(r4)
 41021cc:	10bfffc4 	addi	r2,r2,-1
 41021d0:	30c01426 	beq	r6,r3,4102224 <memchr+0x84>
 41021d4:	21000044 	addi	r4,r4,1
 41021d8:	20c000cc 	andi	r3,r4,3
 41021dc:	183ff91e 	bne	r3,zero,41021c4 <memchr+0x24>
 41021e0:	020000c4 	movi	r8,3
 41021e4:	40801136 	bltu	r8,r2,410222c <memchr+0x8c>
 41021e8:	10000c26 	beq	r2,zero,410221c <memchr+0x7c>
 41021ec:	20c00003 	ldbu	r3,0(r4)
 41021f0:	29403fcc 	andi	r5,r5,255
 41021f4:	28c00b26 	beq	r5,r3,4102224 <memchr+0x84>
 41021f8:	20c00044 	addi	r3,r4,1
 41021fc:	39803fcc 	andi	r6,r7,255
 4102200:	2089883a 	add	r4,r4,r2
 4102204:	00000306 	br	4102214 <memchr+0x74>
 4102208:	18c00044 	addi	r3,r3,1
 410220c:	197fffc3 	ldbu	r5,-1(r3)
 4102210:	31400526 	beq	r6,r5,4102228 <memchr+0x88>
 4102214:	1805883a 	mov	r2,r3
 4102218:	20fffb1e 	bne	r4,r3,4102208 <memchr+0x68>
 410221c:	0005883a 	mov	r2,zero
 4102220:	f800283a 	ret
 4102224:	2005883a 	mov	r2,r4
 4102228:	f800283a 	ret
 410222c:	28c03fcc 	andi	r3,r5,255
 4102230:	1812923a 	slli	r9,r3,8
 4102234:	02ffbff4 	movhi	r11,65279
 4102238:	02a02074 	movhi	r10,32897
 410223c:	48d2b03a 	or	r9,r9,r3
 4102240:	4806943a 	slli	r3,r9,16
 4102244:	5affbfc4 	addi	r11,r11,-257
 4102248:	52a02004 	addi	r10,r10,-32640
 410224c:	48d2b03a 	or	r9,r9,r3
 4102250:	20c00017 	ldw	r3,0(r4)
 4102254:	48c6f03a 	xor	r3,r9,r3
 4102258:	1acd883a 	add	r6,r3,r11
 410225c:	00c6303a 	nor	r3,zero,r3
 4102260:	30c6703a 	and	r3,r6,r3
 4102264:	1a86703a 	and	r3,r3,r10
 4102268:	183fe01e 	bne	r3,zero,41021ec <memchr+0x4c>
 410226c:	10bfff04 	addi	r2,r2,-4
 4102270:	21000104 	addi	r4,r4,4
 4102274:	40bff636 	bltu	r8,r2,4102250 <memchr+0xb0>
 4102278:	003fdb06 	br	41021e8 <memchr+0x48>
 410227c:	3005883a 	mov	r2,r6
 4102280:	003fd706 	br	41021e0 <memchr+0x40>

04102284 <memmove>:
 4102284:	2005883a 	mov	r2,r4
 4102288:	29000b2e 	bgeu	r5,r4,41022b8 <memmove+0x34>
 410228c:	298f883a 	add	r7,r5,r6
 4102290:	21c0092e 	bgeu	r4,r7,41022b8 <memmove+0x34>
 4102294:	2187883a 	add	r3,r4,r6
 4102298:	198bc83a 	sub	r5,r3,r6
 410229c:	30004826 	beq	r6,zero,41023c0 <memmove+0x13c>
 41022a0:	39ffffc4 	addi	r7,r7,-1
 41022a4:	39000003 	ldbu	r4,0(r7)
 41022a8:	18ffffc4 	addi	r3,r3,-1
 41022ac:	19000005 	stb	r4,0(r3)
 41022b0:	28fffb1e 	bne	r5,r3,41022a0 <memmove+0x1c>
 41022b4:	f800283a 	ret
 41022b8:	00c003c4 	movi	r3,15
 41022bc:	1980412e 	bgeu	r3,r6,41023c4 <memmove+0x140>
 41022c0:	2886b03a 	or	r3,r5,r2
 41022c4:	18c000cc 	andi	r3,r3,3
 41022c8:	1800401e 	bne	r3,zero,41023cc <memmove+0x148>
 41022cc:	33fffc04 	addi	r15,r6,-16
 41022d0:	781ed13a 	srli	r15,r15,4
 41022d4:	28c00104 	addi	r3,r5,4
 41022d8:	13400104 	addi	r13,r2,4
 41022dc:	781c913a 	slli	r14,r15,4
 41022e0:	2b000204 	addi	r12,r5,8
 41022e4:	12c00204 	addi	r11,r2,8
 41022e8:	73800504 	addi	r14,r14,20
 41022ec:	2a800304 	addi	r10,r5,12
 41022f0:	12400304 	addi	r9,r2,12
 41022f4:	2b9d883a 	add	r14,r5,r14
 41022f8:	2811883a 	mov	r8,r5
 41022fc:	100f883a 	mov	r7,r2
 4102300:	41000017 	ldw	r4,0(r8)
 4102304:	39c00404 	addi	r7,r7,16
 4102308:	18c00404 	addi	r3,r3,16
 410230c:	393ffc15 	stw	r4,-16(r7)
 4102310:	193ffc17 	ldw	r4,-16(r3)
 4102314:	6b400404 	addi	r13,r13,16
 4102318:	5ac00404 	addi	r11,r11,16
 410231c:	693ffc15 	stw	r4,-16(r13)
 4102320:	61000017 	ldw	r4,0(r12)
 4102324:	4a400404 	addi	r9,r9,16
 4102328:	42000404 	addi	r8,r8,16
 410232c:	593ffc15 	stw	r4,-16(r11)
 4102330:	51000017 	ldw	r4,0(r10)
 4102334:	63000404 	addi	r12,r12,16
 4102338:	52800404 	addi	r10,r10,16
 410233c:	493ffc15 	stw	r4,-16(r9)
 4102340:	1bbfef1e 	bne	r3,r14,4102300 <memmove+0x7c>
 4102344:	79000044 	addi	r4,r15,1
 4102348:	2008913a 	slli	r4,r4,4
 410234c:	328003cc 	andi	r10,r6,15
 4102350:	02c000c4 	movi	r11,3
 4102354:	1107883a 	add	r3,r2,r4
 4102358:	290b883a 	add	r5,r5,r4
 410235c:	5a801e2e 	bgeu	r11,r10,41023d8 <memmove+0x154>
 4102360:	1813883a 	mov	r9,r3
 4102364:	2811883a 	mov	r8,r5
 4102368:	500f883a 	mov	r7,r10
 410236c:	41000017 	ldw	r4,0(r8)
 4102370:	4a400104 	addi	r9,r9,4
 4102374:	39ffff04 	addi	r7,r7,-4
 4102378:	493fff15 	stw	r4,-4(r9)
 410237c:	42000104 	addi	r8,r8,4
 4102380:	59fffa36 	bltu	r11,r7,410236c <memmove+0xe8>
 4102384:	513fff04 	addi	r4,r10,-4
 4102388:	2008d0ba 	srli	r4,r4,2
 410238c:	318000cc 	andi	r6,r6,3
 4102390:	21000044 	addi	r4,r4,1
 4102394:	2109883a 	add	r4,r4,r4
 4102398:	2109883a 	add	r4,r4,r4
 410239c:	1907883a 	add	r3,r3,r4
 41023a0:	290b883a 	add	r5,r5,r4
 41023a4:	30000b26 	beq	r6,zero,41023d4 <memmove+0x150>
 41023a8:	198d883a 	add	r6,r3,r6
 41023ac:	29c00003 	ldbu	r7,0(r5)
 41023b0:	18c00044 	addi	r3,r3,1
 41023b4:	29400044 	addi	r5,r5,1
 41023b8:	19ffffc5 	stb	r7,-1(r3)
 41023bc:	19bffb1e 	bne	r3,r6,41023ac <memmove+0x128>
 41023c0:	f800283a 	ret
 41023c4:	1007883a 	mov	r3,r2
 41023c8:	003ff606 	br	41023a4 <memmove+0x120>
 41023cc:	1007883a 	mov	r3,r2
 41023d0:	003ff506 	br	41023a8 <memmove+0x124>
 41023d4:	f800283a 	ret
 41023d8:	500d883a 	mov	r6,r10
 41023dc:	003ff106 	br	41023a4 <memmove+0x120>

041023e0 <memset>:
 41023e0:	20c000cc 	andi	r3,r4,3
 41023e4:	2005883a 	mov	r2,r4
 41023e8:	18004426 	beq	r3,zero,41024fc <memset+0x11c>
 41023ec:	31ffffc4 	addi	r7,r6,-1
 41023f0:	30004026 	beq	r6,zero,41024f4 <memset+0x114>
 41023f4:	2813883a 	mov	r9,r5
 41023f8:	200d883a 	mov	r6,r4
 41023fc:	2007883a 	mov	r3,r4
 4102400:	00000406 	br	4102414 <memset+0x34>
 4102404:	3a3fffc4 	addi	r8,r7,-1
 4102408:	31800044 	addi	r6,r6,1
 410240c:	38003926 	beq	r7,zero,41024f4 <memset+0x114>
 4102410:	400f883a 	mov	r7,r8
 4102414:	18c00044 	addi	r3,r3,1
 4102418:	32400005 	stb	r9,0(r6)
 410241c:	1a0000cc 	andi	r8,r3,3
 4102420:	403ff81e 	bne	r8,zero,4102404 <memset+0x24>
 4102424:	010000c4 	movi	r4,3
 4102428:	21c02d2e 	bgeu	r4,r7,41024e0 <memset+0x100>
 410242c:	29003fcc 	andi	r4,r5,255
 4102430:	200c923a 	slli	r6,r4,8
 4102434:	3108b03a 	or	r4,r6,r4
 4102438:	200c943a 	slli	r6,r4,16
 410243c:	218cb03a 	or	r6,r4,r6
 4102440:	010003c4 	movi	r4,15
 4102444:	21c0182e 	bgeu	r4,r7,41024a8 <memset+0xc8>
 4102448:	3b3ffc04 	addi	r12,r7,-16
 410244c:	6018d13a 	srli	r12,r12,4
 4102450:	1a000104 	addi	r8,r3,4
 4102454:	1ac00204 	addi	r11,r3,8
 4102458:	6008913a 	slli	r4,r12,4
 410245c:	1a800304 	addi	r10,r3,12
 4102460:	1813883a 	mov	r9,r3
 4102464:	21000504 	addi	r4,r4,20
 4102468:	1909883a 	add	r4,r3,r4
 410246c:	49800015 	stw	r6,0(r9)
 4102470:	41800015 	stw	r6,0(r8)
 4102474:	59800015 	stw	r6,0(r11)
 4102478:	51800015 	stw	r6,0(r10)
 410247c:	42000404 	addi	r8,r8,16
 4102480:	4a400404 	addi	r9,r9,16
 4102484:	5ac00404 	addi	r11,r11,16
 4102488:	52800404 	addi	r10,r10,16
 410248c:	413ff71e 	bne	r8,r4,410246c <memset+0x8c>
 4102490:	63000044 	addi	r12,r12,1
 4102494:	6018913a 	slli	r12,r12,4
 4102498:	39c003cc 	andi	r7,r7,15
 410249c:	010000c4 	movi	r4,3
 41024a0:	1b07883a 	add	r3,r3,r12
 41024a4:	21c00e2e 	bgeu	r4,r7,41024e0 <memset+0x100>
 41024a8:	1813883a 	mov	r9,r3
 41024ac:	3811883a 	mov	r8,r7
 41024b0:	010000c4 	movi	r4,3
 41024b4:	49800015 	stw	r6,0(r9)
 41024b8:	423fff04 	addi	r8,r8,-4
 41024bc:	4a400104 	addi	r9,r9,4
 41024c0:	223ffc36 	bltu	r4,r8,41024b4 <memset+0xd4>
 41024c4:	393fff04 	addi	r4,r7,-4
 41024c8:	2008d0ba 	srli	r4,r4,2
 41024cc:	39c000cc 	andi	r7,r7,3
 41024d0:	21000044 	addi	r4,r4,1
 41024d4:	2109883a 	add	r4,r4,r4
 41024d8:	2109883a 	add	r4,r4,r4
 41024dc:	1907883a 	add	r3,r3,r4
 41024e0:	38000526 	beq	r7,zero,41024f8 <memset+0x118>
 41024e4:	19cf883a 	add	r7,r3,r7
 41024e8:	19400005 	stb	r5,0(r3)
 41024ec:	18c00044 	addi	r3,r3,1
 41024f0:	38fffd1e 	bne	r7,r3,41024e8 <memset+0x108>
 41024f4:	f800283a 	ret
 41024f8:	f800283a 	ret
 41024fc:	2007883a 	mov	r3,r4
 4102500:	300f883a 	mov	r7,r6
 4102504:	003fc706 	br	4102424 <memset+0x44>

04102508 <_realloc_r>:
 4102508:	defff604 	addi	sp,sp,-40
 410250c:	dc800215 	stw	r18,8(sp)
 4102510:	dfc00915 	stw	ra,36(sp)
 4102514:	df000815 	stw	fp,32(sp)
 4102518:	ddc00715 	stw	r23,28(sp)
 410251c:	dd800615 	stw	r22,24(sp)
 4102520:	dd400515 	stw	r21,20(sp)
 4102524:	dd000415 	stw	r20,16(sp)
 4102528:	dcc00315 	stw	r19,12(sp)
 410252c:	dc400115 	stw	r17,4(sp)
 4102530:	dc000015 	stw	r16,0(sp)
 4102534:	3025883a 	mov	r18,r6
 4102538:	2800b726 	beq	r5,zero,4102818 <_realloc_r+0x310>
 410253c:	282b883a 	mov	r21,r5
 4102540:	2029883a 	mov	r20,r4
 4102544:	4104a080 	call	4104a08 <__malloc_lock>
 4102548:	a8bfff17 	ldw	r2,-4(r21)
 410254c:	043fff04 	movi	r16,-4
 4102550:	90c002c4 	addi	r3,r18,11
 4102554:	01000584 	movi	r4,22
 4102558:	acfffe04 	addi	r19,r21,-8
 410255c:	1420703a 	and	r16,r2,r16
 4102560:	20c0332e 	bgeu	r4,r3,4102630 <_realloc_r+0x128>
 4102564:	047ffe04 	movi	r17,-8
 4102568:	1c62703a 	and	r17,r3,r17
 410256c:	8807883a 	mov	r3,r17
 4102570:	88005816 	blt	r17,zero,41026d4 <_realloc_r+0x1cc>
 4102574:	8c805736 	bltu	r17,r18,41026d4 <_realloc_r+0x1cc>
 4102578:	80c0300e 	bge	r16,r3,410263c <_realloc_r+0x134>
 410257c:	07010474 	movhi	fp,1041
 4102580:	e73f9004 	addi	fp,fp,-448
 4102584:	e1c00217 	ldw	r7,8(fp)
 4102588:	9c09883a 	add	r4,r19,r16
 410258c:	22000117 	ldw	r8,4(r4)
 4102590:	21c06326 	beq	r4,r7,4102720 <_realloc_r+0x218>
 4102594:	017fff84 	movi	r5,-2
 4102598:	414a703a 	and	r5,r8,r5
 410259c:	214b883a 	add	r5,r4,r5
 41025a0:	29800117 	ldw	r6,4(r5)
 41025a4:	3180004c 	andi	r6,r6,1
 41025a8:	30003f26 	beq	r6,zero,41026a8 <_realloc_r+0x1a0>
 41025ac:	1080004c 	andi	r2,r2,1
 41025b0:	10008326 	beq	r2,zero,41027c0 <_realloc_r+0x2b8>
 41025b4:	900b883a 	mov	r5,r18
 41025b8:	a009883a 	mov	r4,r20
 41025bc:	41019940 	call	4101994 <_malloc_r>
 41025c0:	1025883a 	mov	r18,r2
 41025c4:	10011e26 	beq	r2,zero,4102a40 <_realloc_r+0x538>
 41025c8:	a93fff17 	ldw	r4,-4(r21)
 41025cc:	10fffe04 	addi	r3,r2,-8
 41025d0:	00bfff84 	movi	r2,-2
 41025d4:	2084703a 	and	r2,r4,r2
 41025d8:	9885883a 	add	r2,r19,r2
 41025dc:	1880ee26 	beq	r3,r2,4102998 <_realloc_r+0x490>
 41025e0:	81bfff04 	addi	r6,r16,-4
 41025e4:	00800904 	movi	r2,36
 41025e8:	1180b836 	bltu	r2,r6,41028cc <_realloc_r+0x3c4>
 41025ec:	00c004c4 	movi	r3,19
 41025f0:	19809636 	bltu	r3,r6,410284c <_realloc_r+0x344>
 41025f4:	9005883a 	mov	r2,r18
 41025f8:	a807883a 	mov	r3,r21
 41025fc:	19000017 	ldw	r4,0(r3)
 4102600:	11000015 	stw	r4,0(r2)
 4102604:	19000117 	ldw	r4,4(r3)
 4102608:	11000115 	stw	r4,4(r2)
 410260c:	18c00217 	ldw	r3,8(r3)
 4102610:	10c00215 	stw	r3,8(r2)
 4102614:	a80b883a 	mov	r5,r21
 4102618:	a009883a 	mov	r4,r20
 410261c:	41032d40 	call	41032d4 <_free_r>
 4102620:	a009883a 	mov	r4,r20
 4102624:	4104b280 	call	4104b28 <__malloc_unlock>
 4102628:	9005883a 	mov	r2,r18
 410262c:	00001206 	br	4102678 <_realloc_r+0x170>
 4102630:	00c00404 	movi	r3,16
 4102634:	1823883a 	mov	r17,r3
 4102638:	003fce06 	br	4102574 <_realloc_r+0x6c>
 410263c:	a825883a 	mov	r18,r21
 4102640:	8445c83a 	sub	r2,r16,r17
 4102644:	00c003c4 	movi	r3,15
 4102648:	18802636 	bltu	r3,r2,41026e4 <_realloc_r+0x1dc>
 410264c:	99800117 	ldw	r6,4(r19)
 4102650:	9c07883a 	add	r3,r19,r16
 4102654:	3180004c 	andi	r6,r6,1
 4102658:	3420b03a 	or	r16,r6,r16
 410265c:	9c000115 	stw	r16,4(r19)
 4102660:	18800117 	ldw	r2,4(r3)
 4102664:	10800054 	ori	r2,r2,1
 4102668:	18800115 	stw	r2,4(r3)
 410266c:	a009883a 	mov	r4,r20
 4102670:	4104b280 	call	4104b28 <__malloc_unlock>
 4102674:	9005883a 	mov	r2,r18
 4102678:	dfc00917 	ldw	ra,36(sp)
 410267c:	df000817 	ldw	fp,32(sp)
 4102680:	ddc00717 	ldw	r23,28(sp)
 4102684:	dd800617 	ldw	r22,24(sp)
 4102688:	dd400517 	ldw	r21,20(sp)
 410268c:	dd000417 	ldw	r20,16(sp)
 4102690:	dcc00317 	ldw	r19,12(sp)
 4102694:	dc800217 	ldw	r18,8(sp)
 4102698:	dc400117 	ldw	r17,4(sp)
 410269c:	dc000017 	ldw	r16,0(sp)
 41026a0:	dec00a04 	addi	sp,sp,40
 41026a4:	f800283a 	ret
 41026a8:	017fff04 	movi	r5,-4
 41026ac:	414a703a 	and	r5,r8,r5
 41026b0:	814d883a 	add	r6,r16,r5
 41026b4:	30c01f16 	blt	r6,r3,4102734 <_realloc_r+0x22c>
 41026b8:	20800317 	ldw	r2,12(r4)
 41026bc:	20c00217 	ldw	r3,8(r4)
 41026c0:	a825883a 	mov	r18,r21
 41026c4:	3021883a 	mov	r16,r6
 41026c8:	18800315 	stw	r2,12(r3)
 41026cc:	10c00215 	stw	r3,8(r2)
 41026d0:	003fdb06 	br	4102640 <_realloc_r+0x138>
 41026d4:	00800304 	movi	r2,12
 41026d8:	a0800015 	stw	r2,0(r20)
 41026dc:	0005883a 	mov	r2,zero
 41026e0:	003fe506 	br	4102678 <_realloc_r+0x170>
 41026e4:	98c00117 	ldw	r3,4(r19)
 41026e8:	9c4b883a 	add	r5,r19,r17
 41026ec:	11000054 	ori	r4,r2,1
 41026f0:	18c0004c 	andi	r3,r3,1
 41026f4:	1c62b03a 	or	r17,r3,r17
 41026f8:	9c400115 	stw	r17,4(r19)
 41026fc:	29000115 	stw	r4,4(r5)
 4102700:	2885883a 	add	r2,r5,r2
 4102704:	10c00117 	ldw	r3,4(r2)
 4102708:	29400204 	addi	r5,r5,8
 410270c:	a009883a 	mov	r4,r20
 4102710:	18c00054 	ori	r3,r3,1
 4102714:	10c00115 	stw	r3,4(r2)
 4102718:	41032d40 	call	41032d4 <_free_r>
 410271c:	003fd306 	br	410266c <_realloc_r+0x164>
 4102720:	017fff04 	movi	r5,-4
 4102724:	414a703a 	and	r5,r8,r5
 4102728:	89800404 	addi	r6,r17,16
 410272c:	8151883a 	add	r8,r16,r5
 4102730:	4180590e 	bge	r8,r6,4102898 <_realloc_r+0x390>
 4102734:	1080004c 	andi	r2,r2,1
 4102738:	103f9e1e 	bne	r2,zero,41025b4 <_realloc_r+0xac>
 410273c:	adbffe17 	ldw	r22,-8(r21)
 4102740:	00bfff04 	movi	r2,-4
 4102744:	9dadc83a 	sub	r22,r19,r22
 4102748:	b1800117 	ldw	r6,4(r22)
 410274c:	3084703a 	and	r2,r6,r2
 4102750:	20002026 	beq	r4,zero,41027d4 <_realloc_r+0x2cc>
 4102754:	80af883a 	add	r23,r16,r2
 4102758:	b96f883a 	add	r23,r23,r5
 410275c:	21c05f26 	beq	r4,r7,41028dc <_realloc_r+0x3d4>
 4102760:	b8c01c16 	blt	r23,r3,41027d4 <_realloc_r+0x2cc>
 4102764:	20800317 	ldw	r2,12(r4)
 4102768:	20c00217 	ldw	r3,8(r4)
 410276c:	81bfff04 	addi	r6,r16,-4
 4102770:	01000904 	movi	r4,36
 4102774:	18800315 	stw	r2,12(r3)
 4102778:	10c00215 	stw	r3,8(r2)
 410277c:	b0c00217 	ldw	r3,8(r22)
 4102780:	b0800317 	ldw	r2,12(r22)
 4102784:	b4800204 	addi	r18,r22,8
 4102788:	18800315 	stw	r2,12(r3)
 410278c:	10c00215 	stw	r3,8(r2)
 4102790:	21801b36 	bltu	r4,r6,4102800 <_realloc_r+0x2f8>
 4102794:	008004c4 	movi	r2,19
 4102798:	1180352e 	bgeu	r2,r6,4102870 <_realloc_r+0x368>
 410279c:	a8800017 	ldw	r2,0(r21)
 41027a0:	b0800215 	stw	r2,8(r22)
 41027a4:	a8800117 	ldw	r2,4(r21)
 41027a8:	b0800315 	stw	r2,12(r22)
 41027ac:	008006c4 	movi	r2,27
 41027b0:	11807f36 	bltu	r2,r6,41029b0 <_realloc_r+0x4a8>
 41027b4:	b0800404 	addi	r2,r22,16
 41027b8:	ad400204 	addi	r21,r21,8
 41027bc:	00002d06 	br	4102874 <_realloc_r+0x36c>
 41027c0:	adbffe17 	ldw	r22,-8(r21)
 41027c4:	00bfff04 	movi	r2,-4
 41027c8:	9dadc83a 	sub	r22,r19,r22
 41027cc:	b1000117 	ldw	r4,4(r22)
 41027d0:	2084703a 	and	r2,r4,r2
 41027d4:	b03f7726 	beq	r22,zero,41025b4 <_realloc_r+0xac>
 41027d8:	80af883a 	add	r23,r16,r2
 41027dc:	b8ff7516 	blt	r23,r3,41025b4 <_realloc_r+0xac>
 41027e0:	b0800317 	ldw	r2,12(r22)
 41027e4:	b0c00217 	ldw	r3,8(r22)
 41027e8:	81bfff04 	addi	r6,r16,-4
 41027ec:	01000904 	movi	r4,36
 41027f0:	18800315 	stw	r2,12(r3)
 41027f4:	10c00215 	stw	r3,8(r2)
 41027f8:	b4800204 	addi	r18,r22,8
 41027fc:	21bfe52e 	bgeu	r4,r6,4102794 <_realloc_r+0x28c>
 4102800:	a80b883a 	mov	r5,r21
 4102804:	9009883a 	mov	r4,r18
 4102808:	41022840 	call	4102284 <memmove>
 410280c:	b821883a 	mov	r16,r23
 4102810:	b027883a 	mov	r19,r22
 4102814:	003f8a06 	br	4102640 <_realloc_r+0x138>
 4102818:	300b883a 	mov	r5,r6
 410281c:	dfc00917 	ldw	ra,36(sp)
 4102820:	df000817 	ldw	fp,32(sp)
 4102824:	ddc00717 	ldw	r23,28(sp)
 4102828:	dd800617 	ldw	r22,24(sp)
 410282c:	dd400517 	ldw	r21,20(sp)
 4102830:	dd000417 	ldw	r20,16(sp)
 4102834:	dcc00317 	ldw	r19,12(sp)
 4102838:	dc800217 	ldw	r18,8(sp)
 410283c:	dc400117 	ldw	r17,4(sp)
 4102840:	dc000017 	ldw	r16,0(sp)
 4102844:	dec00a04 	addi	sp,sp,40
 4102848:	41019941 	jmpi	4101994 <_malloc_r>
 410284c:	a8c00017 	ldw	r3,0(r21)
 4102850:	90c00015 	stw	r3,0(r18)
 4102854:	a8c00117 	ldw	r3,4(r21)
 4102858:	90c00115 	stw	r3,4(r18)
 410285c:	00c006c4 	movi	r3,27
 4102860:	19804536 	bltu	r3,r6,4102978 <_realloc_r+0x470>
 4102864:	90800204 	addi	r2,r18,8
 4102868:	a8c00204 	addi	r3,r21,8
 410286c:	003f6306 	br	41025fc <_realloc_r+0xf4>
 4102870:	9005883a 	mov	r2,r18
 4102874:	a8c00017 	ldw	r3,0(r21)
 4102878:	b821883a 	mov	r16,r23
 410287c:	b027883a 	mov	r19,r22
 4102880:	10c00015 	stw	r3,0(r2)
 4102884:	a8c00117 	ldw	r3,4(r21)
 4102888:	10c00115 	stw	r3,4(r2)
 410288c:	a8c00217 	ldw	r3,8(r21)
 4102890:	10c00215 	stw	r3,8(r2)
 4102894:	003f6a06 	br	4102640 <_realloc_r+0x138>
 4102898:	9c67883a 	add	r19,r19,r17
 410289c:	4445c83a 	sub	r2,r8,r17
 41028a0:	e4c00215 	stw	r19,8(fp)
 41028a4:	10800054 	ori	r2,r2,1
 41028a8:	98800115 	stw	r2,4(r19)
 41028ac:	a8bfff17 	ldw	r2,-4(r21)
 41028b0:	a009883a 	mov	r4,r20
 41028b4:	1080004c 	andi	r2,r2,1
 41028b8:	1462b03a 	or	r17,r2,r17
 41028bc:	ac7fff15 	stw	r17,-4(r21)
 41028c0:	4104b280 	call	4104b28 <__malloc_unlock>
 41028c4:	a805883a 	mov	r2,r21
 41028c8:	003f6b06 	br	4102678 <_realloc_r+0x170>
 41028cc:	a80b883a 	mov	r5,r21
 41028d0:	9009883a 	mov	r4,r18
 41028d4:	41022840 	call	4102284 <memmove>
 41028d8:	003f4e06 	br	4102614 <_realloc_r+0x10c>
 41028dc:	89000404 	addi	r4,r17,16
 41028e0:	b93fbc16 	blt	r23,r4,41027d4 <_realloc_r+0x2cc>
 41028e4:	b0800317 	ldw	r2,12(r22)
 41028e8:	b0c00217 	ldw	r3,8(r22)
 41028ec:	81bfff04 	addi	r6,r16,-4
 41028f0:	01000904 	movi	r4,36
 41028f4:	18800315 	stw	r2,12(r3)
 41028f8:	10c00215 	stw	r3,8(r2)
 41028fc:	b4800204 	addi	r18,r22,8
 4102900:	21804336 	bltu	r4,r6,4102a10 <_realloc_r+0x508>
 4102904:	008004c4 	movi	r2,19
 4102908:	11803f2e 	bgeu	r2,r6,4102a08 <_realloc_r+0x500>
 410290c:	a8800017 	ldw	r2,0(r21)
 4102910:	b0800215 	stw	r2,8(r22)
 4102914:	a8800117 	ldw	r2,4(r21)
 4102918:	b0800315 	stw	r2,12(r22)
 410291c:	008006c4 	movi	r2,27
 4102920:	11803f36 	bltu	r2,r6,4102a20 <_realloc_r+0x518>
 4102924:	b0800404 	addi	r2,r22,16
 4102928:	ad400204 	addi	r21,r21,8
 410292c:	a8c00017 	ldw	r3,0(r21)
 4102930:	10c00015 	stw	r3,0(r2)
 4102934:	a8c00117 	ldw	r3,4(r21)
 4102938:	10c00115 	stw	r3,4(r2)
 410293c:	a8c00217 	ldw	r3,8(r21)
 4102940:	10c00215 	stw	r3,8(r2)
 4102944:	b447883a 	add	r3,r22,r17
 4102948:	bc45c83a 	sub	r2,r23,r17
 410294c:	e0c00215 	stw	r3,8(fp)
 4102950:	10800054 	ori	r2,r2,1
 4102954:	18800115 	stw	r2,4(r3)
 4102958:	b0800117 	ldw	r2,4(r22)
 410295c:	a009883a 	mov	r4,r20
 4102960:	1080004c 	andi	r2,r2,1
 4102964:	1462b03a 	or	r17,r2,r17
 4102968:	b4400115 	stw	r17,4(r22)
 410296c:	4104b280 	call	4104b28 <__malloc_unlock>
 4102970:	9005883a 	mov	r2,r18
 4102974:	003f4006 	br	4102678 <_realloc_r+0x170>
 4102978:	a8c00217 	ldw	r3,8(r21)
 410297c:	90c00215 	stw	r3,8(r18)
 4102980:	a8c00317 	ldw	r3,12(r21)
 4102984:	90c00315 	stw	r3,12(r18)
 4102988:	30801126 	beq	r6,r2,41029d0 <_realloc_r+0x4c8>
 410298c:	90800404 	addi	r2,r18,16
 4102990:	a8c00404 	addi	r3,r21,16
 4102994:	003f1906 	br	41025fc <_realloc_r+0xf4>
 4102998:	90ffff17 	ldw	r3,-4(r18)
 410299c:	00bfff04 	movi	r2,-4
 41029a0:	a825883a 	mov	r18,r21
 41029a4:	1884703a 	and	r2,r3,r2
 41029a8:	80a1883a 	add	r16,r16,r2
 41029ac:	003f2406 	br	4102640 <_realloc_r+0x138>
 41029b0:	a8800217 	ldw	r2,8(r21)
 41029b4:	b0800415 	stw	r2,16(r22)
 41029b8:	a8800317 	ldw	r2,12(r21)
 41029bc:	b0800515 	stw	r2,20(r22)
 41029c0:	31000a26 	beq	r6,r4,41029ec <_realloc_r+0x4e4>
 41029c4:	b0800604 	addi	r2,r22,24
 41029c8:	ad400404 	addi	r21,r21,16
 41029cc:	003fa906 	br	4102874 <_realloc_r+0x36c>
 41029d0:	a9000417 	ldw	r4,16(r21)
 41029d4:	90800604 	addi	r2,r18,24
 41029d8:	a8c00604 	addi	r3,r21,24
 41029dc:	91000415 	stw	r4,16(r18)
 41029e0:	a9000517 	ldw	r4,20(r21)
 41029e4:	91000515 	stw	r4,20(r18)
 41029e8:	003f0406 	br	41025fc <_realloc_r+0xf4>
 41029ec:	a8c00417 	ldw	r3,16(r21)
 41029f0:	ad400604 	addi	r21,r21,24
 41029f4:	b0800804 	addi	r2,r22,32
 41029f8:	b0c00615 	stw	r3,24(r22)
 41029fc:	a8ffff17 	ldw	r3,-4(r21)
 4102a00:	b0c00715 	stw	r3,28(r22)
 4102a04:	003f9b06 	br	4102874 <_realloc_r+0x36c>
 4102a08:	9005883a 	mov	r2,r18
 4102a0c:	003fc706 	br	410292c <_realloc_r+0x424>
 4102a10:	a80b883a 	mov	r5,r21
 4102a14:	9009883a 	mov	r4,r18
 4102a18:	41022840 	call	4102284 <memmove>
 4102a1c:	003fc906 	br	4102944 <_realloc_r+0x43c>
 4102a20:	a8800217 	ldw	r2,8(r21)
 4102a24:	b0800415 	stw	r2,16(r22)
 4102a28:	a8800317 	ldw	r2,12(r21)
 4102a2c:	b0800515 	stw	r2,20(r22)
 4102a30:	31000726 	beq	r6,r4,4102a50 <_realloc_r+0x548>
 4102a34:	b0800604 	addi	r2,r22,24
 4102a38:	ad400404 	addi	r21,r21,16
 4102a3c:	003fbb06 	br	410292c <_realloc_r+0x424>
 4102a40:	a009883a 	mov	r4,r20
 4102a44:	4104b280 	call	4104b28 <__malloc_unlock>
 4102a48:	0005883a 	mov	r2,zero
 4102a4c:	003f0a06 	br	4102678 <_realloc_r+0x170>
 4102a50:	a8c00417 	ldw	r3,16(r21)
 4102a54:	ad400604 	addi	r21,r21,24
 4102a58:	b0800804 	addi	r2,r22,32
 4102a5c:	b0c00615 	stw	r3,24(r22)
 4102a60:	a8ffff17 	ldw	r3,-4(r21)
 4102a64:	b0c00715 	stw	r3,28(r22)
 4102a68:	003fb006 	br	410292c <_realloc_r+0x424>

04102a6c <_sbrk_r>:
 4102a6c:	defffd04 	addi	sp,sp,-12
 4102a70:	dc000015 	stw	r16,0(sp)
 4102a74:	04010474 	movhi	r16,1041
 4102a78:	dc400115 	stw	r17,4(sp)
 4102a7c:	840c3f04 	addi	r16,r16,12540
 4102a80:	2023883a 	mov	r17,r4
 4102a84:	2809883a 	mov	r4,r5
 4102a88:	dfc00215 	stw	ra,8(sp)
 4102a8c:	80000015 	stw	zero,0(r16)
 4102a90:	410455c0 	call	410455c <sbrk>
 4102a94:	00ffffc4 	movi	r3,-1
 4102a98:	10c00526 	beq	r2,r3,4102ab0 <_sbrk_r+0x44>
 4102a9c:	dfc00217 	ldw	ra,8(sp)
 4102aa0:	dc400117 	ldw	r17,4(sp)
 4102aa4:	dc000017 	ldw	r16,0(sp)
 4102aa8:	dec00304 	addi	sp,sp,12
 4102aac:	f800283a 	ret
 4102ab0:	80c00017 	ldw	r3,0(r16)
 4102ab4:	183ff926 	beq	r3,zero,4102a9c <_sbrk_r+0x30>
 4102ab8:	88c00015 	stw	r3,0(r17)
 4102abc:	003ff706 	br	4102a9c <_sbrk_r+0x30>

04102ac0 <__sread>:
 4102ac0:	defffe04 	addi	sp,sp,-8
 4102ac4:	dc000015 	stw	r16,0(sp)
 4102ac8:	2821883a 	mov	r16,r5
 4102acc:	2940038f 	ldh	r5,14(r5)
 4102ad0:	dfc00115 	stw	ra,4(sp)
 4102ad4:	41038000 	call	4103800 <_read_r>
 4102ad8:	10000716 	blt	r2,zero,4102af8 <__sread+0x38>
 4102adc:	80c01417 	ldw	r3,80(r16)
 4102ae0:	1887883a 	add	r3,r3,r2
 4102ae4:	80c01415 	stw	r3,80(r16)
 4102ae8:	dfc00117 	ldw	ra,4(sp)
 4102aec:	dc000017 	ldw	r16,0(sp)
 4102af0:	dec00204 	addi	sp,sp,8
 4102af4:	f800283a 	ret
 4102af8:	80c0030b 	ldhu	r3,12(r16)
 4102afc:	18fbffcc 	andi	r3,r3,61439
 4102b00:	80c0030d 	sth	r3,12(r16)
 4102b04:	dfc00117 	ldw	ra,4(sp)
 4102b08:	dc000017 	ldw	r16,0(sp)
 4102b0c:	dec00204 	addi	sp,sp,8
 4102b10:	f800283a 	ret

04102b14 <__seofread>:
 4102b14:	0005883a 	mov	r2,zero
 4102b18:	f800283a 	ret

04102b1c <__swrite>:
 4102b1c:	2880030b 	ldhu	r2,12(r5)
 4102b20:	defffb04 	addi	sp,sp,-20
 4102b24:	dcc00315 	stw	r19,12(sp)
 4102b28:	dc800215 	stw	r18,8(sp)
 4102b2c:	dc400115 	stw	r17,4(sp)
 4102b30:	dc000015 	stw	r16,0(sp)
 4102b34:	dfc00415 	stw	ra,16(sp)
 4102b38:	10c0400c 	andi	r3,r2,256
 4102b3c:	2821883a 	mov	r16,r5
 4102b40:	2023883a 	mov	r17,r4
 4102b44:	3025883a 	mov	r18,r6
 4102b48:	3827883a 	mov	r19,r7
 4102b4c:	18000526 	beq	r3,zero,4102b64 <__swrite+0x48>
 4102b50:	2940038f 	ldh	r5,14(r5)
 4102b54:	01c00084 	movi	r7,2
 4102b58:	000d883a 	mov	r6,zero
 4102b5c:	41035e40 	call	41035e4 <_lseek_r>
 4102b60:	8080030b 	ldhu	r2,12(r16)
 4102b64:	8140038f 	ldh	r5,14(r16)
 4102b68:	10bbffcc 	andi	r2,r2,61439
 4102b6c:	980f883a 	mov	r7,r19
 4102b70:	900d883a 	mov	r6,r18
 4102b74:	8809883a 	mov	r4,r17
 4102b78:	8080030d 	sth	r2,12(r16)
 4102b7c:	dfc00417 	ldw	ra,16(sp)
 4102b80:	dcc00317 	ldw	r19,12(sp)
 4102b84:	dc800217 	ldw	r18,8(sp)
 4102b88:	dc400117 	ldw	r17,4(sp)
 4102b8c:	dc000017 	ldw	r16,0(sp)
 4102b90:	dec00504 	addi	sp,sp,20
 4102b94:	4102bfc1 	jmpi	4102bfc <_write_r>

04102b98 <__sseek>:
 4102b98:	defffe04 	addi	sp,sp,-8
 4102b9c:	dc000015 	stw	r16,0(sp)
 4102ba0:	2821883a 	mov	r16,r5
 4102ba4:	2940038f 	ldh	r5,14(r5)
 4102ba8:	dfc00115 	stw	ra,4(sp)
 4102bac:	41035e40 	call	41035e4 <_lseek_r>
 4102bb0:	00ffffc4 	movi	r3,-1
 4102bb4:	10c00826 	beq	r2,r3,4102bd8 <__sseek+0x40>
 4102bb8:	80c0030b 	ldhu	r3,12(r16)
 4102bbc:	80801415 	stw	r2,80(r16)
 4102bc0:	18c40014 	ori	r3,r3,4096
 4102bc4:	80c0030d 	sth	r3,12(r16)
 4102bc8:	dfc00117 	ldw	ra,4(sp)
 4102bcc:	dc000017 	ldw	r16,0(sp)
 4102bd0:	dec00204 	addi	sp,sp,8
 4102bd4:	f800283a 	ret
 4102bd8:	80c0030b 	ldhu	r3,12(r16)
 4102bdc:	18fbffcc 	andi	r3,r3,61439
 4102be0:	80c0030d 	sth	r3,12(r16)
 4102be4:	dfc00117 	ldw	ra,4(sp)
 4102be8:	dc000017 	ldw	r16,0(sp)
 4102bec:	dec00204 	addi	sp,sp,8
 4102bf0:	f800283a 	ret

04102bf4 <__sclose>:
 4102bf4:	2940038f 	ldh	r5,14(r5)
 4102bf8:	4102db01 	jmpi	4102db0 <_close_r>

04102bfc <_write_r>:
 4102bfc:	defffd04 	addi	sp,sp,-12
 4102c00:	2805883a 	mov	r2,r5
 4102c04:	dc000015 	stw	r16,0(sp)
 4102c08:	04010474 	movhi	r16,1041
 4102c0c:	dc400115 	stw	r17,4(sp)
 4102c10:	300b883a 	mov	r5,r6
 4102c14:	840c3f04 	addi	r16,r16,12540
 4102c18:	2023883a 	mov	r17,r4
 4102c1c:	380d883a 	mov	r6,r7
 4102c20:	1009883a 	mov	r4,r2
 4102c24:	dfc00215 	stw	ra,8(sp)
 4102c28:	80000015 	stw	zero,0(r16)
 4102c2c:	41047ec0 	call	41047ec <write>
 4102c30:	00ffffc4 	movi	r3,-1
 4102c34:	10c00526 	beq	r2,r3,4102c4c <_write_r+0x50>
 4102c38:	dfc00217 	ldw	ra,8(sp)
 4102c3c:	dc400117 	ldw	r17,4(sp)
 4102c40:	dc000017 	ldw	r16,0(sp)
 4102c44:	dec00304 	addi	sp,sp,12
 4102c48:	f800283a 	ret
 4102c4c:	80c00017 	ldw	r3,0(r16)
 4102c50:	183ff926 	beq	r3,zero,4102c38 <_write_r+0x3c>
 4102c54:	88c00015 	stw	r3,0(r17)
 4102c58:	003ff706 	br	4102c38 <_write_r+0x3c>

04102c5c <__swsetup_r>:
 4102c5c:	00810474 	movhi	r2,1041
 4102c60:	defffd04 	addi	sp,sp,-12
 4102c64:	10853004 	addi	r2,r2,5312
 4102c68:	dc400115 	stw	r17,4(sp)
 4102c6c:	2023883a 	mov	r17,r4
 4102c70:	11000017 	ldw	r4,0(r2)
 4102c74:	dc000015 	stw	r16,0(sp)
 4102c78:	dfc00215 	stw	ra,8(sp)
 4102c7c:	2821883a 	mov	r16,r5
 4102c80:	20000226 	beq	r4,zero,4102c8c <__swsetup_r+0x30>
 4102c84:	20800e17 	ldw	r2,56(r4)
 4102c88:	10003126 	beq	r2,zero,4102d50 <__swsetup_r+0xf4>
 4102c8c:	8080030b 	ldhu	r2,12(r16)
 4102c90:	10c0020c 	andi	r3,r2,8
 4102c94:	1009883a 	mov	r4,r2
 4102c98:	18000f26 	beq	r3,zero,4102cd8 <__swsetup_r+0x7c>
 4102c9c:	80c00417 	ldw	r3,16(r16)
 4102ca0:	18001526 	beq	r3,zero,4102cf8 <__swsetup_r+0x9c>
 4102ca4:	1100004c 	andi	r4,r2,1
 4102ca8:	20001c1e 	bne	r4,zero,4102d1c <__swsetup_r+0xc0>
 4102cac:	1080008c 	andi	r2,r2,2
 4102cb0:	1000291e 	bne	r2,zero,4102d58 <__swsetup_r+0xfc>
 4102cb4:	80800517 	ldw	r2,20(r16)
 4102cb8:	80800215 	stw	r2,8(r16)
 4102cbc:	18001c26 	beq	r3,zero,4102d30 <__swsetup_r+0xd4>
 4102cc0:	0005883a 	mov	r2,zero
 4102cc4:	dfc00217 	ldw	ra,8(sp)
 4102cc8:	dc400117 	ldw	r17,4(sp)
 4102ccc:	dc000017 	ldw	r16,0(sp)
 4102cd0:	dec00304 	addi	sp,sp,12
 4102cd4:	f800283a 	ret
 4102cd8:	2080040c 	andi	r2,r4,16
 4102cdc:	10002e26 	beq	r2,zero,4102d98 <__swsetup_r+0x13c>
 4102ce0:	2080010c 	andi	r2,r4,4
 4102ce4:	10001e1e 	bne	r2,zero,4102d60 <__swsetup_r+0x104>
 4102ce8:	80c00417 	ldw	r3,16(r16)
 4102cec:	20800214 	ori	r2,r4,8
 4102cf0:	8080030d 	sth	r2,12(r16)
 4102cf4:	183feb1e 	bne	r3,zero,4102ca4 <__swsetup_r+0x48>
 4102cf8:	1100a00c 	andi	r4,r2,640
 4102cfc:	01408004 	movi	r5,512
 4102d00:	217fe826 	beq	r4,r5,4102ca4 <__swsetup_r+0x48>
 4102d04:	800b883a 	mov	r5,r16
 4102d08:	8809883a 	mov	r4,r17
 4102d0c:	41036440 	call	4103644 <__smakebuf_r>
 4102d10:	8080030b 	ldhu	r2,12(r16)
 4102d14:	80c00417 	ldw	r3,16(r16)
 4102d18:	003fe206 	br	4102ca4 <__swsetup_r+0x48>
 4102d1c:	80800517 	ldw	r2,20(r16)
 4102d20:	80000215 	stw	zero,8(r16)
 4102d24:	0085c83a 	sub	r2,zero,r2
 4102d28:	80800615 	stw	r2,24(r16)
 4102d2c:	183fe41e 	bne	r3,zero,4102cc0 <__swsetup_r+0x64>
 4102d30:	80c0030b 	ldhu	r3,12(r16)
 4102d34:	0005883a 	mov	r2,zero
 4102d38:	1900200c 	andi	r4,r3,128
 4102d3c:	203fe126 	beq	r4,zero,4102cc4 <__swsetup_r+0x68>
 4102d40:	18c01014 	ori	r3,r3,64
 4102d44:	80c0030d 	sth	r3,12(r16)
 4102d48:	00bfffc4 	movi	r2,-1
 4102d4c:	003fdd06 	br	4102cc4 <__swsetup_r+0x68>
 4102d50:	41012a40 	call	41012a4 <__sinit>
 4102d54:	003fcd06 	br	4102c8c <__swsetup_r+0x30>
 4102d58:	0005883a 	mov	r2,zero
 4102d5c:	003fd606 	br	4102cb8 <__swsetup_r+0x5c>
 4102d60:	81400c17 	ldw	r5,48(r16)
 4102d64:	28000626 	beq	r5,zero,4102d80 <__swsetup_r+0x124>
 4102d68:	80801004 	addi	r2,r16,64
 4102d6c:	28800326 	beq	r5,r2,4102d7c <__swsetup_r+0x120>
 4102d70:	8809883a 	mov	r4,r17
 4102d74:	41032d40 	call	41032d4 <_free_r>
 4102d78:	8100030b 	ldhu	r4,12(r16)
 4102d7c:	80000c15 	stw	zero,48(r16)
 4102d80:	80c00417 	ldw	r3,16(r16)
 4102d84:	00bff6c4 	movi	r2,-37
 4102d88:	1108703a 	and	r4,r2,r4
 4102d8c:	80000115 	stw	zero,4(r16)
 4102d90:	80c00015 	stw	r3,0(r16)
 4102d94:	003fd506 	br	4102cec <__swsetup_r+0x90>
 4102d98:	00800244 	movi	r2,9
 4102d9c:	88800015 	stw	r2,0(r17)
 4102da0:	20801014 	ori	r2,r4,64
 4102da4:	8080030d 	sth	r2,12(r16)
 4102da8:	00bfffc4 	movi	r2,-1
 4102dac:	003fc506 	br	4102cc4 <__swsetup_r+0x68>

04102db0 <_close_r>:
 4102db0:	defffd04 	addi	sp,sp,-12
 4102db4:	dc000015 	stw	r16,0(sp)
 4102db8:	04010474 	movhi	r16,1041
 4102dbc:	dc400115 	stw	r17,4(sp)
 4102dc0:	840c3f04 	addi	r16,r16,12540
 4102dc4:	2023883a 	mov	r17,r4
 4102dc8:	2809883a 	mov	r4,r5
 4102dcc:	dfc00215 	stw	ra,8(sp)
 4102dd0:	80000015 	stw	zero,0(r16)
 4102dd4:	41039ac0 	call	41039ac <close>
 4102dd8:	00ffffc4 	movi	r3,-1
 4102ddc:	10c00526 	beq	r2,r3,4102df4 <_close_r+0x44>
 4102de0:	dfc00217 	ldw	ra,8(sp)
 4102de4:	dc400117 	ldw	r17,4(sp)
 4102de8:	dc000017 	ldw	r16,0(sp)
 4102dec:	dec00304 	addi	sp,sp,12
 4102df0:	f800283a 	ret
 4102df4:	80c00017 	ldw	r3,0(r16)
 4102df8:	183ff926 	beq	r3,zero,4102de0 <_close_r+0x30>
 4102dfc:	88c00015 	stw	r3,0(r17)
 4102e00:	003ff706 	br	4102de0 <_close_r+0x30>

04102e04 <_fclose_r>:
 4102e04:	28003926 	beq	r5,zero,4102eec <_fclose_r+0xe8>
 4102e08:	defffc04 	addi	sp,sp,-16
 4102e0c:	dc400115 	stw	r17,4(sp)
 4102e10:	dc000015 	stw	r16,0(sp)
 4102e14:	dfc00315 	stw	ra,12(sp)
 4102e18:	dc800215 	stw	r18,8(sp)
 4102e1c:	2023883a 	mov	r17,r4
 4102e20:	2821883a 	mov	r16,r5
 4102e24:	20000226 	beq	r4,zero,4102e30 <_fclose_r+0x2c>
 4102e28:	20800e17 	ldw	r2,56(r4)
 4102e2c:	10002726 	beq	r2,zero,4102ecc <_fclose_r+0xc8>
 4102e30:	8080030f 	ldh	r2,12(r16)
 4102e34:	1000071e 	bne	r2,zero,4102e54 <_fclose_r+0x50>
 4102e38:	0005883a 	mov	r2,zero
 4102e3c:	dfc00317 	ldw	ra,12(sp)
 4102e40:	dc800217 	ldw	r18,8(sp)
 4102e44:	dc400117 	ldw	r17,4(sp)
 4102e48:	dc000017 	ldw	r16,0(sp)
 4102e4c:	dec00404 	addi	sp,sp,16
 4102e50:	f800283a 	ret
 4102e54:	800b883a 	mov	r5,r16
 4102e58:	8809883a 	mov	r4,r17
 4102e5c:	4102f080 	call	4102f08 <__sflush_r>
 4102e60:	1025883a 	mov	r18,r2
 4102e64:	80800b17 	ldw	r2,44(r16)
 4102e68:	10000426 	beq	r2,zero,4102e7c <_fclose_r+0x78>
 4102e6c:	81400717 	ldw	r5,28(r16)
 4102e70:	8809883a 	mov	r4,r17
 4102e74:	103ee83a 	callr	r2
 4102e78:	10001616 	blt	r2,zero,4102ed4 <_fclose_r+0xd0>
 4102e7c:	8080030b 	ldhu	r2,12(r16)
 4102e80:	1080200c 	andi	r2,r2,128
 4102e84:	1000151e 	bne	r2,zero,4102edc <_fclose_r+0xd8>
 4102e88:	81400c17 	ldw	r5,48(r16)
 4102e8c:	28000526 	beq	r5,zero,4102ea4 <_fclose_r+0xa0>
 4102e90:	80801004 	addi	r2,r16,64
 4102e94:	28800226 	beq	r5,r2,4102ea0 <_fclose_r+0x9c>
 4102e98:	8809883a 	mov	r4,r17
 4102e9c:	41032d40 	call	41032d4 <_free_r>
 4102ea0:	80000c15 	stw	zero,48(r16)
 4102ea4:	81401117 	ldw	r5,68(r16)
 4102ea8:	28000326 	beq	r5,zero,4102eb8 <_fclose_r+0xb4>
 4102eac:	8809883a 	mov	r4,r17
 4102eb0:	41032d40 	call	41032d4 <_free_r>
 4102eb4:	80001115 	stw	zero,68(r16)
 4102eb8:	41012b40 	call	41012b4 <__sfp_lock_acquire>
 4102ebc:	8000030d 	sth	zero,12(r16)
 4102ec0:	41012b80 	call	41012b8 <__sfp_lock_release>
 4102ec4:	9005883a 	mov	r2,r18
 4102ec8:	003fdc06 	br	4102e3c <_fclose_r+0x38>
 4102ecc:	41012a40 	call	41012a4 <__sinit>
 4102ed0:	003fd706 	br	4102e30 <_fclose_r+0x2c>
 4102ed4:	04bfffc4 	movi	r18,-1
 4102ed8:	003fe806 	br	4102e7c <_fclose_r+0x78>
 4102edc:	81400417 	ldw	r5,16(r16)
 4102ee0:	8809883a 	mov	r4,r17
 4102ee4:	41032d40 	call	41032d4 <_free_r>
 4102ee8:	003fe706 	br	4102e88 <_fclose_r+0x84>
 4102eec:	0005883a 	mov	r2,zero
 4102ef0:	f800283a 	ret

04102ef4 <fclose>:
 4102ef4:	00810474 	movhi	r2,1041
 4102ef8:	10853004 	addi	r2,r2,5312
 4102efc:	200b883a 	mov	r5,r4
 4102f00:	11000017 	ldw	r4,0(r2)
 4102f04:	4102e041 	jmpi	4102e04 <_fclose_r>

04102f08 <__sflush_r>:
 4102f08:	2880030b 	ldhu	r2,12(r5)
 4102f0c:	defffb04 	addi	sp,sp,-20
 4102f10:	dcc00315 	stw	r19,12(sp)
 4102f14:	dc400115 	stw	r17,4(sp)
 4102f18:	dfc00415 	stw	ra,16(sp)
 4102f1c:	dc800215 	stw	r18,8(sp)
 4102f20:	dc000015 	stw	r16,0(sp)
 4102f24:	10c0020c 	andi	r3,r2,8
 4102f28:	2823883a 	mov	r17,r5
 4102f2c:	2027883a 	mov	r19,r4
 4102f30:	1800311e 	bne	r3,zero,4102ff8 <__sflush_r+0xf0>
 4102f34:	28c00117 	ldw	r3,4(r5)
 4102f38:	10820014 	ori	r2,r2,2048
 4102f3c:	2880030d 	sth	r2,12(r5)
 4102f40:	00c04b0e 	bge	zero,r3,4103070 <__sflush_r+0x168>
 4102f44:	8a000a17 	ldw	r8,40(r17)
 4102f48:	40002326 	beq	r8,zero,4102fd8 <__sflush_r+0xd0>
 4102f4c:	9c000017 	ldw	r16,0(r19)
 4102f50:	10c4000c 	andi	r3,r2,4096
 4102f54:	98000015 	stw	zero,0(r19)
 4102f58:	18004826 	beq	r3,zero,410307c <__sflush_r+0x174>
 4102f5c:	89801417 	ldw	r6,80(r17)
 4102f60:	10c0010c 	andi	r3,r2,4
 4102f64:	18000626 	beq	r3,zero,4102f80 <__sflush_r+0x78>
 4102f68:	88c00117 	ldw	r3,4(r17)
 4102f6c:	88800c17 	ldw	r2,48(r17)
 4102f70:	30cdc83a 	sub	r6,r6,r3
 4102f74:	10000226 	beq	r2,zero,4102f80 <__sflush_r+0x78>
 4102f78:	88800f17 	ldw	r2,60(r17)
 4102f7c:	308dc83a 	sub	r6,r6,r2
 4102f80:	89400717 	ldw	r5,28(r17)
 4102f84:	000f883a 	mov	r7,zero
 4102f88:	9809883a 	mov	r4,r19
 4102f8c:	403ee83a 	callr	r8
 4102f90:	00ffffc4 	movi	r3,-1
 4102f94:	10c04426 	beq	r2,r3,41030a8 <__sflush_r+0x1a0>
 4102f98:	88c0030b 	ldhu	r3,12(r17)
 4102f9c:	89000417 	ldw	r4,16(r17)
 4102fa0:	88000115 	stw	zero,4(r17)
 4102fa4:	197dffcc 	andi	r5,r3,63487
 4102fa8:	8940030d 	sth	r5,12(r17)
 4102fac:	89000015 	stw	r4,0(r17)
 4102fb0:	18c4000c 	andi	r3,r3,4096
 4102fb4:	18002c1e 	bne	r3,zero,4103068 <__sflush_r+0x160>
 4102fb8:	89400c17 	ldw	r5,48(r17)
 4102fbc:	9c000015 	stw	r16,0(r19)
 4102fc0:	28000526 	beq	r5,zero,4102fd8 <__sflush_r+0xd0>
 4102fc4:	88801004 	addi	r2,r17,64
 4102fc8:	28800226 	beq	r5,r2,4102fd4 <__sflush_r+0xcc>
 4102fcc:	9809883a 	mov	r4,r19
 4102fd0:	41032d40 	call	41032d4 <_free_r>
 4102fd4:	88000c15 	stw	zero,48(r17)
 4102fd8:	0005883a 	mov	r2,zero
 4102fdc:	dfc00417 	ldw	ra,16(sp)
 4102fe0:	dcc00317 	ldw	r19,12(sp)
 4102fe4:	dc800217 	ldw	r18,8(sp)
 4102fe8:	dc400117 	ldw	r17,4(sp)
 4102fec:	dc000017 	ldw	r16,0(sp)
 4102ff0:	dec00504 	addi	sp,sp,20
 4102ff4:	f800283a 	ret
 4102ff8:	2c800417 	ldw	r18,16(r5)
 4102ffc:	903ff626 	beq	r18,zero,4102fd8 <__sflush_r+0xd0>
 4103000:	2c000017 	ldw	r16,0(r5)
 4103004:	108000cc 	andi	r2,r2,3
 4103008:	2c800015 	stw	r18,0(r5)
 410300c:	84a1c83a 	sub	r16,r16,r18
 4103010:	1000131e 	bne	r2,zero,4103060 <__sflush_r+0x158>
 4103014:	28800517 	ldw	r2,20(r5)
 4103018:	88800215 	stw	r2,8(r17)
 410301c:	04000316 	blt	zero,r16,410302c <__sflush_r+0x124>
 4103020:	003fed06 	br	4102fd8 <__sflush_r+0xd0>
 4103024:	90a5883a 	add	r18,r18,r2
 4103028:	043feb0e 	bge	zero,r16,4102fd8 <__sflush_r+0xd0>
 410302c:	88800917 	ldw	r2,36(r17)
 4103030:	89400717 	ldw	r5,28(r17)
 4103034:	800f883a 	mov	r7,r16
 4103038:	900d883a 	mov	r6,r18
 410303c:	9809883a 	mov	r4,r19
 4103040:	103ee83a 	callr	r2
 4103044:	80a1c83a 	sub	r16,r16,r2
 4103048:	00bff616 	blt	zero,r2,4103024 <__sflush_r+0x11c>
 410304c:	88c0030b 	ldhu	r3,12(r17)
 4103050:	00bfffc4 	movi	r2,-1
 4103054:	18c01014 	ori	r3,r3,64
 4103058:	88c0030d 	sth	r3,12(r17)
 410305c:	003fdf06 	br	4102fdc <__sflush_r+0xd4>
 4103060:	0005883a 	mov	r2,zero
 4103064:	003fec06 	br	4103018 <__sflush_r+0x110>
 4103068:	88801415 	stw	r2,80(r17)
 410306c:	003fd206 	br	4102fb8 <__sflush_r+0xb0>
 4103070:	28c00f17 	ldw	r3,60(r5)
 4103074:	00ffb316 	blt	zero,r3,4102f44 <__sflush_r+0x3c>
 4103078:	003fd706 	br	4102fd8 <__sflush_r+0xd0>
 410307c:	89400717 	ldw	r5,28(r17)
 4103080:	000d883a 	mov	r6,zero
 4103084:	01c00044 	movi	r7,1
 4103088:	9809883a 	mov	r4,r19
 410308c:	403ee83a 	callr	r8
 4103090:	100d883a 	mov	r6,r2
 4103094:	00bfffc4 	movi	r2,-1
 4103098:	30801426 	beq	r6,r2,41030ec <__sflush_r+0x1e4>
 410309c:	8880030b 	ldhu	r2,12(r17)
 41030a0:	8a000a17 	ldw	r8,40(r17)
 41030a4:	003fae06 	br	4102f60 <__sflush_r+0x58>
 41030a8:	98c00017 	ldw	r3,0(r19)
 41030ac:	183fba26 	beq	r3,zero,4102f98 <__sflush_r+0x90>
 41030b0:	01000744 	movi	r4,29
 41030b4:	19000626 	beq	r3,r4,41030d0 <__sflush_r+0x1c8>
 41030b8:	01000584 	movi	r4,22
 41030bc:	19000426 	beq	r3,r4,41030d0 <__sflush_r+0x1c8>
 41030c0:	88c0030b 	ldhu	r3,12(r17)
 41030c4:	18c01014 	ori	r3,r3,64
 41030c8:	88c0030d 	sth	r3,12(r17)
 41030cc:	003fc306 	br	4102fdc <__sflush_r+0xd4>
 41030d0:	8880030b 	ldhu	r2,12(r17)
 41030d4:	88c00417 	ldw	r3,16(r17)
 41030d8:	88000115 	stw	zero,4(r17)
 41030dc:	10bdffcc 	andi	r2,r2,63487
 41030e0:	8880030d 	sth	r2,12(r17)
 41030e4:	88c00015 	stw	r3,0(r17)
 41030e8:	003fb306 	br	4102fb8 <__sflush_r+0xb0>
 41030ec:	98800017 	ldw	r2,0(r19)
 41030f0:	103fea26 	beq	r2,zero,410309c <__sflush_r+0x194>
 41030f4:	00c00744 	movi	r3,29
 41030f8:	10c00226 	beq	r2,r3,4103104 <__sflush_r+0x1fc>
 41030fc:	00c00584 	movi	r3,22
 4103100:	10c0031e 	bne	r2,r3,4103110 <__sflush_r+0x208>
 4103104:	9c000015 	stw	r16,0(r19)
 4103108:	0005883a 	mov	r2,zero
 410310c:	003fb306 	br	4102fdc <__sflush_r+0xd4>
 4103110:	88c0030b 	ldhu	r3,12(r17)
 4103114:	3005883a 	mov	r2,r6
 4103118:	18c01014 	ori	r3,r3,64
 410311c:	88c0030d 	sth	r3,12(r17)
 4103120:	003fae06 	br	4102fdc <__sflush_r+0xd4>

04103124 <_fflush_r>:
 4103124:	defffd04 	addi	sp,sp,-12
 4103128:	dc000115 	stw	r16,4(sp)
 410312c:	dfc00215 	stw	ra,8(sp)
 4103130:	2021883a 	mov	r16,r4
 4103134:	20000226 	beq	r4,zero,4103140 <_fflush_r+0x1c>
 4103138:	20800e17 	ldw	r2,56(r4)
 410313c:	10000c26 	beq	r2,zero,4103170 <_fflush_r+0x4c>
 4103140:	2880030f 	ldh	r2,12(r5)
 4103144:	1000051e 	bne	r2,zero,410315c <_fflush_r+0x38>
 4103148:	0005883a 	mov	r2,zero
 410314c:	dfc00217 	ldw	ra,8(sp)
 4103150:	dc000117 	ldw	r16,4(sp)
 4103154:	dec00304 	addi	sp,sp,12
 4103158:	f800283a 	ret
 410315c:	8009883a 	mov	r4,r16
 4103160:	dfc00217 	ldw	ra,8(sp)
 4103164:	dc000117 	ldw	r16,4(sp)
 4103168:	dec00304 	addi	sp,sp,12
 410316c:	4102f081 	jmpi	4102f08 <__sflush_r>
 4103170:	d9400015 	stw	r5,0(sp)
 4103174:	41012a40 	call	41012a4 <__sinit>
 4103178:	d9400017 	ldw	r5,0(sp)
 410317c:	003ff006 	br	4103140 <_fflush_r+0x1c>

04103180 <fflush>:
 4103180:	20000526 	beq	r4,zero,4103198 <fflush+0x18>
 4103184:	00810474 	movhi	r2,1041
 4103188:	10853004 	addi	r2,r2,5312
 410318c:	200b883a 	mov	r5,r4
 4103190:	11000017 	ldw	r4,0(r2)
 4103194:	41031241 	jmpi	4103124 <_fflush_r>
 4103198:	00810474 	movhi	r2,1041
 410319c:	10852f04 	addi	r2,r2,5308
 41031a0:	11000017 	ldw	r4,0(r2)
 41031a4:	01410434 	movhi	r5,1040
 41031a8:	294c4904 	addi	r5,r5,12580
 41031ac:	41018741 	jmpi	4101874 <_fwalk_reent>

041031b0 <_malloc_trim_r>:
 41031b0:	defffb04 	addi	sp,sp,-20
 41031b4:	dcc00315 	stw	r19,12(sp)
 41031b8:	04c10474 	movhi	r19,1041
 41031bc:	dc800215 	stw	r18,8(sp)
 41031c0:	dc400115 	stw	r17,4(sp)
 41031c4:	dc000015 	stw	r16,0(sp)
 41031c8:	dfc00415 	stw	ra,16(sp)
 41031cc:	2821883a 	mov	r16,r5
 41031d0:	9cff9004 	addi	r19,r19,-448
 41031d4:	2025883a 	mov	r18,r4
 41031d8:	4104a080 	call	4104a08 <__malloc_lock>
 41031dc:	98800217 	ldw	r2,8(r19)
 41031e0:	14400117 	ldw	r17,4(r2)
 41031e4:	00bfff04 	movi	r2,-4
 41031e8:	88a2703a 	and	r17,r17,r2
 41031ec:	8c21c83a 	sub	r16,r17,r16
 41031f0:	8403fbc4 	addi	r16,r16,4079
 41031f4:	8020d33a 	srli	r16,r16,12
 41031f8:	0083ffc4 	movi	r2,4095
 41031fc:	843fffc4 	addi	r16,r16,-1
 4103200:	8020933a 	slli	r16,r16,12
 4103204:	1400060e 	bge	r2,r16,4103220 <_malloc_trim_r+0x70>
 4103208:	000b883a 	mov	r5,zero
 410320c:	9009883a 	mov	r4,r18
 4103210:	4102a6c0 	call	4102a6c <_sbrk_r>
 4103214:	98c00217 	ldw	r3,8(r19)
 4103218:	1c47883a 	add	r3,r3,r17
 410321c:	10c00a26 	beq	r2,r3,4103248 <_malloc_trim_r+0x98>
 4103220:	9009883a 	mov	r4,r18
 4103224:	4104b280 	call	4104b28 <__malloc_unlock>
 4103228:	0005883a 	mov	r2,zero
 410322c:	dfc00417 	ldw	ra,16(sp)
 4103230:	dcc00317 	ldw	r19,12(sp)
 4103234:	dc800217 	ldw	r18,8(sp)
 4103238:	dc400117 	ldw	r17,4(sp)
 410323c:	dc000017 	ldw	r16,0(sp)
 4103240:	dec00504 	addi	sp,sp,20
 4103244:	f800283a 	ret
 4103248:	040bc83a 	sub	r5,zero,r16
 410324c:	9009883a 	mov	r4,r18
 4103250:	4102a6c0 	call	4102a6c <_sbrk_r>
 4103254:	00ffffc4 	movi	r3,-1
 4103258:	10c00d26 	beq	r2,r3,4103290 <_malloc_trim_r+0xe0>
 410325c:	00c10474 	movhi	r3,1041
 4103260:	18cc6704 	addi	r3,r3,12700
 4103264:	18800017 	ldw	r2,0(r3)
 4103268:	99000217 	ldw	r4,8(r19)
 410326c:	8c23c83a 	sub	r17,r17,r16
 4103270:	8c400054 	ori	r17,r17,1
 4103274:	1421c83a 	sub	r16,r2,r16
 4103278:	24400115 	stw	r17,4(r4)
 410327c:	9009883a 	mov	r4,r18
 4103280:	1c000015 	stw	r16,0(r3)
 4103284:	4104b280 	call	4104b28 <__malloc_unlock>
 4103288:	00800044 	movi	r2,1
 410328c:	003fe706 	br	410322c <_malloc_trim_r+0x7c>
 4103290:	000b883a 	mov	r5,zero
 4103294:	9009883a 	mov	r4,r18
 4103298:	4102a6c0 	call	4102a6c <_sbrk_r>
 410329c:	99000217 	ldw	r4,8(r19)
 41032a0:	014003c4 	movi	r5,15
 41032a4:	1107c83a 	sub	r3,r2,r4
 41032a8:	28ffdd0e 	bge	r5,r3,4103220 <_malloc_trim_r+0x70>
 41032ac:	01410474 	movhi	r5,1041
 41032b0:	29453104 	addi	r5,r5,5316
 41032b4:	29400017 	ldw	r5,0(r5)
 41032b8:	18c00054 	ori	r3,r3,1
 41032bc:	20c00115 	stw	r3,4(r4)
 41032c0:	00c10474 	movhi	r3,1041
 41032c4:	1145c83a 	sub	r2,r2,r5
 41032c8:	18cc6704 	addi	r3,r3,12700
 41032cc:	18800015 	stw	r2,0(r3)
 41032d0:	003fd306 	br	4103220 <_malloc_trim_r+0x70>

041032d4 <_free_r>:
 41032d4:	28004126 	beq	r5,zero,41033dc <_free_r+0x108>
 41032d8:	defffd04 	addi	sp,sp,-12
 41032dc:	dc400115 	stw	r17,4(sp)
 41032e0:	dc000015 	stw	r16,0(sp)
 41032e4:	2023883a 	mov	r17,r4
 41032e8:	2821883a 	mov	r16,r5
 41032ec:	dfc00215 	stw	ra,8(sp)
 41032f0:	4104a080 	call	4104a08 <__malloc_lock>
 41032f4:	81ffff17 	ldw	r7,-4(r16)
 41032f8:	00bfff84 	movi	r2,-2
 41032fc:	01010474 	movhi	r4,1041
 4103300:	81bffe04 	addi	r6,r16,-8
 4103304:	3884703a 	and	r2,r7,r2
 4103308:	213f9004 	addi	r4,r4,-448
 410330c:	308b883a 	add	r5,r6,r2
 4103310:	2a400117 	ldw	r9,4(r5)
 4103314:	22000217 	ldw	r8,8(r4)
 4103318:	00ffff04 	movi	r3,-4
 410331c:	48c6703a 	and	r3,r9,r3
 4103320:	2a005726 	beq	r5,r8,4103480 <_free_r+0x1ac>
 4103324:	28c00115 	stw	r3,4(r5)
 4103328:	39c0004c 	andi	r7,r7,1
 410332c:	3800091e 	bne	r7,zero,4103354 <_free_r+0x80>
 4103330:	823ffe17 	ldw	r8,-8(r16)
 4103334:	22400204 	addi	r9,r4,8
 4103338:	320dc83a 	sub	r6,r6,r8
 410333c:	31c00217 	ldw	r7,8(r6)
 4103340:	1205883a 	add	r2,r2,r8
 4103344:	3a406526 	beq	r7,r9,41034dc <_free_r+0x208>
 4103348:	32000317 	ldw	r8,12(r6)
 410334c:	3a000315 	stw	r8,12(r7)
 4103350:	41c00215 	stw	r7,8(r8)
 4103354:	28cf883a 	add	r7,r5,r3
 4103358:	39c00117 	ldw	r7,4(r7)
 410335c:	39c0004c 	andi	r7,r7,1
 4103360:	38003a26 	beq	r7,zero,410344c <_free_r+0x178>
 4103364:	10c00054 	ori	r3,r2,1
 4103368:	30c00115 	stw	r3,4(r6)
 410336c:	3087883a 	add	r3,r6,r2
 4103370:	18800015 	stw	r2,0(r3)
 4103374:	00c07fc4 	movi	r3,511
 4103378:	18801936 	bltu	r3,r2,41033e0 <_free_r+0x10c>
 410337c:	1004d0fa 	srli	r2,r2,3
 4103380:	01c00044 	movi	r7,1
 4103384:	21400117 	ldw	r5,4(r4)
 4103388:	10c00044 	addi	r3,r2,1
 410338c:	18c7883a 	add	r3,r3,r3
 4103390:	1005d0ba 	srai	r2,r2,2
 4103394:	18c7883a 	add	r3,r3,r3
 4103398:	18c7883a 	add	r3,r3,r3
 410339c:	1907883a 	add	r3,r3,r4
 41033a0:	3884983a 	sll	r2,r7,r2
 41033a4:	19c00017 	ldw	r7,0(r3)
 41033a8:	1a3ffe04 	addi	r8,r3,-8
 41033ac:	1144b03a 	or	r2,r2,r5
 41033b0:	32000315 	stw	r8,12(r6)
 41033b4:	31c00215 	stw	r7,8(r6)
 41033b8:	20800115 	stw	r2,4(r4)
 41033bc:	19800015 	stw	r6,0(r3)
 41033c0:	39800315 	stw	r6,12(r7)
 41033c4:	8809883a 	mov	r4,r17
 41033c8:	dfc00217 	ldw	ra,8(sp)
 41033cc:	dc400117 	ldw	r17,4(sp)
 41033d0:	dc000017 	ldw	r16,0(sp)
 41033d4:	dec00304 	addi	sp,sp,12
 41033d8:	4104b281 	jmpi	4104b28 <__malloc_unlock>
 41033dc:	f800283a 	ret
 41033e0:	100ad27a 	srli	r5,r2,9
 41033e4:	00c00104 	movi	r3,4
 41033e8:	19404a36 	bltu	r3,r5,4103514 <_free_r+0x240>
 41033ec:	100ad1ba 	srli	r5,r2,6
 41033f0:	28c00e44 	addi	r3,r5,57
 41033f4:	18c7883a 	add	r3,r3,r3
 41033f8:	29400e04 	addi	r5,r5,56
 41033fc:	18c7883a 	add	r3,r3,r3
 4103400:	18c7883a 	add	r3,r3,r3
 4103404:	1909883a 	add	r4,r3,r4
 4103408:	20c00017 	ldw	r3,0(r4)
 410340c:	01c10474 	movhi	r7,1041
 4103410:	213ffe04 	addi	r4,r4,-8
 4103414:	39ff9004 	addi	r7,r7,-448
 4103418:	20c04426 	beq	r4,r3,410352c <_free_r+0x258>
 410341c:	01ffff04 	movi	r7,-4
 4103420:	19400117 	ldw	r5,4(r3)
 4103424:	29ca703a 	and	r5,r5,r7
 4103428:	1140022e 	bgeu	r2,r5,4103434 <_free_r+0x160>
 410342c:	18c00217 	ldw	r3,8(r3)
 4103430:	20fffb1e 	bne	r4,r3,4103420 <_free_r+0x14c>
 4103434:	19000317 	ldw	r4,12(r3)
 4103438:	31000315 	stw	r4,12(r6)
 410343c:	30c00215 	stw	r3,8(r6)
 4103440:	21800215 	stw	r6,8(r4)
 4103444:	19800315 	stw	r6,12(r3)
 4103448:	003fde06 	br	41033c4 <_free_r+0xf0>
 410344c:	29c00217 	ldw	r7,8(r5)
 4103450:	10c5883a 	add	r2,r2,r3
 4103454:	00c10474 	movhi	r3,1041
 4103458:	18ff9204 	addi	r3,r3,-440
 410345c:	38c03b26 	beq	r7,r3,410354c <_free_r+0x278>
 4103460:	2a000317 	ldw	r8,12(r5)
 4103464:	11400054 	ori	r5,r2,1
 4103468:	3087883a 	add	r3,r6,r2
 410346c:	3a000315 	stw	r8,12(r7)
 4103470:	41c00215 	stw	r7,8(r8)
 4103474:	31400115 	stw	r5,4(r6)
 4103478:	18800015 	stw	r2,0(r3)
 410347c:	003fbd06 	br	4103374 <_free_r+0xa0>
 4103480:	39c0004c 	andi	r7,r7,1
 4103484:	10c5883a 	add	r2,r2,r3
 4103488:	3800071e 	bne	r7,zero,41034a8 <_free_r+0x1d4>
 410348c:	81fffe17 	ldw	r7,-8(r16)
 4103490:	31cdc83a 	sub	r6,r6,r7
 4103494:	30c00317 	ldw	r3,12(r6)
 4103498:	31400217 	ldw	r5,8(r6)
 410349c:	11c5883a 	add	r2,r2,r7
 41034a0:	28c00315 	stw	r3,12(r5)
 41034a4:	19400215 	stw	r5,8(r3)
 41034a8:	10c00054 	ori	r3,r2,1
 41034ac:	30c00115 	stw	r3,4(r6)
 41034b0:	00c10474 	movhi	r3,1041
 41034b4:	18c53204 	addi	r3,r3,5320
 41034b8:	18c00017 	ldw	r3,0(r3)
 41034bc:	21800215 	stw	r6,8(r4)
 41034c0:	10ffc036 	bltu	r2,r3,41033c4 <_free_r+0xf0>
 41034c4:	00810474 	movhi	r2,1041
 41034c8:	108c4204 	addi	r2,r2,12552
 41034cc:	11400017 	ldw	r5,0(r2)
 41034d0:	8809883a 	mov	r4,r17
 41034d4:	41031b00 	call	41031b0 <_malloc_trim_r>
 41034d8:	003fba06 	br	41033c4 <_free_r+0xf0>
 41034dc:	28c9883a 	add	r4,r5,r3
 41034e0:	21000117 	ldw	r4,4(r4)
 41034e4:	2100004c 	andi	r4,r4,1
 41034e8:	2000391e 	bne	r4,zero,41035d0 <_free_r+0x2fc>
 41034ec:	29c00217 	ldw	r7,8(r5)
 41034f0:	29000317 	ldw	r4,12(r5)
 41034f4:	1885883a 	add	r2,r3,r2
 41034f8:	10c00054 	ori	r3,r2,1
 41034fc:	39000315 	stw	r4,12(r7)
 4103500:	21c00215 	stw	r7,8(r4)
 4103504:	30c00115 	stw	r3,4(r6)
 4103508:	308d883a 	add	r6,r6,r2
 410350c:	30800015 	stw	r2,0(r6)
 4103510:	003fac06 	br	41033c4 <_free_r+0xf0>
 4103514:	00c00504 	movi	r3,20
 4103518:	19401536 	bltu	r3,r5,4103570 <_free_r+0x29c>
 410351c:	28c01704 	addi	r3,r5,92
 4103520:	18c7883a 	add	r3,r3,r3
 4103524:	294016c4 	addi	r5,r5,91
 4103528:	003fb406 	br	41033fc <_free_r+0x128>
 410352c:	280bd0ba 	srai	r5,r5,2
 4103530:	00c00044 	movi	r3,1
 4103534:	38800117 	ldw	r2,4(r7)
 4103538:	194a983a 	sll	r5,r3,r5
 410353c:	2007883a 	mov	r3,r4
 4103540:	2884b03a 	or	r2,r5,r2
 4103544:	38800115 	stw	r2,4(r7)
 4103548:	003fbb06 	br	4103438 <_free_r+0x164>
 410354c:	21800515 	stw	r6,20(r4)
 4103550:	21800415 	stw	r6,16(r4)
 4103554:	10c00054 	ori	r3,r2,1
 4103558:	31c00315 	stw	r7,12(r6)
 410355c:	31c00215 	stw	r7,8(r6)
 4103560:	30c00115 	stw	r3,4(r6)
 4103564:	308d883a 	add	r6,r6,r2
 4103568:	30800015 	stw	r2,0(r6)
 410356c:	003f9506 	br	41033c4 <_free_r+0xf0>
 4103570:	00c01504 	movi	r3,84
 4103574:	19400536 	bltu	r3,r5,410358c <_free_r+0x2b8>
 4103578:	100ad33a 	srli	r5,r2,12
 410357c:	28c01bc4 	addi	r3,r5,111
 4103580:	18c7883a 	add	r3,r3,r3
 4103584:	29401b84 	addi	r5,r5,110
 4103588:	003f9c06 	br	41033fc <_free_r+0x128>
 410358c:	00c05504 	movi	r3,340
 4103590:	19400536 	bltu	r3,r5,41035a8 <_free_r+0x2d4>
 4103594:	100ad3fa 	srli	r5,r2,15
 4103598:	28c01e04 	addi	r3,r5,120
 410359c:	18c7883a 	add	r3,r3,r3
 41035a0:	29401dc4 	addi	r5,r5,119
 41035a4:	003f9506 	br	41033fc <_free_r+0x128>
 41035a8:	00c15504 	movi	r3,1364
 41035ac:	19400536 	bltu	r3,r5,41035c4 <_free_r+0x2f0>
 41035b0:	100ad4ba 	srli	r5,r2,18
 41035b4:	28c01f44 	addi	r3,r5,125
 41035b8:	18c7883a 	add	r3,r3,r3
 41035bc:	29401f04 	addi	r5,r5,124
 41035c0:	003f8e06 	br	41033fc <_free_r+0x128>
 41035c4:	00c03f84 	movi	r3,254
 41035c8:	01401f84 	movi	r5,126
 41035cc:	003f8b06 	br	41033fc <_free_r+0x128>
 41035d0:	10c00054 	ori	r3,r2,1
 41035d4:	30c00115 	stw	r3,4(r6)
 41035d8:	308d883a 	add	r6,r6,r2
 41035dc:	30800015 	stw	r2,0(r6)
 41035e0:	003f7806 	br	41033c4 <_free_r+0xf0>

041035e4 <_lseek_r>:
 41035e4:	defffd04 	addi	sp,sp,-12
 41035e8:	2805883a 	mov	r2,r5
 41035ec:	dc000015 	stw	r16,0(sp)
 41035f0:	04010474 	movhi	r16,1041
 41035f4:	dc400115 	stw	r17,4(sp)
 41035f8:	300b883a 	mov	r5,r6
 41035fc:	840c3f04 	addi	r16,r16,12540
 4103600:	2023883a 	mov	r17,r4
 4103604:	380d883a 	mov	r6,r7
 4103608:	1009883a 	mov	r4,r2
 410360c:	dfc00215 	stw	ra,8(sp)
 4103610:	80000015 	stw	zero,0(r16)
 4103614:	41042300 	call	4104230 <lseek>
 4103618:	00ffffc4 	movi	r3,-1
 410361c:	10c00526 	beq	r2,r3,4103634 <_lseek_r+0x50>
 4103620:	dfc00217 	ldw	ra,8(sp)
 4103624:	dc400117 	ldw	r17,4(sp)
 4103628:	dc000017 	ldw	r16,0(sp)
 410362c:	dec00304 	addi	sp,sp,12
 4103630:	f800283a 	ret
 4103634:	80c00017 	ldw	r3,0(r16)
 4103638:	183ff926 	beq	r3,zero,4103620 <_lseek_r+0x3c>
 410363c:	88c00015 	stw	r3,0(r17)
 4103640:	003ff706 	br	4103620 <_lseek_r+0x3c>

04103644 <__smakebuf_r>:
 4103644:	2880030b 	ldhu	r2,12(r5)
 4103648:	10c0008c 	andi	r3,r2,2
 410364c:	1800411e 	bne	r3,zero,4103754 <__smakebuf_r+0x110>
 4103650:	deffec04 	addi	sp,sp,-80
 4103654:	dc000f15 	stw	r16,60(sp)
 4103658:	2821883a 	mov	r16,r5
 410365c:	2940038f 	ldh	r5,14(r5)
 4103660:	dc401015 	stw	r17,64(sp)
 4103664:	dfc01315 	stw	ra,76(sp)
 4103668:	dcc01215 	stw	r19,72(sp)
 410366c:	dc801115 	stw	r18,68(sp)
 4103670:	2023883a 	mov	r17,r4
 4103674:	28001c16 	blt	r5,zero,41036e8 <__smakebuf_r+0xa4>
 4103678:	d80d883a 	mov	r6,sp
 410367c:	41038600 	call	4103860 <_fstat_r>
 4103680:	10001816 	blt	r2,zero,41036e4 <__smakebuf_r+0xa0>
 4103684:	d8800117 	ldw	r2,4(sp)
 4103688:	00e00014 	movui	r3,32768
 410368c:	10bc000c 	andi	r2,r2,61440
 4103690:	14c80020 	cmpeqi	r19,r2,8192
 4103694:	10c03726 	beq	r2,r3,4103774 <__smakebuf_r+0x130>
 4103698:	80c0030b 	ldhu	r3,12(r16)
 410369c:	18c20014 	ori	r3,r3,2048
 41036a0:	80c0030d 	sth	r3,12(r16)
 41036a4:	00c80004 	movi	r3,8192
 41036a8:	10c0521e 	bne	r2,r3,41037f4 <__smakebuf_r+0x1b0>
 41036ac:	8140038f 	ldh	r5,14(r16)
 41036b0:	8809883a 	mov	r4,r17
 41036b4:	41038bc0 	call	41038bc <_isatty_r>
 41036b8:	10004c26 	beq	r2,zero,41037ec <__smakebuf_r+0x1a8>
 41036bc:	8080030b 	ldhu	r2,12(r16)
 41036c0:	80c010c4 	addi	r3,r16,67
 41036c4:	80c00015 	stw	r3,0(r16)
 41036c8:	10800054 	ori	r2,r2,1
 41036cc:	8080030d 	sth	r2,12(r16)
 41036d0:	00800044 	movi	r2,1
 41036d4:	80c00415 	stw	r3,16(r16)
 41036d8:	80800515 	stw	r2,20(r16)
 41036dc:	04810004 	movi	r18,1024
 41036e0:	00000706 	br	4103700 <__smakebuf_r+0xbc>
 41036e4:	8080030b 	ldhu	r2,12(r16)
 41036e8:	10c0200c 	andi	r3,r2,128
 41036ec:	18001f1e 	bne	r3,zero,410376c <__smakebuf_r+0x128>
 41036f0:	04810004 	movi	r18,1024
 41036f4:	10820014 	ori	r2,r2,2048
 41036f8:	8080030d 	sth	r2,12(r16)
 41036fc:	0027883a 	mov	r19,zero
 4103700:	900b883a 	mov	r5,r18
 4103704:	8809883a 	mov	r4,r17
 4103708:	41019940 	call	4101994 <_malloc_r>
 410370c:	10002c26 	beq	r2,zero,41037c0 <__smakebuf_r+0x17c>
 4103710:	80c0030b 	ldhu	r3,12(r16)
 4103714:	01010434 	movhi	r4,1040
 4103718:	2103d704 	addi	r4,r4,3932
 410371c:	89000f15 	stw	r4,60(r17)
 4103720:	18c02014 	ori	r3,r3,128
 4103724:	80c0030d 	sth	r3,12(r16)
 4103728:	80800015 	stw	r2,0(r16)
 410372c:	80800415 	stw	r2,16(r16)
 4103730:	84800515 	stw	r18,20(r16)
 4103734:	98001a1e 	bne	r19,zero,41037a0 <__smakebuf_r+0x15c>
 4103738:	dfc01317 	ldw	ra,76(sp)
 410373c:	dcc01217 	ldw	r19,72(sp)
 4103740:	dc801117 	ldw	r18,68(sp)
 4103744:	dc401017 	ldw	r17,64(sp)
 4103748:	dc000f17 	ldw	r16,60(sp)
 410374c:	dec01404 	addi	sp,sp,80
 4103750:	f800283a 	ret
 4103754:	288010c4 	addi	r2,r5,67
 4103758:	28800015 	stw	r2,0(r5)
 410375c:	28800415 	stw	r2,16(r5)
 4103760:	00800044 	movi	r2,1
 4103764:	28800515 	stw	r2,20(r5)
 4103768:	f800283a 	ret
 410376c:	04801004 	movi	r18,64
 4103770:	003fe006 	br	41036f4 <__smakebuf_r+0xb0>
 4103774:	81000a17 	ldw	r4,40(r16)
 4103778:	00c10434 	movhi	r3,1040
 410377c:	18cae604 	addi	r3,r3,11160
 4103780:	20ffc51e 	bne	r4,r3,4103698 <__smakebuf_r+0x54>
 4103784:	8080030b 	ldhu	r2,12(r16)
 4103788:	04810004 	movi	r18,1024
 410378c:	84801315 	stw	r18,76(r16)
 4103790:	1484b03a 	or	r2,r2,r18
 4103794:	8080030d 	sth	r2,12(r16)
 4103798:	0027883a 	mov	r19,zero
 410379c:	003fd806 	br	4103700 <__smakebuf_r+0xbc>
 41037a0:	8140038f 	ldh	r5,14(r16)
 41037a4:	8809883a 	mov	r4,r17
 41037a8:	41038bc0 	call	41038bc <_isatty_r>
 41037ac:	103fe226 	beq	r2,zero,4103738 <__smakebuf_r+0xf4>
 41037b0:	8080030b 	ldhu	r2,12(r16)
 41037b4:	10800054 	ori	r2,r2,1
 41037b8:	8080030d 	sth	r2,12(r16)
 41037bc:	003fde06 	br	4103738 <__smakebuf_r+0xf4>
 41037c0:	8080030b 	ldhu	r2,12(r16)
 41037c4:	10c0800c 	andi	r3,r2,512
 41037c8:	183fdb1e 	bne	r3,zero,4103738 <__smakebuf_r+0xf4>
 41037cc:	10800094 	ori	r2,r2,2
 41037d0:	80c010c4 	addi	r3,r16,67
 41037d4:	8080030d 	sth	r2,12(r16)
 41037d8:	00800044 	movi	r2,1
 41037dc:	80c00015 	stw	r3,0(r16)
 41037e0:	80c00415 	stw	r3,16(r16)
 41037e4:	80800515 	stw	r2,20(r16)
 41037e8:	003fd306 	br	4103738 <__smakebuf_r+0xf4>
 41037ec:	04810004 	movi	r18,1024
 41037f0:	003fc306 	br	4103700 <__smakebuf_r+0xbc>
 41037f4:	0027883a 	mov	r19,zero
 41037f8:	04810004 	movi	r18,1024
 41037fc:	003fc006 	br	4103700 <__smakebuf_r+0xbc>

04103800 <_read_r>:
 4103800:	defffd04 	addi	sp,sp,-12
 4103804:	2805883a 	mov	r2,r5
 4103808:	dc000015 	stw	r16,0(sp)
 410380c:	04010474 	movhi	r16,1041
 4103810:	dc400115 	stw	r17,4(sp)
 4103814:	300b883a 	mov	r5,r6
 4103818:	840c3f04 	addi	r16,r16,12540
 410381c:	2023883a 	mov	r17,r4
 4103820:	380d883a 	mov	r6,r7
 4103824:	1009883a 	mov	r4,r2
 4103828:	dfc00215 	stw	ra,8(sp)
 410382c:	80000015 	stw	zero,0(r16)
 4103830:	41043fc0 	call	41043fc <read>
 4103834:	00ffffc4 	movi	r3,-1
 4103838:	10c00526 	beq	r2,r3,4103850 <_read_r+0x50>
 410383c:	dfc00217 	ldw	ra,8(sp)
 4103840:	dc400117 	ldw	r17,4(sp)
 4103844:	dc000017 	ldw	r16,0(sp)
 4103848:	dec00304 	addi	sp,sp,12
 410384c:	f800283a 	ret
 4103850:	80c00017 	ldw	r3,0(r16)
 4103854:	183ff926 	beq	r3,zero,410383c <_read_r+0x3c>
 4103858:	88c00015 	stw	r3,0(r17)
 410385c:	003ff706 	br	410383c <_read_r+0x3c>

04103860 <_fstat_r>:
 4103860:	defffd04 	addi	sp,sp,-12
 4103864:	2805883a 	mov	r2,r5
 4103868:	dc000015 	stw	r16,0(sp)
 410386c:	04010474 	movhi	r16,1041
 4103870:	dc400115 	stw	r17,4(sp)
 4103874:	840c3f04 	addi	r16,r16,12540
 4103878:	2023883a 	mov	r17,r4
 410387c:	300b883a 	mov	r5,r6
 4103880:	1009883a 	mov	r4,r2
 4103884:	dfc00215 	stw	ra,8(sp)
 4103888:	80000015 	stw	zero,0(r16)
 410388c:	4103ae40 	call	4103ae4 <fstat>
 4103890:	00ffffc4 	movi	r3,-1
 4103894:	10c00526 	beq	r2,r3,41038ac <_fstat_r+0x4c>
 4103898:	dfc00217 	ldw	ra,8(sp)
 410389c:	dc400117 	ldw	r17,4(sp)
 41038a0:	dc000017 	ldw	r16,0(sp)
 41038a4:	dec00304 	addi	sp,sp,12
 41038a8:	f800283a 	ret
 41038ac:	80c00017 	ldw	r3,0(r16)
 41038b0:	183ff926 	beq	r3,zero,4103898 <_fstat_r+0x38>
 41038b4:	88c00015 	stw	r3,0(r17)
 41038b8:	003ff706 	br	4103898 <_fstat_r+0x38>

041038bc <_isatty_r>:
 41038bc:	defffd04 	addi	sp,sp,-12
 41038c0:	dc000015 	stw	r16,0(sp)
 41038c4:	04010474 	movhi	r16,1041
 41038c8:	dc400115 	stw	r17,4(sp)
 41038cc:	840c3f04 	addi	r16,r16,12540
 41038d0:	2023883a 	mov	r17,r4
 41038d4:	2809883a 	mov	r4,r5
 41038d8:	dfc00215 	stw	ra,8(sp)
 41038dc:	80000015 	stw	zero,0(r16)
 41038e0:	41040640 	call	4104064 <isatty>
 41038e4:	00ffffc4 	movi	r3,-1
 41038e8:	10c00526 	beq	r2,r3,4103900 <_isatty_r+0x44>
 41038ec:	dfc00217 	ldw	ra,8(sp)
 41038f0:	dc400117 	ldw	r17,4(sp)
 41038f4:	dc000017 	ldw	r16,0(sp)
 41038f8:	dec00304 	addi	sp,sp,12
 41038fc:	f800283a 	ret
 4103900:	80c00017 	ldw	r3,0(r16)
 4103904:	183ff926 	beq	r3,zero,41038ec <_isatty_r+0x30>
 4103908:	88c00015 	stw	r3,0(r17)
 410390c:	003ff706 	br	41038ec <_isatty_r+0x30>

04103910 <__muldi3>:
 4103910:	223fffcc 	andi	r8,r4,65535
 4103914:	2006d43a 	srli	r3,r4,16
 4103918:	32bfffcc 	andi	r10,r6,65535
 410391c:	3012d43a 	srli	r9,r6,16
 4103920:	4297383a 	mul	r11,r8,r10
 4103924:	1a95383a 	mul	r10,r3,r10
 4103928:	4251383a 	mul	r8,r8,r9
 410392c:	5804d43a 	srli	r2,r11,16
 4103930:	4291883a 	add	r8,r8,r10
 4103934:	1205883a 	add	r2,r2,r8
 4103938:	1a51383a 	mul	r8,r3,r9
 410393c:	1280022e 	bgeu	r2,r10,4103948 <__muldi3+0x38>
 4103940:	00c00074 	movhi	r3,1
 4103944:	40d1883a 	add	r8,r8,r3
 4103948:	1006d43a 	srli	r3,r2,16
 410394c:	21cf383a 	mul	r7,r4,r7
 4103950:	314b383a 	mul	r5,r6,r5
 4103954:	1004943a 	slli	r2,r2,16
 4103958:	1a11883a 	add	r8,r3,r8
 410395c:	5affffcc 	andi	r11,r11,65535
 4103960:	3947883a 	add	r3,r7,r5
 4103964:	12c5883a 	add	r2,r2,r11
 4103968:	1a07883a 	add	r3,r3,r8
 410396c:	f800283a 	ret

04103970 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4103970:	defffe04 	addi	sp,sp,-8
 4103974:	dfc00115 	stw	ra,4(sp)
 4103978:	df000015 	stw	fp,0(sp)
 410397c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4103980:	d0a00917 	ldw	r2,-32732(gp)
 4103984:	10000326 	beq	r2,zero,4103994 <alt_get_errno+0x24>
 4103988:	d0a00917 	ldw	r2,-32732(gp)
 410398c:	103ee83a 	callr	r2
 4103990:	00000106 	br	4103998 <alt_get_errno+0x28>
 4103994:	d0a71004 	addi	r2,gp,-25536
}
 4103998:	e037883a 	mov	sp,fp
 410399c:	dfc00117 	ldw	ra,4(sp)
 41039a0:	df000017 	ldw	fp,0(sp)
 41039a4:	dec00204 	addi	sp,sp,8
 41039a8:	f800283a 	ret

041039ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 41039ac:	defffb04 	addi	sp,sp,-20
 41039b0:	dfc00415 	stw	ra,16(sp)
 41039b4:	df000315 	stw	fp,12(sp)
 41039b8:	df000304 	addi	fp,sp,12
 41039bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 41039c0:	e0bfff17 	ldw	r2,-4(fp)
 41039c4:	10000616 	blt	r2,zero,41039e0 <close+0x34>
 41039c8:	e0bfff17 	ldw	r2,-4(fp)
 41039cc:	10c00324 	muli	r3,r2,12
 41039d0:	00810474 	movhi	r2,1041
 41039d4:	10809c04 	addi	r2,r2,624
 41039d8:	1885883a 	add	r2,r3,r2
 41039dc:	00000106 	br	41039e4 <close+0x38>
 41039e0:	0005883a 	mov	r2,zero
 41039e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 41039e8:	e0bffd17 	ldw	r2,-12(fp)
 41039ec:	10001926 	beq	r2,zero,4103a54 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 41039f0:	e0bffd17 	ldw	r2,-12(fp)
 41039f4:	10800017 	ldw	r2,0(r2)
 41039f8:	10800417 	ldw	r2,16(r2)
 41039fc:	10000626 	beq	r2,zero,4103a18 <close+0x6c>
 4103a00:	e0bffd17 	ldw	r2,-12(fp)
 4103a04:	10800017 	ldw	r2,0(r2)
 4103a08:	10800417 	ldw	r2,16(r2)
 4103a0c:	e13ffd17 	ldw	r4,-12(fp)
 4103a10:	103ee83a 	callr	r2
 4103a14:	00000106 	br	4103a1c <close+0x70>
 4103a18:	0005883a 	mov	r2,zero
 4103a1c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4103a20:	e13fff17 	ldw	r4,-4(fp)
 4103a24:	41044f80 	call	41044f8 <alt_release_fd>
    if (rval < 0)
 4103a28:	e0bffe17 	ldw	r2,-8(fp)
 4103a2c:	1000070e 	bge	r2,zero,4103a4c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4103a30:	41039700 	call	4103970 <alt_get_errno>
 4103a34:	1007883a 	mov	r3,r2
 4103a38:	e0bffe17 	ldw	r2,-8(fp)
 4103a3c:	0085c83a 	sub	r2,zero,r2
 4103a40:	18800015 	stw	r2,0(r3)
      return -1;
 4103a44:	00bfffc4 	movi	r2,-1
 4103a48:	00000706 	br	4103a68 <close+0xbc>
    }
    return 0;
 4103a4c:	0005883a 	mov	r2,zero
 4103a50:	00000506 	br	4103a68 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4103a54:	41039700 	call	4103970 <alt_get_errno>
 4103a58:	1007883a 	mov	r3,r2
 4103a5c:	00801444 	movi	r2,81
 4103a60:	18800015 	stw	r2,0(r3)
    return -1;
 4103a64:	00bfffc4 	movi	r2,-1
  }
}
 4103a68:	e037883a 	mov	sp,fp
 4103a6c:	dfc00117 	ldw	ra,4(sp)
 4103a70:	df000017 	ldw	fp,0(sp)
 4103a74:	dec00204 	addi	sp,sp,8
 4103a78:	f800283a 	ret

04103a7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4103a7c:	defffc04 	addi	sp,sp,-16
 4103a80:	df000315 	stw	fp,12(sp)
 4103a84:	df000304 	addi	fp,sp,12
 4103a88:	e13ffd15 	stw	r4,-12(fp)
 4103a8c:	e17ffe15 	stw	r5,-8(fp)
 4103a90:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4103a94:	e0bfff17 	ldw	r2,-4(fp)
}
 4103a98:	e037883a 	mov	sp,fp
 4103a9c:	df000017 	ldw	fp,0(sp)
 4103aa0:	dec00104 	addi	sp,sp,4
 4103aa4:	f800283a 	ret

04103aa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4103aa8:	defffe04 	addi	sp,sp,-8
 4103aac:	dfc00115 	stw	ra,4(sp)
 4103ab0:	df000015 	stw	fp,0(sp)
 4103ab4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4103ab8:	d0a00917 	ldw	r2,-32732(gp)
 4103abc:	10000326 	beq	r2,zero,4103acc <alt_get_errno+0x24>
 4103ac0:	d0a00917 	ldw	r2,-32732(gp)
 4103ac4:	103ee83a 	callr	r2
 4103ac8:	00000106 	br	4103ad0 <alt_get_errno+0x28>
 4103acc:	d0a71004 	addi	r2,gp,-25536
}
 4103ad0:	e037883a 	mov	sp,fp
 4103ad4:	dfc00117 	ldw	ra,4(sp)
 4103ad8:	df000017 	ldw	fp,0(sp)
 4103adc:	dec00204 	addi	sp,sp,8
 4103ae0:	f800283a 	ret

04103ae4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4103ae4:	defffb04 	addi	sp,sp,-20
 4103ae8:	dfc00415 	stw	ra,16(sp)
 4103aec:	df000315 	stw	fp,12(sp)
 4103af0:	df000304 	addi	fp,sp,12
 4103af4:	e13ffe15 	stw	r4,-8(fp)
 4103af8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4103afc:	e0bffe17 	ldw	r2,-8(fp)
 4103b00:	10000616 	blt	r2,zero,4103b1c <fstat+0x38>
 4103b04:	e0bffe17 	ldw	r2,-8(fp)
 4103b08:	10c00324 	muli	r3,r2,12
 4103b0c:	00810474 	movhi	r2,1041
 4103b10:	10809c04 	addi	r2,r2,624
 4103b14:	1885883a 	add	r2,r3,r2
 4103b18:	00000106 	br	4103b20 <fstat+0x3c>
 4103b1c:	0005883a 	mov	r2,zero
 4103b20:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4103b24:	e0bffd17 	ldw	r2,-12(fp)
 4103b28:	10001026 	beq	r2,zero,4103b6c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4103b2c:	e0bffd17 	ldw	r2,-12(fp)
 4103b30:	10800017 	ldw	r2,0(r2)
 4103b34:	10800817 	ldw	r2,32(r2)
 4103b38:	10000726 	beq	r2,zero,4103b58 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4103b3c:	e0bffd17 	ldw	r2,-12(fp)
 4103b40:	10800017 	ldw	r2,0(r2)
 4103b44:	10800817 	ldw	r2,32(r2)
 4103b48:	e17fff17 	ldw	r5,-4(fp)
 4103b4c:	e13ffd17 	ldw	r4,-12(fp)
 4103b50:	103ee83a 	callr	r2
 4103b54:	00000a06 	br	4103b80 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4103b58:	e0bfff17 	ldw	r2,-4(fp)
 4103b5c:	00c80004 	movi	r3,8192
 4103b60:	10c00115 	stw	r3,4(r2)
      return 0;
 4103b64:	0005883a 	mov	r2,zero
 4103b68:	00000506 	br	4103b80 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4103b6c:	4103aa80 	call	4103aa8 <alt_get_errno>
 4103b70:	1007883a 	mov	r3,r2
 4103b74:	00801444 	movi	r2,81
 4103b78:	18800015 	stw	r2,0(r3)
    return -1;
 4103b7c:	00bfffc4 	movi	r2,-1
  }
}
 4103b80:	e037883a 	mov	sp,fp
 4103b84:	dfc00117 	ldw	ra,4(sp)
 4103b88:	df000017 	ldw	fp,0(sp)
 4103b8c:	dec00204 	addi	sp,sp,8
 4103b90:	f800283a 	ret

04103b94 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 4103b94:	defff404 	addi	sp,sp,-48
 4103b98:	dfc00b15 	stw	ra,44(sp)
 4103b9c:	df000a15 	stw	fp,40(sp)
 4103ba0:	dd000915 	stw	r20,36(sp)
 4103ba4:	dcc00815 	stw	r19,32(sp)
 4103ba8:	dc800715 	stw	r18,28(sp)
 4103bac:	dc400615 	stw	r17,24(sp)
 4103bb0:	dc000515 	stw	r16,20(sp)
 4103bb4:	df000a04 	addi	fp,sp,40
 4103bb8:	e13ff915 	stw	r4,-28(fp)
 4103bbc:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 4103bc0:	e0bffa17 	ldw	r2,-24(fp)
 4103bc4:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4103bc8:	d0a71e17 	ldw	r2,-25480(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 4103bcc:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4103bd0:	d0a71d17 	ldw	r2,-25484(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 4103bd4:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 4103bd8:	e0bff817 	ldw	r2,-32(fp)
 4103bdc:	10005f26 	beq	r2,zero,4103d5c <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 4103be0:	d0a71717 	ldw	r2,-25508(gp)
 4103be4:	1029883a 	mov	r20,r2
 4103be8:	e17ff817 	ldw	r5,-32(fp)
 4103bec:	e13ff717 	ldw	r4,-36(fp)
 4103bf0:	4100b180 	call	4100b18 <__udivsi3>
 4103bf4:	a085883a 	add	r2,r20,r2
 4103bf8:	1007883a 	mov	r3,r2
 4103bfc:	e0bff917 	ldw	r2,-28(fp)
 4103c00:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 4103c04:	d0a71817 	ldw	r2,-25504(gp)
 4103c08:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 4103c0c:	e0bff717 	ldw	r2,-36(fp)
 4103c10:	1021883a 	mov	r16,r2
 4103c14:	0023883a 	mov	r17,zero
 4103c18:	e17ff817 	ldw	r5,-32(fp)
 4103c1c:	010003f4 	movhi	r4,15
 4103c20:	21109004 	addi	r4,r4,16960
 4103c24:	4100b180 	call	4100b18 <__udivsi3>
 4103c28:	1025883a 	mov	r18,r2
 4103c2c:	0027883a 	mov	r19,zero
 4103c30:	900d883a 	mov	r6,r18
 4103c34:	980f883a 	mov	r7,r19
 4103c38:	8009883a 	mov	r4,r16
 4103c3c:	880b883a 	mov	r5,r17
 4103c40:	41039100 	call	4103910 <__muldi3>
 4103c44:	1009883a 	mov	r4,r2
 4103c48:	180b883a 	mov	r5,r3
 4103c4c:	2005883a 	mov	r2,r4
 4103c50:	2807883a 	mov	r3,r5
 4103c54:	018003f4 	movhi	r6,15
 4103c58:	31909004 	addi	r6,r6,16960
 4103c5c:	000f883a 	mov	r7,zero
 4103c60:	1009883a 	mov	r4,r2
 4103c64:	180b883a 	mov	r5,r3
 4103c68:	410f20c0 	call	410f20c <__umoddi3>
 4103c6c:	1009883a 	mov	r4,r2
 4103c70:	180b883a 	mov	r5,r3
 4103c74:	2005883a 	mov	r2,r4
 4103c78:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 4103c7c:	a085883a 	add	r2,r20,r2
 4103c80:	1007883a 	mov	r3,r2
 4103c84:	e0bff917 	ldw	r2,-28(fp)
 4103c88:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 4103c8c:	00001406 	br	4103ce0 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 4103c90:	e0bff917 	ldw	r2,-28(fp)
 4103c94:	10800017 	ldw	r2,0(r2)
 4103c98:	00800516 	blt	zero,r2,4103cb0 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 4103c9c:	e0bff917 	ldw	r2,-28(fp)
 4103ca0:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 4103ca4:	e0bff917 	ldw	r2,-28(fp)
 4103ca8:	10000115 	stw	zero,4(r2)
          break;
 4103cac:	00000f06 	br	4103cec <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 4103cb0:	e0bff917 	ldw	r2,-28(fp)
 4103cb4:	10800017 	ldw	r2,0(r2)
 4103cb8:	10ffffc4 	addi	r3,r2,-1
 4103cbc:	e0bff917 	ldw	r2,-28(fp)
 4103cc0:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 4103cc4:	e0bff917 	ldw	r2,-28(fp)
 4103cc8:	10c00117 	ldw	r3,4(r2)
 4103ccc:	008003f4 	movhi	r2,15
 4103cd0:	10909004 	addi	r2,r2,16960
 4103cd4:	1887883a 	add	r3,r3,r2
 4103cd8:	e0bff917 	ldw	r2,-28(fp)
 4103cdc:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 4103ce0:	e0bff917 	ldw	r2,-28(fp)
 4103ce4:	10800117 	ldw	r2,4(r2)
 4103ce8:	103fe916 	blt	r2,zero,4103c90 <gettimeofday+0xfc>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 4103cec:	00000c06 	br	4103d20 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 4103cf0:	e0bff917 	ldw	r2,-28(fp)
 4103cf4:	10800017 	ldw	r2,0(r2)
 4103cf8:	10c00044 	addi	r3,r2,1
 4103cfc:	e0bff917 	ldw	r2,-28(fp)
 4103d00:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 4103d04:	e0bff917 	ldw	r2,-28(fp)
 4103d08:	10c00117 	ldw	r3,4(r2)
 4103d0c:	00bffc74 	movhi	r2,65521
 4103d10:	10af7004 	addi	r2,r2,-16960
 4103d14:	1887883a 	add	r3,r3,r2
 4103d18:	e0bff917 	ldw	r2,-28(fp)
 4103d1c:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 4103d20:	e0bff917 	ldw	r2,-28(fp)
 4103d24:	10c00117 	ldw	r3,4(r2)
 4103d28:	008003f4 	movhi	r2,15
 4103d2c:	10908fc4 	addi	r2,r2,16959
 4103d30:	10ffef16 	blt	r2,r3,4103cf0 <gettimeofday+0x15c>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 4103d34:	e0bff617 	ldw	r2,-40(fp)
 4103d38:	10000626 	beq	r2,zero,4103d54 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 4103d3c:	d0e71517 	ldw	r3,-25516(gp)
 4103d40:	e0bff617 	ldw	r2,-40(fp)
 4103d44:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 4103d48:	d0e71617 	ldw	r3,-25512(gp)
 4103d4c:	e0bff617 	ldw	r2,-40(fp)
 4103d50:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 4103d54:	0005883a 	mov	r2,zero
 4103d58:	00000106 	br	4103d60 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 4103d5c:	00bfde84 	movi	r2,-134
}
 4103d60:	e6fffb04 	addi	sp,fp,-20
 4103d64:	dfc00617 	ldw	ra,24(sp)
 4103d68:	df000517 	ldw	fp,20(sp)
 4103d6c:	dd000417 	ldw	r20,16(sp)
 4103d70:	dcc00317 	ldw	r19,12(sp)
 4103d74:	dc800217 	ldw	r18,8(sp)
 4103d78:	dc400117 	ldw	r17,4(sp)
 4103d7c:	dc000017 	ldw	r16,0(sp)
 4103d80:	dec00704 	addi	sp,sp,28
 4103d84:	f800283a 	ret

04103d88 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4103d88:	defff904 	addi	sp,sp,-28
 4103d8c:	dfc00615 	stw	ra,24(sp)
 4103d90:	df000515 	stw	fp,20(sp)
 4103d94:	df000504 	addi	fp,sp,20
 4103d98:	e13ffc15 	stw	r4,-16(fp)
 4103d9c:	e17ffd15 	stw	r5,-12(fp)
 4103da0:	e1bffe15 	stw	r6,-8(fp)
 4103da4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4103da8:	e0800217 	ldw	r2,8(fp)
 4103dac:	d8800015 	stw	r2,0(sp)
 4103db0:	e1ffff17 	ldw	r7,-4(fp)
 4103db4:	e1bffe17 	ldw	r6,-8(fp)
 4103db8:	e17ffd17 	ldw	r5,-12(fp)
 4103dbc:	e13ffc17 	ldw	r4,-16(fp)
 4103dc0:	4103f380 	call	4103f38 <alt_iic_isr_register>
}  
 4103dc4:	e037883a 	mov	sp,fp
 4103dc8:	dfc00117 	ldw	ra,4(sp)
 4103dcc:	df000017 	ldw	fp,0(sp)
 4103dd0:	dec00204 	addi	sp,sp,8
 4103dd4:	f800283a 	ret

04103dd8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4103dd8:	defff904 	addi	sp,sp,-28
 4103ddc:	df000615 	stw	fp,24(sp)
 4103de0:	df000604 	addi	fp,sp,24
 4103de4:	e13ffe15 	stw	r4,-8(fp)
 4103de8:	e17fff15 	stw	r5,-4(fp)
 4103dec:	e0bfff17 	ldw	r2,-4(fp)
 4103df0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4103df4:	0005303a 	rdctl	r2,status
 4103df8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4103dfc:	e0fffb17 	ldw	r3,-20(fp)
 4103e00:	00bfff84 	movi	r2,-2
 4103e04:	1884703a 	and	r2,r3,r2
 4103e08:	1001703a 	wrctl	status,r2
  
  return context;
 4103e0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4103e10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4103e14:	00c00044 	movi	r3,1
 4103e18:	e0bffa17 	ldw	r2,-24(fp)
 4103e1c:	1884983a 	sll	r2,r3,r2
 4103e20:	1007883a 	mov	r3,r2
 4103e24:	d0a71917 	ldw	r2,-25500(gp)
 4103e28:	1884b03a 	or	r2,r3,r2
 4103e2c:	d0a71915 	stw	r2,-25500(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4103e30:	d0a71917 	ldw	r2,-25500(gp)
 4103e34:	100170fa 	wrctl	ienable,r2
 4103e38:	e0bffc17 	ldw	r2,-16(fp)
 4103e3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4103e40:	e0bffd17 	ldw	r2,-12(fp)
 4103e44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4103e48:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4103e4c:	0001883a 	nop
}
 4103e50:	e037883a 	mov	sp,fp
 4103e54:	df000017 	ldw	fp,0(sp)
 4103e58:	dec00104 	addi	sp,sp,4
 4103e5c:	f800283a 	ret

04103e60 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4103e60:	defff904 	addi	sp,sp,-28
 4103e64:	df000615 	stw	fp,24(sp)
 4103e68:	df000604 	addi	fp,sp,24
 4103e6c:	e13ffe15 	stw	r4,-8(fp)
 4103e70:	e17fff15 	stw	r5,-4(fp)
 4103e74:	e0bfff17 	ldw	r2,-4(fp)
 4103e78:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4103e7c:	0005303a 	rdctl	r2,status
 4103e80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4103e84:	e0fffb17 	ldw	r3,-20(fp)
 4103e88:	00bfff84 	movi	r2,-2
 4103e8c:	1884703a 	and	r2,r3,r2
 4103e90:	1001703a 	wrctl	status,r2
  
  return context;
 4103e94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4103e98:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4103e9c:	00c00044 	movi	r3,1
 4103ea0:	e0bffa17 	ldw	r2,-24(fp)
 4103ea4:	1884983a 	sll	r2,r3,r2
 4103ea8:	0084303a 	nor	r2,zero,r2
 4103eac:	1007883a 	mov	r3,r2
 4103eb0:	d0a71917 	ldw	r2,-25500(gp)
 4103eb4:	1884703a 	and	r2,r3,r2
 4103eb8:	d0a71915 	stw	r2,-25500(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4103ebc:	d0a71917 	ldw	r2,-25500(gp)
 4103ec0:	100170fa 	wrctl	ienable,r2
 4103ec4:	e0bffc17 	ldw	r2,-16(fp)
 4103ec8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4103ecc:	e0bffd17 	ldw	r2,-12(fp)
 4103ed0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4103ed4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4103ed8:	0001883a 	nop
}
 4103edc:	e037883a 	mov	sp,fp
 4103ee0:	df000017 	ldw	fp,0(sp)
 4103ee4:	dec00104 	addi	sp,sp,4
 4103ee8:	f800283a 	ret

04103eec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4103eec:	defffc04 	addi	sp,sp,-16
 4103ef0:	df000315 	stw	fp,12(sp)
 4103ef4:	df000304 	addi	fp,sp,12
 4103ef8:	e13ffe15 	stw	r4,-8(fp)
 4103efc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4103f00:	000530fa 	rdctl	r2,ienable
 4103f04:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4103f08:	00c00044 	movi	r3,1
 4103f0c:	e0bfff17 	ldw	r2,-4(fp)
 4103f10:	1884983a 	sll	r2,r3,r2
 4103f14:	1007883a 	mov	r3,r2
 4103f18:	e0bffd17 	ldw	r2,-12(fp)
 4103f1c:	1884703a 	and	r2,r3,r2
 4103f20:	1004c03a 	cmpne	r2,r2,zero
 4103f24:	10803fcc 	andi	r2,r2,255
}
 4103f28:	e037883a 	mov	sp,fp
 4103f2c:	df000017 	ldw	fp,0(sp)
 4103f30:	dec00104 	addi	sp,sp,4
 4103f34:	f800283a 	ret

04103f38 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4103f38:	defff504 	addi	sp,sp,-44
 4103f3c:	dfc00a15 	stw	ra,40(sp)
 4103f40:	df000915 	stw	fp,36(sp)
 4103f44:	df000904 	addi	fp,sp,36
 4103f48:	e13ffc15 	stw	r4,-16(fp)
 4103f4c:	e17ffd15 	stw	r5,-12(fp)
 4103f50:	e1bffe15 	stw	r6,-8(fp)
 4103f54:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4103f58:	00bffa84 	movi	r2,-22
 4103f5c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4103f60:	e0bffd17 	ldw	r2,-12(fp)
 4103f64:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4103f68:	e0bff817 	ldw	r2,-32(fp)
 4103f6c:	10800808 	cmpgei	r2,r2,32
 4103f70:	1000271e 	bne	r2,zero,4104010 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4103f74:	0005303a 	rdctl	r2,status
 4103f78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4103f7c:	e0fffb17 	ldw	r3,-20(fp)
 4103f80:	00bfff84 	movi	r2,-2
 4103f84:	1884703a 	and	r2,r3,r2
 4103f88:	1001703a 	wrctl	status,r2
  
  return context;
 4103f8c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4103f90:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4103f94:	008104b4 	movhi	r2,1042
 4103f98:	10a47104 	addi	r2,r2,-28220
 4103f9c:	e0fff817 	ldw	r3,-32(fp)
 4103fa0:	180690fa 	slli	r3,r3,3
 4103fa4:	10c5883a 	add	r2,r2,r3
 4103fa8:	e0fffe17 	ldw	r3,-8(fp)
 4103fac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4103fb0:	008104b4 	movhi	r2,1042
 4103fb4:	10a47104 	addi	r2,r2,-28220
 4103fb8:	e0fff817 	ldw	r3,-32(fp)
 4103fbc:	180690fa 	slli	r3,r3,3
 4103fc0:	10c5883a 	add	r2,r2,r3
 4103fc4:	10800104 	addi	r2,r2,4
 4103fc8:	e0ffff17 	ldw	r3,-4(fp)
 4103fcc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4103fd0:	e0bffe17 	ldw	r2,-8(fp)
 4103fd4:	10000526 	beq	r2,zero,4103fec <alt_iic_isr_register+0xb4>
 4103fd8:	e0bff817 	ldw	r2,-32(fp)
 4103fdc:	100b883a 	mov	r5,r2
 4103fe0:	e13ffc17 	ldw	r4,-16(fp)
 4103fe4:	4103dd80 	call	4103dd8 <alt_ic_irq_enable>
 4103fe8:	00000406 	br	4103ffc <alt_iic_isr_register+0xc4>
 4103fec:	e0bff817 	ldw	r2,-32(fp)
 4103ff0:	100b883a 	mov	r5,r2
 4103ff4:	e13ffc17 	ldw	r4,-16(fp)
 4103ff8:	4103e600 	call	4103e60 <alt_ic_irq_disable>
 4103ffc:	e0bff715 	stw	r2,-36(fp)
 4104000:	e0bffa17 	ldw	r2,-24(fp)
 4104004:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4104008:	e0bff917 	ldw	r2,-28(fp)
 410400c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4104010:	e0bff717 	ldw	r2,-36(fp)
}
 4104014:	e037883a 	mov	sp,fp
 4104018:	dfc00117 	ldw	ra,4(sp)
 410401c:	df000017 	ldw	fp,0(sp)
 4104020:	dec00204 	addi	sp,sp,8
 4104024:	f800283a 	ret

04104028 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4104028:	defffe04 	addi	sp,sp,-8
 410402c:	dfc00115 	stw	ra,4(sp)
 4104030:	df000015 	stw	fp,0(sp)
 4104034:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4104038:	d0a00917 	ldw	r2,-32732(gp)
 410403c:	10000326 	beq	r2,zero,410404c <alt_get_errno+0x24>
 4104040:	d0a00917 	ldw	r2,-32732(gp)
 4104044:	103ee83a 	callr	r2
 4104048:	00000106 	br	4104050 <alt_get_errno+0x28>
 410404c:	d0a71004 	addi	r2,gp,-25536
}
 4104050:	e037883a 	mov	sp,fp
 4104054:	dfc00117 	ldw	ra,4(sp)
 4104058:	df000017 	ldw	fp,0(sp)
 410405c:	dec00204 	addi	sp,sp,8
 4104060:	f800283a 	ret

04104064 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4104064:	deffed04 	addi	sp,sp,-76
 4104068:	dfc01215 	stw	ra,72(sp)
 410406c:	df001115 	stw	fp,68(sp)
 4104070:	df001104 	addi	fp,sp,68
 4104074:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4104078:	e0bfff17 	ldw	r2,-4(fp)
 410407c:	10000616 	blt	r2,zero,4104098 <isatty+0x34>
 4104080:	e0bfff17 	ldw	r2,-4(fp)
 4104084:	10c00324 	muli	r3,r2,12
 4104088:	00810474 	movhi	r2,1041
 410408c:	10809c04 	addi	r2,r2,624
 4104090:	1885883a 	add	r2,r3,r2
 4104094:	00000106 	br	410409c <isatty+0x38>
 4104098:	0005883a 	mov	r2,zero
 410409c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 41040a0:	e0bfef17 	ldw	r2,-68(fp)
 41040a4:	10000e26 	beq	r2,zero,41040e0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 41040a8:	e0bfef17 	ldw	r2,-68(fp)
 41040ac:	10800017 	ldw	r2,0(r2)
 41040b0:	10800817 	ldw	r2,32(r2)
 41040b4:	1000021e 	bne	r2,zero,41040c0 <isatty+0x5c>
    {
      return 1;
 41040b8:	00800044 	movi	r2,1
 41040bc:	00000d06 	br	41040f4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 41040c0:	e0bff004 	addi	r2,fp,-64
 41040c4:	100b883a 	mov	r5,r2
 41040c8:	e13fff17 	ldw	r4,-4(fp)
 41040cc:	4103ae40 	call	4103ae4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 41040d0:	e0bff117 	ldw	r2,-60(fp)
 41040d4:	10880020 	cmpeqi	r2,r2,8192
 41040d8:	10803fcc 	andi	r2,r2,255
 41040dc:	00000506 	br	41040f4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 41040e0:	41040280 	call	4104028 <alt_get_errno>
 41040e4:	1007883a 	mov	r3,r2
 41040e8:	00801444 	movi	r2,81
 41040ec:	18800015 	stw	r2,0(r3)
    return 0;
 41040f0:	0005883a 	mov	r2,zero
  }
}
 41040f4:	e037883a 	mov	sp,fp
 41040f8:	dfc00117 	ldw	ra,4(sp)
 41040fc:	df000017 	ldw	fp,0(sp)
 4104100:	dec00204 	addi	sp,sp,8
 4104104:	f800283a 	ret

04104108 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4104108:	defffc04 	addi	sp,sp,-16
 410410c:	df000315 	stw	fp,12(sp)
 4104110:	df000304 	addi	fp,sp,12
 4104114:	e13ffd15 	stw	r4,-12(fp)
 4104118:	e17ffe15 	stw	r5,-8(fp)
 410411c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4104120:	e0fffe17 	ldw	r3,-8(fp)
 4104124:	e0bffd17 	ldw	r2,-12(fp)
 4104128:	18800c26 	beq	r3,r2,410415c <alt_load_section+0x54>
  {
    while( to != end )
 410412c:	00000806 	br	4104150 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4104130:	e0bffe17 	ldw	r2,-8(fp)
 4104134:	10c00104 	addi	r3,r2,4
 4104138:	e0fffe15 	stw	r3,-8(fp)
 410413c:	e0fffd17 	ldw	r3,-12(fp)
 4104140:	19000104 	addi	r4,r3,4
 4104144:	e13ffd15 	stw	r4,-12(fp)
 4104148:	18c00017 	ldw	r3,0(r3)
 410414c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4104150:	e0fffe17 	ldw	r3,-8(fp)
 4104154:	e0bfff17 	ldw	r2,-4(fp)
 4104158:	18bff51e 	bne	r3,r2,4104130 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 410415c:	0001883a 	nop
 4104160:	e037883a 	mov	sp,fp
 4104164:	df000017 	ldw	fp,0(sp)
 4104168:	dec00104 	addi	sp,sp,4
 410416c:	f800283a 	ret

04104170 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4104170:	defffe04 	addi	sp,sp,-8
 4104174:	dfc00115 	stw	ra,4(sp)
 4104178:	df000015 	stw	fp,0(sp)
 410417c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4104180:	01810474 	movhi	r6,1041
 4104184:	31856004 	addi	r6,r6,5504
 4104188:	01410474 	movhi	r5,1041
 410418c:	297e8704 	addi	r5,r5,-1508
 4104190:	01010474 	movhi	r4,1041
 4104194:	21056004 	addi	r4,r4,5504
 4104198:	41041080 	call	4104108 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 410419c:	01810434 	movhi	r6,1040
 41041a0:	31809104 	addi	r6,r6,580
 41041a4:	01410434 	movhi	r5,1040
 41041a8:	29400804 	addi	r5,r5,32
 41041ac:	01010434 	movhi	r4,1040
 41041b0:	21000804 	addi	r4,r4,32
 41041b4:	41041080 	call	4104108 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 41041b8:	01810474 	movhi	r6,1041
 41041bc:	31be8704 	addi	r6,r6,-1508
 41041c0:	01410474 	movhi	r5,1041
 41041c4:	297dde04 	addi	r5,r5,-2184
 41041c8:	01010474 	movhi	r4,1041
 41041cc:	213dde04 	addi	r4,r4,-2184
 41041d0:	41041080 	call	4104108 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 41041d4:	410e1e00 	call	410e1e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 41041d8:	410e4580 	call	410e458 <alt_icache_flush_all>
}
 41041dc:	0001883a 	nop
 41041e0:	e037883a 	mov	sp,fp
 41041e4:	dfc00117 	ldw	ra,4(sp)
 41041e8:	df000017 	ldw	fp,0(sp)
 41041ec:	dec00204 	addi	sp,sp,8
 41041f0:	f800283a 	ret

041041f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 41041f4:	defffe04 	addi	sp,sp,-8
 41041f8:	dfc00115 	stw	ra,4(sp)
 41041fc:	df000015 	stw	fp,0(sp)
 4104200:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4104204:	d0a00917 	ldw	r2,-32732(gp)
 4104208:	10000326 	beq	r2,zero,4104218 <alt_get_errno+0x24>
 410420c:	d0a00917 	ldw	r2,-32732(gp)
 4104210:	103ee83a 	callr	r2
 4104214:	00000106 	br	410421c <alt_get_errno+0x28>
 4104218:	d0a71004 	addi	r2,gp,-25536
}
 410421c:	e037883a 	mov	sp,fp
 4104220:	dfc00117 	ldw	ra,4(sp)
 4104224:	df000017 	ldw	fp,0(sp)
 4104228:	dec00204 	addi	sp,sp,8
 410422c:	f800283a 	ret

04104230 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4104230:	defff904 	addi	sp,sp,-28
 4104234:	dfc00615 	stw	ra,24(sp)
 4104238:	df000515 	stw	fp,20(sp)
 410423c:	df000504 	addi	fp,sp,20
 4104240:	e13ffd15 	stw	r4,-12(fp)
 4104244:	e17ffe15 	stw	r5,-8(fp)
 4104248:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 410424c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4104250:	e0bffd17 	ldw	r2,-12(fp)
 4104254:	10000616 	blt	r2,zero,4104270 <lseek+0x40>
 4104258:	e0bffd17 	ldw	r2,-12(fp)
 410425c:	10c00324 	muli	r3,r2,12
 4104260:	00810474 	movhi	r2,1041
 4104264:	10809c04 	addi	r2,r2,624
 4104268:	1885883a 	add	r2,r3,r2
 410426c:	00000106 	br	4104274 <lseek+0x44>
 4104270:	0005883a 	mov	r2,zero
 4104274:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4104278:	e0bffc17 	ldw	r2,-16(fp)
 410427c:	10001026 	beq	r2,zero,41042c0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4104280:	e0bffc17 	ldw	r2,-16(fp)
 4104284:	10800017 	ldw	r2,0(r2)
 4104288:	10800717 	ldw	r2,28(r2)
 410428c:	10000926 	beq	r2,zero,41042b4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4104290:	e0bffc17 	ldw	r2,-16(fp)
 4104294:	10800017 	ldw	r2,0(r2)
 4104298:	10800717 	ldw	r2,28(r2)
 410429c:	e1bfff17 	ldw	r6,-4(fp)
 41042a0:	e17ffe17 	ldw	r5,-8(fp)
 41042a4:	e13ffc17 	ldw	r4,-16(fp)
 41042a8:	103ee83a 	callr	r2
 41042ac:	e0bffb15 	stw	r2,-20(fp)
 41042b0:	00000506 	br	41042c8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 41042b4:	00bfde84 	movi	r2,-134
 41042b8:	e0bffb15 	stw	r2,-20(fp)
 41042bc:	00000206 	br	41042c8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 41042c0:	00bfebc4 	movi	r2,-81
 41042c4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 41042c8:	e0bffb17 	ldw	r2,-20(fp)
 41042cc:	1000070e 	bge	r2,zero,41042ec <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 41042d0:	41041f40 	call	41041f4 <alt_get_errno>
 41042d4:	1007883a 	mov	r3,r2
 41042d8:	e0bffb17 	ldw	r2,-20(fp)
 41042dc:	0085c83a 	sub	r2,zero,r2
 41042e0:	18800015 	stw	r2,0(r3)
    rc = -1;
 41042e4:	00bfffc4 	movi	r2,-1
 41042e8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 41042ec:	e0bffb17 	ldw	r2,-20(fp)
}
 41042f0:	e037883a 	mov	sp,fp
 41042f4:	dfc00117 	ldw	ra,4(sp)
 41042f8:	df000017 	ldw	fp,0(sp)
 41042fc:	dec00204 	addi	sp,sp,8
 4104300:	f800283a 	ret

04104304 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4104304:	defff904 	addi	sp,sp,-28
 4104308:	dfc00615 	stw	ra,24(sp)
 410430c:	df000515 	stw	fp,20(sp)
 4104310:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4104314:	0009883a 	mov	r4,zero
 4104318:	410c4d00 	call	410c4d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 410431c:	41054640 	call	4105464 <OSInit>
 4104320:	01000044 	movi	r4,1
 4104324:	4109db40 	call	4109db4 <OSSemCreate>
 4104328:	d0a72015 	stw	r2,-25472(gp)
 410432c:	01000044 	movi	r4,1
 4104330:	4109db40 	call	4109db4 <OSSemCreate>
 4104334:	d0a72215 	stw	r2,-25464(gp)
 4104338:	d0a71404 	addi	r2,gp,-25520
 410433c:	e0bffc15 	stw	r2,-16(fp)
 4104340:	00800044 	movi	r2,1
 4104344:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 4104348:	e0bffd0b 	ldhu	r2,-12(fp)
 410434c:	1009883a 	mov	r4,r2
 4104350:	4109db40 	call	4109db4 <OSSemCreate>
 4104354:	1007883a 	mov	r3,r2
 4104358:	e0bffc17 	ldw	r2,-16(fp)
 410435c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4104360:	410c5080 	call	410c508 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4104364:	01810474 	movhi	r6,1041
 4104368:	31bdea04 	addi	r6,r6,-2136
 410436c:	01410474 	movhi	r5,1041
 4104370:	297dea04 	addi	r5,r5,-2136
 4104374:	01010474 	movhi	r4,1041
 4104378:	213dea04 	addi	r4,r4,-2136
 410437c:	410e5ec0 	call	410e5ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4104380:	410e3080 	call	410e308 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4104384:	01010474 	movhi	r4,1041
 4104388:	2138da04 	addi	r4,r4,-7320
 410438c:	410eeac0 	call	410eeac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4104390:	d0a71a17 	ldw	r2,-25496(gp)
 4104394:	d0e71b17 	ldw	r3,-25492(gp)
 4104398:	d1271c17 	ldw	r4,-25488(gp)
 410439c:	200d883a 	mov	r6,r4
 41043a0:	180b883a 	mov	r5,r3
 41043a4:	1009883a 	mov	r4,r2
 41043a8:	41009600 	call	4100960 <main>
 41043ac:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 41043b0:	01000044 	movi	r4,1
 41043b4:	41039ac0 	call	41039ac <close>
  exit (result);
 41043b8:	e13ffb17 	ldw	r4,-20(fp)
 41043bc:	410eec00 	call	410eec0 <exit>

041043c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 41043c0:	defffe04 	addi	sp,sp,-8
 41043c4:	dfc00115 	stw	ra,4(sp)
 41043c8:	df000015 	stw	fp,0(sp)
 41043cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 41043d0:	d0a00917 	ldw	r2,-32732(gp)
 41043d4:	10000326 	beq	r2,zero,41043e4 <alt_get_errno+0x24>
 41043d8:	d0a00917 	ldw	r2,-32732(gp)
 41043dc:	103ee83a 	callr	r2
 41043e0:	00000106 	br	41043e8 <alt_get_errno+0x28>
 41043e4:	d0a71004 	addi	r2,gp,-25536
}
 41043e8:	e037883a 	mov	sp,fp
 41043ec:	dfc00117 	ldw	ra,4(sp)
 41043f0:	df000017 	ldw	fp,0(sp)
 41043f4:	dec00204 	addi	sp,sp,8
 41043f8:	f800283a 	ret

041043fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 41043fc:	defff904 	addi	sp,sp,-28
 4104400:	dfc00615 	stw	ra,24(sp)
 4104404:	df000515 	stw	fp,20(sp)
 4104408:	df000504 	addi	fp,sp,20
 410440c:	e13ffd15 	stw	r4,-12(fp)
 4104410:	e17ffe15 	stw	r5,-8(fp)
 4104414:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4104418:	e0bffd17 	ldw	r2,-12(fp)
 410441c:	10000616 	blt	r2,zero,4104438 <read+0x3c>
 4104420:	e0bffd17 	ldw	r2,-12(fp)
 4104424:	10c00324 	muli	r3,r2,12
 4104428:	00810474 	movhi	r2,1041
 410442c:	10809c04 	addi	r2,r2,624
 4104430:	1885883a 	add	r2,r3,r2
 4104434:	00000106 	br	410443c <read+0x40>
 4104438:	0005883a 	mov	r2,zero
 410443c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4104440:	e0bffb17 	ldw	r2,-20(fp)
 4104444:	10002226 	beq	r2,zero,41044d0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4104448:	e0bffb17 	ldw	r2,-20(fp)
 410444c:	10800217 	ldw	r2,8(r2)
 4104450:	108000cc 	andi	r2,r2,3
 4104454:	10800060 	cmpeqi	r2,r2,1
 4104458:	1000181e 	bne	r2,zero,41044bc <read+0xc0>
        (fd->dev->read))
 410445c:	e0bffb17 	ldw	r2,-20(fp)
 4104460:	10800017 	ldw	r2,0(r2)
 4104464:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4104468:	10001426 	beq	r2,zero,41044bc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 410446c:	e0bffb17 	ldw	r2,-20(fp)
 4104470:	10800017 	ldw	r2,0(r2)
 4104474:	10800517 	ldw	r2,20(r2)
 4104478:	e0ffff17 	ldw	r3,-4(fp)
 410447c:	180d883a 	mov	r6,r3
 4104480:	e17ffe17 	ldw	r5,-8(fp)
 4104484:	e13ffb17 	ldw	r4,-20(fp)
 4104488:	103ee83a 	callr	r2
 410448c:	e0bffc15 	stw	r2,-16(fp)
 4104490:	e0bffc17 	ldw	r2,-16(fp)
 4104494:	1000070e 	bge	r2,zero,41044b4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4104498:	41043c00 	call	41043c0 <alt_get_errno>
 410449c:	1007883a 	mov	r3,r2
 41044a0:	e0bffc17 	ldw	r2,-16(fp)
 41044a4:	0085c83a 	sub	r2,zero,r2
 41044a8:	18800015 	stw	r2,0(r3)
          return -1;
 41044ac:	00bfffc4 	movi	r2,-1
 41044b0:	00000c06 	br	41044e4 <read+0xe8>
        }
        return rval;
 41044b4:	e0bffc17 	ldw	r2,-16(fp)
 41044b8:	00000a06 	br	41044e4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 41044bc:	41043c00 	call	41043c0 <alt_get_errno>
 41044c0:	1007883a 	mov	r3,r2
 41044c4:	00800344 	movi	r2,13
 41044c8:	18800015 	stw	r2,0(r3)
 41044cc:	00000406 	br	41044e0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 41044d0:	41043c00 	call	41043c0 <alt_get_errno>
 41044d4:	1007883a 	mov	r3,r2
 41044d8:	00801444 	movi	r2,81
 41044dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 41044e0:	00bfffc4 	movi	r2,-1
}
 41044e4:	e037883a 	mov	sp,fp
 41044e8:	dfc00117 	ldw	ra,4(sp)
 41044ec:	df000017 	ldw	fp,0(sp)
 41044f0:	dec00204 	addi	sp,sp,8
 41044f4:	f800283a 	ret

041044f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 41044f8:	defffe04 	addi	sp,sp,-8
 41044fc:	df000115 	stw	fp,4(sp)
 4104500:	df000104 	addi	fp,sp,4
 4104504:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4104508:	e0bfff17 	ldw	r2,-4(fp)
 410450c:	108000d0 	cmplti	r2,r2,3
 4104510:	10000d1e 	bne	r2,zero,4104548 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4104514:	00810474 	movhi	r2,1041
 4104518:	10809c04 	addi	r2,r2,624
 410451c:	e0ffff17 	ldw	r3,-4(fp)
 4104520:	18c00324 	muli	r3,r3,12
 4104524:	10c5883a 	add	r2,r2,r3
 4104528:	10800204 	addi	r2,r2,8
 410452c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4104530:	00810474 	movhi	r2,1041
 4104534:	10809c04 	addi	r2,r2,624
 4104538:	e0ffff17 	ldw	r3,-4(fp)
 410453c:	18c00324 	muli	r3,r3,12
 4104540:	10c5883a 	add	r2,r2,r3
 4104544:	10000015 	stw	zero,0(r2)
  }
}
 4104548:	0001883a 	nop
 410454c:	e037883a 	mov	sp,fp
 4104550:	df000017 	ldw	fp,0(sp)
 4104554:	dec00104 	addi	sp,sp,4
 4104558:	f800283a 	ret

0410455c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 410455c:	defff904 	addi	sp,sp,-28
 4104560:	df000615 	stw	fp,24(sp)
 4104564:	df000604 	addi	fp,sp,24
 4104568:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410456c:	0005303a 	rdctl	r2,status
 4104570:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4104574:	e0fffe17 	ldw	r3,-8(fp)
 4104578:	00bfff84 	movi	r2,-2
 410457c:	1884703a 	and	r2,r3,r2
 4104580:	1001703a 	wrctl	status,r2
  
  return context;
 4104584:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4104588:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 410458c:	d0a00b17 	ldw	r2,-32724(gp)
 4104590:	10c000c4 	addi	r3,r2,3
 4104594:	00bfff04 	movi	r2,-4
 4104598:	1884703a 	and	r2,r3,r2
 410459c:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 41045a0:	d0e00b17 	ldw	r3,-32724(gp)
 41045a4:	e0bfff17 	ldw	r2,-4(fp)
 41045a8:	1887883a 	add	r3,r3,r2
 41045ac:	00820034 	movhi	r2,2048
 41045b0:	10800004 	addi	r2,r2,0
 41045b4:	10c0062e 	bgeu	r2,r3,41045d0 <sbrk+0x74>
 41045b8:	e0bffb17 	ldw	r2,-20(fp)
 41045bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41045c0:	e0bffa17 	ldw	r2,-24(fp)
 41045c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 41045c8:	00bfffc4 	movi	r2,-1
 41045cc:	00000b06 	br	41045fc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 41045d0:	d0a00b17 	ldw	r2,-32724(gp)
 41045d4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 41045d8:	d0e00b17 	ldw	r3,-32724(gp)
 41045dc:	e0bfff17 	ldw	r2,-4(fp)
 41045e0:	1885883a 	add	r2,r3,r2
 41045e4:	d0a00b15 	stw	r2,-32724(gp)
 41045e8:	e0bffb17 	ldw	r2,-20(fp)
 41045ec:	e0bffc15 	stw	r2,-16(fp)
 41045f0:	e0bffc17 	ldw	r2,-16(fp)
 41045f4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 41045f8:	e0bffd17 	ldw	r2,-12(fp)
} 
 41045fc:	e037883a 	mov	sp,fp
 4104600:	df000017 	ldw	fp,0(sp)
 4104604:	dec00104 	addi	sp,sp,4
 4104608:	f800283a 	ret

0410460c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 410460c:	defffa04 	addi	sp,sp,-24
 4104610:	df000515 	stw	fp,20(sp)
 4104614:	df000504 	addi	fp,sp,20
 4104618:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410461c:	0005303a 	rdctl	r2,status
 4104620:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4104624:	e0fffc17 	ldw	r3,-16(fp)
 4104628:	00bfff84 	movi	r2,-2
 410462c:	1884703a 	and	r2,r3,r2
 4104630:	1001703a 	wrctl	status,r2
  
  return context;
 4104634:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4104638:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 410463c:	e0bfff17 	ldw	r2,-4(fp)
 4104640:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4104644:	e0bffd17 	ldw	r2,-12(fp)
 4104648:	10800017 	ldw	r2,0(r2)
 410464c:	e0fffd17 	ldw	r3,-12(fp)
 4104650:	18c00117 	ldw	r3,4(r3)
 4104654:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4104658:	e0bffd17 	ldw	r2,-12(fp)
 410465c:	10800117 	ldw	r2,4(r2)
 4104660:	e0fffd17 	ldw	r3,-12(fp)
 4104664:	18c00017 	ldw	r3,0(r3)
 4104668:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 410466c:	e0bffd17 	ldw	r2,-12(fp)
 4104670:	e0fffd17 	ldw	r3,-12(fp)
 4104674:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4104678:	e0bffd17 	ldw	r2,-12(fp)
 410467c:	e0fffd17 	ldw	r3,-12(fp)
 4104680:	10c00015 	stw	r3,0(r2)
 4104684:	e0bffb17 	ldw	r2,-20(fp)
 4104688:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410468c:	e0bffe17 	ldw	r2,-8(fp)
 4104690:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4104694:	0001883a 	nop
 4104698:	e037883a 	mov	sp,fp
 410469c:	df000017 	ldw	fp,0(sp)
 41046a0:	dec00104 	addi	sp,sp,4
 41046a4:	f800283a 	ret

041046a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 41046a8:	defffb04 	addi	sp,sp,-20
 41046ac:	dfc00415 	stw	ra,16(sp)
 41046b0:	df000315 	stw	fp,12(sp)
 41046b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 41046b8:	d0a00c17 	ldw	r2,-32720(gp)
 41046bc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 41046c0:	d0a71e17 	ldw	r2,-25480(gp)
 41046c4:	10800044 	addi	r2,r2,1
 41046c8:	d0a71e15 	stw	r2,-25480(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 41046cc:	00002e06 	br	4104788 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 41046d0:	e0bffd17 	ldw	r2,-12(fp)
 41046d4:	10800017 	ldw	r2,0(r2)
 41046d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 41046dc:	e0bffd17 	ldw	r2,-12(fp)
 41046e0:	10800403 	ldbu	r2,16(r2)
 41046e4:	10803fcc 	andi	r2,r2,255
 41046e8:	10000426 	beq	r2,zero,41046fc <alt_tick+0x54>
 41046ec:	d0a71e17 	ldw	r2,-25480(gp)
 41046f0:	1000021e 	bne	r2,zero,41046fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 41046f4:	e0bffd17 	ldw	r2,-12(fp)
 41046f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 41046fc:	e0bffd17 	ldw	r2,-12(fp)
 4104700:	10800217 	ldw	r2,8(r2)
 4104704:	d0e71e17 	ldw	r3,-25480(gp)
 4104708:	18801d36 	bltu	r3,r2,4104780 <alt_tick+0xd8>
 410470c:	e0bffd17 	ldw	r2,-12(fp)
 4104710:	10800403 	ldbu	r2,16(r2)
 4104714:	10803fcc 	andi	r2,r2,255
 4104718:	1000191e 	bne	r2,zero,4104780 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 410471c:	e0bffd17 	ldw	r2,-12(fp)
 4104720:	10800317 	ldw	r2,12(r2)
 4104724:	e0fffd17 	ldw	r3,-12(fp)
 4104728:	18c00517 	ldw	r3,20(r3)
 410472c:	1809883a 	mov	r4,r3
 4104730:	103ee83a 	callr	r2
 4104734:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4104738:	e0bfff17 	ldw	r2,-4(fp)
 410473c:	1000031e 	bne	r2,zero,410474c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4104740:	e13ffd17 	ldw	r4,-12(fp)
 4104744:	410460c0 	call	410460c <alt_alarm_stop>
 4104748:	00000d06 	br	4104780 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 410474c:	e0bffd17 	ldw	r2,-12(fp)
 4104750:	10c00217 	ldw	r3,8(r2)
 4104754:	e0bfff17 	ldw	r2,-4(fp)
 4104758:	1887883a 	add	r3,r3,r2
 410475c:	e0bffd17 	ldw	r2,-12(fp)
 4104760:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4104764:	e0bffd17 	ldw	r2,-12(fp)
 4104768:	10c00217 	ldw	r3,8(r2)
 410476c:	d0a71e17 	ldw	r2,-25480(gp)
 4104770:	1880032e 	bgeu	r3,r2,4104780 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4104774:	e0bffd17 	ldw	r2,-12(fp)
 4104778:	00c00044 	movi	r3,1
 410477c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4104780:	e0bffe17 	ldw	r2,-8(fp)
 4104784:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4104788:	e0fffd17 	ldw	r3,-12(fp)
 410478c:	d0a00c04 	addi	r2,gp,-32720
 4104790:	18bfcf1e 	bne	r3,r2,41046d0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4104794:	41058880 	call	4105888 <OSTimeTick>
}
 4104798:	0001883a 	nop
 410479c:	e037883a 	mov	sp,fp
 41047a0:	dfc00117 	ldw	ra,4(sp)
 41047a4:	df000017 	ldw	fp,0(sp)
 41047a8:	dec00204 	addi	sp,sp,8
 41047ac:	f800283a 	ret

041047b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 41047b0:	defffe04 	addi	sp,sp,-8
 41047b4:	dfc00115 	stw	ra,4(sp)
 41047b8:	df000015 	stw	fp,0(sp)
 41047bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 41047c0:	d0a00917 	ldw	r2,-32732(gp)
 41047c4:	10000326 	beq	r2,zero,41047d4 <alt_get_errno+0x24>
 41047c8:	d0a00917 	ldw	r2,-32732(gp)
 41047cc:	103ee83a 	callr	r2
 41047d0:	00000106 	br	41047d8 <alt_get_errno+0x28>
 41047d4:	d0a71004 	addi	r2,gp,-25536
}
 41047d8:	e037883a 	mov	sp,fp
 41047dc:	dfc00117 	ldw	ra,4(sp)
 41047e0:	df000017 	ldw	fp,0(sp)
 41047e4:	dec00204 	addi	sp,sp,8
 41047e8:	f800283a 	ret

041047ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 41047ec:	defff904 	addi	sp,sp,-28
 41047f0:	dfc00615 	stw	ra,24(sp)
 41047f4:	df000515 	stw	fp,20(sp)
 41047f8:	df000504 	addi	fp,sp,20
 41047fc:	e13ffd15 	stw	r4,-12(fp)
 4104800:	e17ffe15 	stw	r5,-8(fp)
 4104804:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4104808:	e0bffd17 	ldw	r2,-12(fp)
 410480c:	10000616 	blt	r2,zero,4104828 <write+0x3c>
 4104810:	e0bffd17 	ldw	r2,-12(fp)
 4104814:	10c00324 	muli	r3,r2,12
 4104818:	00810474 	movhi	r2,1041
 410481c:	10809c04 	addi	r2,r2,624
 4104820:	1885883a 	add	r2,r3,r2
 4104824:	00000106 	br	410482c <write+0x40>
 4104828:	0005883a 	mov	r2,zero
 410482c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4104830:	e0bffb17 	ldw	r2,-20(fp)
 4104834:	10002126 	beq	r2,zero,41048bc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4104838:	e0bffb17 	ldw	r2,-20(fp)
 410483c:	10800217 	ldw	r2,8(r2)
 4104840:	108000cc 	andi	r2,r2,3
 4104844:	10001826 	beq	r2,zero,41048a8 <write+0xbc>
 4104848:	e0bffb17 	ldw	r2,-20(fp)
 410484c:	10800017 	ldw	r2,0(r2)
 4104850:	10800617 	ldw	r2,24(r2)
 4104854:	10001426 	beq	r2,zero,41048a8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4104858:	e0bffb17 	ldw	r2,-20(fp)
 410485c:	10800017 	ldw	r2,0(r2)
 4104860:	10800617 	ldw	r2,24(r2)
 4104864:	e0ffff17 	ldw	r3,-4(fp)
 4104868:	180d883a 	mov	r6,r3
 410486c:	e17ffe17 	ldw	r5,-8(fp)
 4104870:	e13ffb17 	ldw	r4,-20(fp)
 4104874:	103ee83a 	callr	r2
 4104878:	e0bffc15 	stw	r2,-16(fp)
 410487c:	e0bffc17 	ldw	r2,-16(fp)
 4104880:	1000070e 	bge	r2,zero,41048a0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4104884:	41047b00 	call	41047b0 <alt_get_errno>
 4104888:	1007883a 	mov	r3,r2
 410488c:	e0bffc17 	ldw	r2,-16(fp)
 4104890:	0085c83a 	sub	r2,zero,r2
 4104894:	18800015 	stw	r2,0(r3)
        return -1;
 4104898:	00bfffc4 	movi	r2,-1
 410489c:	00000c06 	br	41048d0 <write+0xe4>
      }
      return rval;
 41048a0:	e0bffc17 	ldw	r2,-16(fp)
 41048a4:	00000a06 	br	41048d0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 41048a8:	41047b00 	call	41047b0 <alt_get_errno>
 41048ac:	1007883a 	mov	r3,r2
 41048b0:	00800344 	movi	r2,13
 41048b4:	18800015 	stw	r2,0(r3)
 41048b8:	00000406 	br	41048cc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 41048bc:	41047b00 	call	41047b0 <alt_get_errno>
 41048c0:	1007883a 	mov	r3,r2
 41048c4:	00801444 	movi	r2,81
 41048c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 41048cc:	00bfffc4 	movi	r2,-1
}
 41048d0:	e037883a 	mov	sp,fp
 41048d4:	dfc00117 	ldw	ra,4(sp)
 41048d8:	df000017 	ldw	fp,0(sp)
 41048dc:	dec00204 	addi	sp,sp,8
 41048e0:	f800283a 	ret

041048e4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 41048e4:	deffdf04 	addi	sp,sp,-132
 41048e8:	dfc02015 	stw	ra,128(sp)
 41048ec:	df001f15 	stw	fp,124(sp)
 41048f0:	df001f04 	addi	fp,sp,124
 41048f4:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 41048f8:	e0bfe204 	addi	r2,fp,-120
 41048fc:	100b883a 	mov	r5,r2
 4104900:	01003fc4 	movi	r4,255
 4104904:	410bd3c0 	call	410bd3c <OSTaskQuery>
 4104908:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 410490c:	e0bffe83 	ldbu	r2,-6(fp)
 4104910:	10803fcc 	andi	r2,r2,255
 4104914:	10001e1e 	bne	r2,zero,4104990 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 4104918:	e0bfee83 	ldbu	r2,-70(fp)
 410491c:	10803fcc 	andi	r2,r2,255
 4104920:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 4104924:	d0a72017 	ldw	r2,-25472(gp)
 4104928:	e0fffd04 	addi	r3,fp,-12
 410492c:	180b883a 	mov	r5,r3
 4104930:	1009883a 	mov	r4,r2
 4104934:	410a5540 	call	410a554 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 4104938:	e0bffe43 	ldbu	r2,-7(fp)
 410493c:	10803fcc 	andi	r2,r2,255
 4104940:	10000726 	beq	r2,zero,4104960 <__env_lock+0x7c>
 4104944:	d0a00e17 	ldw	r2,-32712(gp)
 4104948:	e0ffe117 	ldw	r3,-124(fp)
 410494c:	1880041e 	bne	r3,r2,4104960 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 4104950:	d0a71f17 	ldw	r2,-25476(gp)
 4104954:	10800044 	addi	r2,r2,1
 4104958:	d0a71f15 	stw	r2,-25476(gp)
 410495c:	00000a06 	br	4104988 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 4104960:	d0a72017 	ldw	r2,-25472(gp)
 4104964:	e0fffe84 	addi	r3,fp,-6
 4104968:	180d883a 	mov	r6,r3
 410496c:	000b883a 	mov	r5,zero
 4104970:	1009883a 	mov	r4,r2
 4104974:	410a0cc0 	call	410a0cc <OSSemPend>
    locks  = 1;
 4104978:	00800044 	movi	r2,1
 410497c:	d0a71f15 	stw	r2,-25476(gp)
    lockid = id;
 4104980:	e0bfe117 	ldw	r2,-124(fp)
 4104984:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 4104988:	0001883a 	nop
 410498c:	00000106 	br	4104994 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 4104990:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 4104994:	e037883a 	mov	sp,fp
 4104998:	dfc00117 	ldw	ra,4(sp)
 410499c:	df000017 	ldw	fp,0(sp)
 41049a0:	dec00204 	addi	sp,sp,8
 41049a4:	f800283a 	ret

041049a8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 41049a8:	defffd04 	addi	sp,sp,-12
 41049ac:	dfc00215 	stw	ra,8(sp)
 41049b0:	df000115 	stw	fp,4(sp)
 41049b4:	df000104 	addi	fp,sp,4
 41049b8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 41049bc:	d0a71f17 	ldw	r2,-25476(gp)
 41049c0:	10000b26 	beq	r2,zero,41049f0 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 41049c4:	d0a71f17 	ldw	r2,-25476(gp)
 41049c8:	10bfffc4 	addi	r2,r2,-1
 41049cc:	d0a71f15 	stw	r2,-25476(gp)
 41049d0:	d0a71f17 	ldw	r2,-25476(gp)
 41049d4:	1000071e 	bne	r2,zero,41049f4 <__env_unlock+0x4c>
  {
    lockid = -1;
 41049d8:	00bfffc4 	movi	r2,-1
 41049dc:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
 41049e0:	d0a72017 	ldw	r2,-25472(gp)
 41049e4:	1009883a 	mov	r4,r2
 41049e8:	410a4440 	call	410a444 <OSSemPost>
 41049ec:	00000106 	br	41049f4 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 41049f0:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 41049f4:	e037883a 	mov	sp,fp
 41049f8:	dfc00117 	ldw	ra,4(sp)
 41049fc:	df000017 	ldw	fp,0(sp)
 4104a00:	dec00204 	addi	sp,sp,8
 4104a04:	f800283a 	ret

04104a08 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 4104a08:	deffdb04 	addi	sp,sp,-148
 4104a0c:	dfc02415 	stw	ra,144(sp)
 4104a10:	df002315 	stw	fp,140(sp)
 4104a14:	df002304 	addi	fp,sp,140
 4104a18:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4104a1c:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 4104a20:	d0a72343 	ldbu	r2,-25459(gp)
 4104a24:	10803fcc 	andi	r2,r2,255
 4104a28:	10800060 	cmpeqi	r2,r2,1
 4104a2c:	10003626 	beq	r2,zero,4104b08 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 4104a30:	e0bfe204 	addi	r2,fp,-120
 4104a34:	100b883a 	mov	r5,r2
 4104a38:	01003fc4 	movi	r4,255
 4104a3c:	410bd3c0 	call	410bd3c <OSTaskQuery>
 4104a40:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 4104a44:	e0bffe83 	ldbu	r2,-6(fp)
 4104a48:	10803fcc 	andi	r2,r2,255
 4104a4c:	1000301e 	bne	r2,zero,4104b10 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 4104a50:	e0bfee83 	ldbu	r2,-70(fp)
 4104a54:	10803fcc 	andi	r2,r2,255
 4104a58:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 4104a5c:	d0a72217 	ldw	r2,-25464(gp)
 4104a60:	e0fffd04 	addi	r3,fp,-12
 4104a64:	180b883a 	mov	r5,r3
 4104a68:	1009883a 	mov	r4,r2
 4104a6c:	410a5540 	call	410a554 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4104a70:	0005303a 	rdctl	r2,status
 4104a74:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4104a78:	e0ffe117 	ldw	r3,-124(fp)
 4104a7c:	00bfff84 	movi	r2,-2
 4104a80:	1884703a 	and	r2,r3,r2
 4104a84:	1001703a 	wrctl	status,r2
  
  return context;
 4104a88:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 4104a8c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 4104a90:	e0bffd0b 	ldhu	r2,-12(fp)
 4104a94:	10bfffcc 	andi	r2,r2,65535
 4104a98:	10000b1e 	bne	r2,zero,4104ac8 <__malloc_lock+0xc0>
 4104a9c:	d0a00f17 	ldw	r2,-32708(gp)
 4104aa0:	e0ffde17 	ldw	r3,-136(fp)
 4104aa4:	1880081e 	bne	r3,r2,4104ac8 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 4104aa8:	d0a72117 	ldw	r2,-25468(gp)
 4104aac:	10800044 	addi	r2,r2,1
 4104ab0:	d0a72115 	stw	r2,-25468(gp)
 4104ab4:	e0bfdd17 	ldw	r2,-140(fp)
 4104ab8:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4104abc:	e0bfdf17 	ldw	r2,-132(fp)
 4104ac0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 4104ac4:	00000e06 	br	4104b00 <__malloc_lock+0xf8>
 4104ac8:	e0bfdd17 	ldw	r2,-140(fp)
 4104acc:	e0bfe015 	stw	r2,-128(fp)
 4104ad0:	e0bfe017 	ldw	r2,-128(fp)
 4104ad4:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 4104ad8:	d0a72217 	ldw	r2,-25464(gp)
 4104adc:	e0fffe84 	addi	r3,fp,-6
 4104ae0:	180d883a 	mov	r6,r3
 4104ae4:	000b883a 	mov	r5,zero
 4104ae8:	1009883a 	mov	r4,r2
 4104aec:	410a0cc0 	call	410a0cc <OSSemPend>
    locks  = 1;
 4104af0:	00800044 	movi	r2,1
 4104af4:	d0a72115 	stw	r2,-25468(gp)
    lockid = id;
 4104af8:	e0bfde17 	ldw	r2,-136(fp)
 4104afc:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 4104b00:	0001883a 	nop
 4104b04:	00000306 	br	4104b14 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 4104b08:	0001883a 	nop
 4104b0c:	00000106 	br	4104b14 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 4104b10:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 4104b14:	e037883a 	mov	sp,fp
 4104b18:	dfc00117 	ldw	ra,4(sp)
 4104b1c:	df000017 	ldw	fp,0(sp)
 4104b20:	dec00204 	addi	sp,sp,8
 4104b24:	f800283a 	ret

04104b28 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4104b28:	defff804 	addi	sp,sp,-32
 4104b2c:	dfc00715 	stw	ra,28(sp)
 4104b30:	df000615 	stw	fp,24(sp)
 4104b34:	df000604 	addi	fp,sp,24
 4104b38:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4104b3c:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 4104b40:	d0a72343 	ldbu	r2,-25459(gp)
 4104b44:	10803fcc 	andi	r2,r2,255
 4104b48:	10800060 	cmpeqi	r2,r2,1
 4104b4c:	10002326 	beq	r2,zero,4104bdc <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4104b50:	0005303a 	rdctl	r2,status
 4104b54:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4104b58:	e0fffe17 	ldw	r3,-8(fp)
 4104b5c:	00bfff84 	movi	r2,-2
 4104b60:	1884703a 	and	r2,r3,r2
 4104b64:	1001703a 	wrctl	status,r2
  
  return context;
 4104b68:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 4104b6c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 4104b70:	d0a72117 	ldw	r2,-25468(gp)
 4104b74:	1000051e 	bne	r2,zero,4104b8c <__malloc_unlock+0x64>
 4104b78:	e0bffa17 	ldw	r2,-24(fp)
 4104b7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4104b80:	e0bffb17 	ldw	r2,-20(fp)
 4104b84:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 4104b88:	00001506 	br	4104be0 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 4104b8c:	d0a72117 	ldw	r2,-25468(gp)
 4104b90:	10bfffc4 	addi	r2,r2,-1
 4104b94:	d0a72115 	stw	r2,-25468(gp)
 4104b98:	d0a72117 	ldw	r2,-25468(gp)
 4104b9c:	10000a1e 	bne	r2,zero,4104bc8 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 4104ba0:	00bfffc4 	movi	r2,-1
 4104ba4:	d0a00f15 	stw	r2,-32708(gp)
 4104ba8:	e0bffa17 	ldw	r2,-24(fp)
 4104bac:	e0bffc15 	stw	r2,-16(fp)
 4104bb0:	e0bffc17 	ldw	r2,-16(fp)
 4104bb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 4104bb8:	d0a72217 	ldw	r2,-25464(gp)
 4104bbc:	1009883a 	mov	r4,r2
 4104bc0:	410a4440 	call	410a444 <OSSemPost>
 4104bc4:	00000606 	br	4104be0 <__malloc_unlock+0xb8>
 4104bc8:	e0bffa17 	ldw	r2,-24(fp)
 4104bcc:	e0bffd15 	stw	r2,-12(fp)
 4104bd0:	e0bffd17 	ldw	r2,-12(fp)
 4104bd4:	1001703a 	wrctl	status,r2
 4104bd8:	00000106 	br	4104be0 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 4104bdc:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 4104be0:	e037883a 	mov	sp,fp
 4104be4:	dfc00117 	ldw	ra,4(sp)
 4104be8:	df000017 	ldw	fp,0(sp)
 4104bec:	dec00204 	addi	sp,sp,8
 4104bf0:	f800283a 	ret

04104bf4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 4104bf4:	defff704 	addi	sp,sp,-36
 4104bf8:	dfc00815 	stw	ra,32(sp)
 4104bfc:	df000715 	stw	fp,28(sp)
 4104c00:	df000704 	addi	fp,sp,28
 4104c04:	e13ffd15 	stw	r4,-12(fp)
 4104c08:	e17ffe15 	stw	r5,-8(fp)
 4104c0c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4104c10:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4104c14:	e0bfff17 	ldw	r2,-4(fp)
 4104c18:	1000021e 	bne	r2,zero,4104c24 <OSEventNameGet+0x30>
        return (0);
 4104c1c:	0005883a 	mov	r2,zero
 4104c20:	00003706 	br	4104d00 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 4104c24:	e0bffd17 	ldw	r2,-12(fp)
 4104c28:	1000051e 	bne	r2,zero,4104c40 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 4104c2c:	e0bfff17 	ldw	r2,-4(fp)
 4104c30:	00c00104 	movi	r3,4
 4104c34:	10c00005 	stb	r3,0(r2)
        return (0);
 4104c38:	0005883a 	mov	r2,zero
 4104c3c:	00003006 	br	4104d00 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4104c40:	e0bffe17 	ldw	r2,-8(fp)
 4104c44:	1000051e 	bne	r2,zero,4104c5c <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 4104c48:	e0bfff17 	ldw	r2,-4(fp)
 4104c4c:	00c00304 	movi	r3,12
 4104c50:	10c00005 	stb	r3,0(r2)
        return (0);
 4104c54:	0005883a 	mov	r2,zero
 4104c58:	00002906 	br	4104d00 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4104c5c:	d0a73103 	ldbu	r2,-25404(gp)
 4104c60:	10803fcc 	andi	r2,r2,255
 4104c64:	10000526 	beq	r2,zero,4104c7c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 4104c68:	e0bfff17 	ldw	r2,-4(fp)
 4104c6c:	00c00444 	movi	r3,17
 4104c70:	10c00005 	stb	r3,0(r2)
        return (0);
 4104c74:	0005883a 	mov	r2,zero
 4104c78:	00002106 	br	4104d00 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 4104c7c:	e0bffd17 	ldw	r2,-12(fp)
 4104c80:	10800003 	ldbu	r2,0(r2)
 4104c84:	10803fcc 	andi	r2,r2,255
 4104c88:	10bfffc4 	addi	r2,r2,-1
 4104c8c:	10800128 	cmpgeui	r2,r2,4
 4104c90:	10000526 	beq	r2,zero,4104ca8 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 4104c94:	e0bfff17 	ldw	r2,-4(fp)
 4104c98:	00c00044 	movi	r3,1
 4104c9c:	10c00005 	stb	r3,0(r2)
             return (0);
 4104ca0:	0005883a 	mov	r2,zero
 4104ca4:	00001606 	br	4104d00 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 4104ca8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4104cac:	0005303a 	rdctl	r2,status
 4104cb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4104cb4:	e0fffb17 	ldw	r3,-20(fp)
 4104cb8:	00bfff84 	movi	r2,-2
 4104cbc:	1884703a 	and	r2,r3,r2
 4104cc0:	1001703a 	wrctl	status,r2
  
  return context;
 4104cc4:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 4104cc8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 4104ccc:	e0bffd17 	ldw	r2,-12(fp)
 4104cd0:	10800384 	addi	r2,r2,14
 4104cd4:	100b883a 	mov	r5,r2
 4104cd8:	e13ffe17 	ldw	r4,-8(fp)
 4104cdc:	41066780 	call	4106678 <OS_StrCopy>
 4104ce0:	e0bffa05 	stb	r2,-24(fp)
 4104ce4:	e0bff917 	ldw	r2,-28(fp)
 4104ce8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4104cec:	e0bffc17 	ldw	r2,-16(fp)
 4104cf0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4104cf4:	e0bfff17 	ldw	r2,-4(fp)
 4104cf8:	10000005 	stb	zero,0(r2)
    return (len);
 4104cfc:	e0bffa03 	ldbu	r2,-24(fp)
}
 4104d00:	e037883a 	mov	sp,fp
 4104d04:	dfc00117 	ldw	ra,4(sp)
 4104d08:	df000017 	ldw	fp,0(sp)
 4104d0c:	dec00204 	addi	sp,sp,8
 4104d10:	f800283a 	ret

04104d14 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 4104d14:	defff604 	addi	sp,sp,-40
 4104d18:	dfc00915 	stw	ra,36(sp)
 4104d1c:	df000815 	stw	fp,32(sp)
 4104d20:	df000804 	addi	fp,sp,32
 4104d24:	e13ffd15 	stw	r4,-12(fp)
 4104d28:	e17ffe15 	stw	r5,-8(fp)
 4104d2c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4104d30:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4104d34:	e0bfff17 	ldw	r2,-4(fp)
 4104d38:	10004026 	beq	r2,zero,4104e3c <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 4104d3c:	e0bffd17 	ldw	r2,-12(fp)
 4104d40:	1000041e 	bne	r2,zero,4104d54 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 4104d44:	e0bfff17 	ldw	r2,-4(fp)
 4104d48:	00c00104 	movi	r3,4
 4104d4c:	10c00005 	stb	r3,0(r2)
        return;
 4104d50:	00003b06 	br	4104e40 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4104d54:	e0bffe17 	ldw	r2,-8(fp)
 4104d58:	1000041e 	bne	r2,zero,4104d6c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 4104d5c:	e0bfff17 	ldw	r2,-4(fp)
 4104d60:	00c00304 	movi	r3,12
 4104d64:	10c00005 	stb	r3,0(r2)
        return;
 4104d68:	00003506 	br	4104e40 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4104d6c:	d0a73103 	ldbu	r2,-25404(gp)
 4104d70:	10803fcc 	andi	r2,r2,255
 4104d74:	10000426 	beq	r2,zero,4104d88 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 4104d78:	e0bfff17 	ldw	r2,-4(fp)
 4104d7c:	00c00484 	movi	r3,18
 4104d80:	10c00005 	stb	r3,0(r2)
        return;
 4104d84:	00002e06 	br	4104e40 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 4104d88:	e0bffd17 	ldw	r2,-12(fp)
 4104d8c:	10800003 	ldbu	r2,0(r2)
 4104d90:	10803fcc 	andi	r2,r2,255
 4104d94:	10bfffc4 	addi	r2,r2,-1
 4104d98:	10800128 	cmpgeui	r2,r2,4
 4104d9c:	10000426 	beq	r2,zero,4104db0 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 4104da0:	e0bfff17 	ldw	r2,-4(fp)
 4104da4:	00c00044 	movi	r3,1
 4104da8:	10c00005 	stb	r3,0(r2)
             return;
 4104dac:	00002406 	br	4104e40 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 4104db0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4104db4:	0005303a 	rdctl	r2,status
 4104db8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4104dbc:	e0fffc17 	ldw	r3,-16(fp)
 4104dc0:	00bfff84 	movi	r2,-2
 4104dc4:	1884703a 	and	r2,r3,r2
 4104dc8:	1001703a 	wrctl	status,r2
  
  return context;
 4104dcc:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 4104dd0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 4104dd4:	e13ffe17 	ldw	r4,-8(fp)
 4104dd8:	41066ec0 	call	41066ec <OS_StrLen>
 4104ddc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 4104de0:	e0bffa03 	ldbu	r2,-24(fp)
 4104de4:	10800830 	cmpltui	r2,r2,32
 4104de8:	1000081e 	bne	r2,zero,4104e0c <OSEventNameSet+0xf8>
 4104dec:	e0bff817 	ldw	r2,-32(fp)
 4104df0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4104df4:	e0bff917 	ldw	r2,-28(fp)
 4104df8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 4104dfc:	e0bfff17 	ldw	r2,-4(fp)
 4104e00:	00c002c4 	movi	r3,11
 4104e04:	10c00005 	stb	r3,0(r2)
        return;
 4104e08:	00000d06 	br	4104e40 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 4104e0c:	e0bffd17 	ldw	r2,-12(fp)
 4104e10:	10800384 	addi	r2,r2,14
 4104e14:	e17ffe17 	ldw	r5,-8(fp)
 4104e18:	1009883a 	mov	r4,r2
 4104e1c:	41066780 	call	4106678 <OS_StrCopy>
 4104e20:	e0bff817 	ldw	r2,-32(fp)
 4104e24:	e0bffb15 	stw	r2,-20(fp)
 4104e28:	e0bffb17 	ldw	r2,-20(fp)
 4104e2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4104e30:	e0bfff17 	ldw	r2,-4(fp)
 4104e34:	10000005 	stb	zero,0(r2)
 4104e38:	00000106 	br	4104e40 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4104e3c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4104e40:	e037883a 	mov	sp,fp
 4104e44:	dfc00117 	ldw	ra,4(sp)
 4104e48:	df000017 	ldw	fp,0(sp)
 4104e4c:	dec00204 	addi	sp,sp,8
 4104e50:	f800283a 	ret

04104e54 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 4104e54:	deffed04 	addi	sp,sp,-76
 4104e58:	dfc01215 	stw	ra,72(sp)
 4104e5c:	df001115 	stw	fp,68(sp)
 4104e60:	df001104 	addi	fp,sp,68
 4104e64:	e13ffc15 	stw	r4,-16(fp)
 4104e68:	e17ffd15 	stw	r5,-12(fp)
 4104e6c:	e1bffe15 	stw	r6,-8(fp)
 4104e70:	3805883a 	mov	r2,r7
 4104e74:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 4104e78:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 4104e7c:	e0800217 	ldw	r2,8(fp)
 4104e80:	1000021e 	bne	r2,zero,4104e8c <OSEventPendMulti+0x38>
        return (0);
 4104e84:	0005883a 	mov	r2,zero
 4104e88:	00017106 	br	4105450 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 4104e8c:	e0bffc17 	ldw	r2,-16(fp)
 4104e90:	1000051e 	bne	r2,zero,4104ea8 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 4104e94:	e0800217 	ldw	r2,8(fp)
 4104e98:	00c00104 	movi	r3,4
 4104e9c:	10c00005 	stb	r3,0(r2)
        return (0);
 4104ea0:	0005883a 	mov	r2,zero
 4104ea4:	00016a06 	br	4105450 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 4104ea8:	e0bffd17 	ldw	r2,-12(fp)
 4104eac:	1000051e 	bne	r2,zero,4104ec4 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 4104eb0:	e0800217 	ldw	r2,8(fp)
 4104eb4:	00c00104 	movi	r3,4
 4104eb8:	10c00005 	stb	r3,0(r2)
        return (0);
 4104ebc:	0005883a 	mov	r2,zero
 4104ec0:	00016306 	br	4105450 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 4104ec4:	e0bffe17 	ldw	r2,-8(fp)
 4104ec8:	1000051e 	bne	r2,zero,4104ee0 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 4104ecc:	e0800217 	ldw	r2,8(fp)
 4104ed0:	00c00104 	movi	r3,4
 4104ed4:	10c00005 	stb	r3,0(r2)
        return (0);
 4104ed8:	0005883a 	mov	r2,zero
 4104edc:	00015c06 	br	4105450 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 4104ee0:	e0bffd17 	ldw	r2,-12(fp)
 4104ee4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 4104ee8:	e0bffc17 	ldw	r2,-16(fp)
 4104eec:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 4104ef0:	e0bfef17 	ldw	r2,-68(fp)
 4104ef4:	10800017 	ldw	r2,0(r2)
 4104ef8:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 4104efc:	00001906 	br	4104f64 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 4104f00:	e0bff017 	ldw	r2,-64(fp)
 4104f04:	10800003 	ldbu	r2,0(r2)
 4104f08:	10803fcc 	andi	r2,r2,255
 4104f0c:	10c000a0 	cmpeqi	r3,r2,2
 4104f10:	1800091e 	bne	r3,zero,4104f38 <OSEventPendMulti+0xe4>
 4104f14:	10c000e0 	cmpeqi	r3,r2,3
 4104f18:	1800091e 	bne	r3,zero,4104f40 <OSEventPendMulti+0xec>
 4104f1c:	10800060 	cmpeqi	r2,r2,1
 4104f20:	1000091e 	bne	r2,zero,4104f48 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 4104f24:	e0800217 	ldw	r2,8(fp)
 4104f28:	00c00044 	movi	r3,1
 4104f2c:	10c00005 	stb	r3,0(r2)
                 return (0);
 4104f30:	0005883a 	mov	r2,zero
 4104f34:	00014606 	br	4105450 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 4104f38:	0001883a 	nop
 4104f3c:	00000306 	br	4104f4c <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 4104f40:	0001883a 	nop
 4104f44:	00000106 	br	4104f4c <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 4104f48:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 4104f4c:	e0bfef17 	ldw	r2,-68(fp)
 4104f50:	10800104 	addi	r2,r2,4
 4104f54:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 4104f58:	e0bfef17 	ldw	r2,-68(fp)
 4104f5c:	10800017 	ldw	r2,0(r2)
 4104f60:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 4104f64:	e0bff017 	ldw	r2,-64(fp)
 4104f68:	103fe51e 	bne	r2,zero,4104f00 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 4104f6c:	d0a73103 	ldbu	r2,-25404(gp)
 4104f70:	10803fcc 	andi	r2,r2,255
 4104f74:	10000526 	beq	r2,zero,4104f8c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 4104f78:	e0800217 	ldw	r2,8(fp)
 4104f7c:	00c00084 	movi	r3,2
 4104f80:	10c00005 	stb	r3,0(r2)
        return (0);
 4104f84:	0005883a 	mov	r2,zero
 4104f88:	00013106 	br	4105450 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 4104f8c:	d0a72303 	ldbu	r2,-25460(gp)
 4104f90:	10803fcc 	andi	r2,r2,255
 4104f94:	10000526 	beq	r2,zero,4104fac <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 4104f98:	e0800217 	ldw	r2,8(fp)
 4104f9c:	00c00344 	movi	r3,13
 4104fa0:	10c00005 	stb	r3,0(r2)
        return (0);
 4104fa4:	0005883a 	mov	r2,zero
 4104fa8:	00012906 	br	4105450 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4104fac:	0005303a 	rdctl	r2,status
 4104fb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4104fb4:	e0fffb17 	ldw	r3,-20(fp)
 4104fb8:	00bfff84 	movi	r2,-2
 4104fbc:	1884703a 	and	r2,r3,r2
 4104fc0:	1001703a 	wrctl	status,r2
  
  return context;
 4104fc4:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 4104fc8:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 4104fcc:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 4104fd0:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 4104fd4:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 4104fd8:	e0bffc17 	ldw	r2,-16(fp)
 4104fdc:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 4104fe0:	e0bfef17 	ldw	r2,-68(fp)
 4104fe4:	10800017 	ldw	r2,0(r2)
 4104fe8:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 4104fec:	00008106 	br	41051f4 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 4104ff0:	e0bff017 	ldw	r2,-64(fp)
 4104ff4:	10800003 	ldbu	r2,0(r2)
 4104ff8:	10803fcc 	andi	r2,r2,255
 4104ffc:	10c000a0 	cmpeqi	r3,r2,2
 4105000:	18003c1e 	bne	r3,zero,41050f4 <OSEventPendMulti+0x2a0>
 4105004:	10c000e0 	cmpeqi	r3,r2,3
 4105008:	1800031e 	bne	r3,zero,4105018 <OSEventPendMulti+0x1c4>
 410500c:	10800060 	cmpeqi	r2,r2,1
 4105010:	10001e1e 	bne	r2,zero,410508c <OSEventPendMulti+0x238>
 4105014:	00006606 	br	41051b0 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 4105018:	e0bff017 	ldw	r2,-64(fp)
 410501c:	1080020b 	ldhu	r2,8(r2)
 4105020:	10bfffcc 	andi	r2,r2,65535
 4105024:	10001526 	beq	r2,zero,410507c <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 4105028:	e0bff017 	ldw	r2,-64(fp)
 410502c:	1080020b 	ldhu	r2,8(r2)
 4105030:	10bfffc4 	addi	r2,r2,-1
 4105034:	1007883a 	mov	r3,r2
 4105038:	e0bff017 	ldw	r2,-64(fp)
 410503c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 4105040:	e0bffd17 	ldw	r2,-12(fp)
 4105044:	10c00104 	addi	r3,r2,4
 4105048:	e0fffd15 	stw	r3,-12(fp)
 410504c:	e0fff017 	ldw	r3,-64(fp)
 4105050:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 4105054:	00800044 	movi	r2,1
 4105058:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 410505c:	e0bffe17 	ldw	r2,-8(fp)
 4105060:	10c00104 	addi	r3,r2,4
 4105064:	e0fffe15 	stw	r3,-8(fp)
 4105068:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 410506c:	e0bff18b 	ldhu	r2,-58(fp)
 4105070:	10800044 	addi	r2,r2,1
 4105074:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 4105078:	00005806 	br	41051dc <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 410507c:	e0bff203 	ldbu	r2,-56(fp)
 4105080:	10800054 	ori	r2,r2,1
 4105084:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 4105088:	00005406 	br	41051dc <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 410508c:	e0bff017 	ldw	r2,-64(fp)
 4105090:	10800117 	ldw	r2,4(r2)
 4105094:	10001326 	beq	r2,zero,41050e4 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 4105098:	e0bffe17 	ldw	r2,-8(fp)
 410509c:	10c00104 	addi	r3,r2,4
 41050a0:	e0fffe15 	stw	r3,-8(fp)
 41050a4:	e0fff017 	ldw	r3,-64(fp)
 41050a8:	18c00117 	ldw	r3,4(r3)
 41050ac:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 41050b0:	e0bff017 	ldw	r2,-64(fp)
 41050b4:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 41050b8:	e0bffd17 	ldw	r2,-12(fp)
 41050bc:	10c00104 	addi	r3,r2,4
 41050c0:	e0fffd15 	stw	r3,-12(fp)
 41050c4:	e0fff017 	ldw	r3,-64(fp)
 41050c8:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 41050cc:	00800044 	movi	r2,1
 41050d0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 41050d4:	e0bff18b 	ldhu	r2,-58(fp)
 41050d8:	10800044 	addi	r2,r2,1
 41050dc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 41050e0:	00003e06 	br	41051dc <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 41050e4:	e0bff203 	ldbu	r2,-56(fp)
 41050e8:	10800094 	ori	r2,r2,2
 41050ec:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 41050f0:	00003a06 	br	41051dc <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 41050f4:	e0bff017 	ldw	r2,-64(fp)
 41050f8:	10800117 	ldw	r2,4(r2)
 41050fc:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 4105100:	e0bff517 	ldw	r2,-44(fp)
 4105104:	1080058b 	ldhu	r2,22(r2)
 4105108:	10bfffcc 	andi	r2,r2,65535
 410510c:	10002426 	beq	r2,zero,41051a0 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 4105110:	e0bffe17 	ldw	r2,-8(fp)
 4105114:	10c00104 	addi	r3,r2,4
 4105118:	e0fffe15 	stw	r3,-8(fp)
 410511c:	e0fff517 	ldw	r3,-44(fp)
 4105120:	18c00417 	ldw	r3,16(r3)
 4105124:	19400104 	addi	r5,r3,4
 4105128:	e13ff517 	ldw	r4,-44(fp)
 410512c:	21400415 	stw	r5,16(r4)
 4105130:	18c00017 	ldw	r3,0(r3)
 4105134:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 4105138:	e0bff517 	ldw	r2,-44(fp)
 410513c:	10c00417 	ldw	r3,16(r2)
 4105140:	e0bff517 	ldw	r2,-44(fp)
 4105144:	10800217 	ldw	r2,8(r2)
 4105148:	1880041e 	bne	r3,r2,410515c <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 410514c:	e0bff517 	ldw	r2,-44(fp)
 4105150:	10c00117 	ldw	r3,4(r2)
 4105154:	e0bff517 	ldw	r2,-44(fp)
 4105158:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 410515c:	e0bff517 	ldw	r2,-44(fp)
 4105160:	1080058b 	ldhu	r2,22(r2)
 4105164:	10bfffc4 	addi	r2,r2,-1
 4105168:	1007883a 	mov	r3,r2
 410516c:	e0bff517 	ldw	r2,-44(fp)
 4105170:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 4105174:	e0bffd17 	ldw	r2,-12(fp)
 4105178:	10c00104 	addi	r3,r2,4
 410517c:	e0fffd15 	stw	r3,-12(fp)
 4105180:	e0fff017 	ldw	r3,-64(fp)
 4105184:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 4105188:	00800044 	movi	r2,1
 410518c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 4105190:	e0bff18b 	ldhu	r2,-58(fp)
 4105194:	10800044 	addi	r2,r2,1
 4105198:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 410519c:	00000f06 	br	41051dc <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 41051a0:	e0bff203 	ldbu	r2,-56(fp)
 41051a4:	10800114 	ori	r2,r2,4
 41051a8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 41051ac:	00000b06 	br	41051dc <OSEventPendMulti+0x388>
 41051b0:	e0bff317 	ldw	r2,-52(fp)
 41051b4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41051b8:	e0bff417 	ldw	r2,-48(fp)
 41051bc:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 41051c0:	e0bffd17 	ldw	r2,-12(fp)
 41051c4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 41051c8:	e0800217 	ldw	r2,8(fp)
 41051cc:	00c00044 	movi	r3,1
 41051d0:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 41051d4:	e0bff18b 	ldhu	r2,-58(fp)
 41051d8:	00009d06 	br	4105450 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 41051dc:	e0bfef17 	ldw	r2,-68(fp)
 41051e0:	10800104 	addi	r2,r2,4
 41051e4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 41051e8:	e0bfef17 	ldw	r2,-68(fp)
 41051ec:	10800017 	ldw	r2,0(r2)
 41051f0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 41051f4:	e0bff017 	ldw	r2,-64(fp)
 41051f8:	103f7d1e 	bne	r2,zero,4104ff0 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 41051fc:	e0bff103 	ldbu	r2,-60(fp)
 4105200:	10800058 	cmpnei	r2,r2,1
 4105204:	10000a1e 	bne	r2,zero,4105230 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 4105208:	e0bffd17 	ldw	r2,-12(fp)
 410520c:	10000015 	stw	zero,0(r2)
 4105210:	e0bff317 	ldw	r2,-52(fp)
 4105214:	e0bff615 	stw	r2,-40(fp)
 4105218:	e0bff617 	ldw	r2,-40(fp)
 410521c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 4105220:	e0800217 	ldw	r2,8(fp)
 4105224:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 4105228:	e0bff18b 	ldhu	r2,-58(fp)
 410522c:	00008806 	br	4105450 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 4105230:	d0a73217 	ldw	r2,-25400(gp)
 4105234:	d0e73217 	ldw	r3,-25400(gp)
 4105238:	19000c03 	ldbu	r4,48(r3)
 410523c:	e0fff203 	ldbu	r3,-56(fp)
 4105240:	20c6b03a 	or	r3,r4,r3
 4105244:	1809883a 	mov	r4,r3
 4105248:	00ffe004 	movi	r3,-128
 410524c:	20c6b03a 	or	r3,r4,r3
 4105250:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4105254:	d0a73217 	ldw	r2,-25400(gp)
 4105258:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 410525c:	d0a73217 	ldw	r2,-25400(gp)
 4105260:	e0ffff0b 	ldhu	r3,-4(fp)
 4105264:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 4105268:	e13ffc17 	ldw	r4,-16(fp)
 410526c:	4105d900 	call	4105d90 <OS_EventTaskWaitMulti>
 4105270:	e0bff317 	ldw	r2,-52(fp)
 4105274:	e0bff915 	stw	r2,-28(fp)
 4105278:	e0bff917 	ldw	r2,-28(fp)
 410527c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 4105280:	41065340 	call	4106534 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4105284:	0005303a 	rdctl	r2,status
 4105288:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410528c:	e0fff717 	ldw	r3,-36(fp)
 4105290:	00bfff84 	movi	r2,-2
 4105294:	1884703a 	and	r2,r3,r2
 4105298:	1001703a 	wrctl	status,r2
  
  return context;
 410529c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 41052a0:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 41052a4:	d0a73217 	ldw	r2,-25400(gp)
 41052a8:	10800c43 	ldbu	r2,49(r2)
 41052ac:	10803fcc 	andi	r2,r2,255
 41052b0:	10000226 	beq	r2,zero,41052bc <OSEventPendMulti+0x468>
 41052b4:	108000a0 	cmpeqi	r2,r2,2
 41052b8:	10001826 	beq	r2,zero,410531c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 41052bc:	d0a73217 	ldw	r2,-25400(gp)
 41052c0:	10800717 	ldw	r2,28(r2)
 41052c4:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 41052c8:	e0bff017 	ldw	r2,-64(fp)
 41052cc:	10000b26 	beq	r2,zero,41052fc <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 41052d0:	e0bffd17 	ldw	r2,-12(fp)
 41052d4:	10c00104 	addi	r3,r2,4
 41052d8:	e0fffd15 	stw	r3,-12(fp)
 41052dc:	e0fff017 	ldw	r3,-64(fp)
 41052e0:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 41052e4:	e0bffd17 	ldw	r2,-12(fp)
 41052e8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 41052ec:	e0bff18b 	ldhu	r2,-58(fp)
 41052f0:	10800044 	addi	r2,r2,1
 41052f4:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 41052f8:	00000d06 	br	4105330 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 41052fc:	d0a73217 	ldw	r2,-25400(gp)
 4105300:	00c00044 	movi	r3,1
 4105304:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 4105308:	d0a73217 	ldw	r2,-25400(gp)
 410530c:	e17ffc17 	ldw	r5,-16(fp)
 4105310:	1009883a 	mov	r4,r2
 4105314:	4105f980 	call	4105f98 <OS_EventTaskRemoveMulti>
             }
			 break;
 4105318:	00000506 	br	4105330 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 410531c:	d0a73217 	ldw	r2,-25400(gp)
 4105320:	e17ffc17 	ldw	r5,-16(fp)
 4105324:	1009883a 	mov	r4,r2
 4105328:	4105f980 	call	4105f98 <OS_EventTaskRemoveMulti>
             break;
 410532c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 4105330:	d0a73217 	ldw	r2,-25400(gp)
 4105334:	10800c43 	ldbu	r2,49(r2)
 4105338:	10803fcc 	andi	r2,r2,255
 410533c:	10000326 	beq	r2,zero,410534c <OSEventPendMulti+0x4f8>
 4105340:	108000a0 	cmpeqi	r2,r2,2
 4105344:	1000231e 	bne	r2,zero,41053d4 <OSEventPendMulti+0x580>
 4105348:	00002a06 	br	41053f4 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 410534c:	e0bff017 	ldw	r2,-64(fp)
 4105350:	10800003 	ldbu	r2,0(r2)
 4105354:	10803fcc 	andi	r2,r2,255
 4105358:	0080100e 	bge	zero,r2,410539c <OSEventPendMulti+0x548>
 410535c:	10c000d0 	cmplti	r3,r2,3
 4105360:	1800071e 	bne	r3,zero,4105380 <OSEventPendMulti+0x52c>
 4105364:	108000e0 	cmpeqi	r2,r2,3
 4105368:	10000c26 	beq	r2,zero,410539c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 410536c:	e0bffe17 	ldw	r2,-8(fp)
 4105370:	10c00104 	addi	r3,r2,4
 4105374:	e0fffe15 	stw	r3,-8(fp)
 4105378:	10000015 	stw	zero,0(r2)
                      break;
 410537c:	00001206 	br	41053c8 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 4105380:	e0bffe17 	ldw	r2,-8(fp)
 4105384:	10c00104 	addi	r3,r2,4
 4105388:	e0fffe15 	stw	r3,-8(fp)
 410538c:	d0e73217 	ldw	r3,-25400(gp)
 4105390:	18c00917 	ldw	r3,36(r3)
 4105394:	10c00015 	stw	r3,0(r2)
                      break;
 4105398:	00000b06 	br	41053c8 <OSEventPendMulti+0x574>
 410539c:	e0bff317 	ldw	r2,-52(fp)
 41053a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41053a4:	e0bff817 	ldw	r2,-32(fp)
 41053a8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 41053ac:	e0bffd17 	ldw	r2,-12(fp)
 41053b0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 41053b4:	e0800217 	ldw	r2,8(fp)
 41053b8:	00c00044 	movi	r3,1
 41053bc:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 41053c0:	e0bff18b 	ldhu	r2,-58(fp)
 41053c4:	00002206 	br	4105450 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 41053c8:	e0800217 	ldw	r2,8(fp)
 41053cc:	10000005 	stb	zero,0(r2)
             break;
 41053d0:	00001006 	br	4105414 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 41053d4:	e0bffe17 	ldw	r2,-8(fp)
 41053d8:	10c00104 	addi	r3,r2,4
 41053dc:	e0fffe15 	stw	r3,-8(fp)
 41053e0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 41053e4:	e0800217 	ldw	r2,8(fp)
 41053e8:	00c00384 	movi	r3,14
 41053ec:	10c00005 	stb	r3,0(r2)
             break;
 41053f0:	00000806 	br	4105414 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 41053f4:	e0bffe17 	ldw	r2,-8(fp)
 41053f8:	10c00104 	addi	r3,r2,4
 41053fc:	e0fffe15 	stw	r3,-8(fp)
 4105400:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 4105404:	e0800217 	ldw	r2,8(fp)
 4105408:	00c00284 	movi	r3,10
 410540c:	10c00005 	stb	r3,0(r2)
             break;
 4105410:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 4105414:	d0a73217 	ldw	r2,-25400(gp)
 4105418:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 410541c:	d0a73217 	ldw	r2,-25400(gp)
 4105420:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 4105424:	d0a73217 	ldw	r2,-25400(gp)
 4105428:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 410542c:	d0a73217 	ldw	r2,-25400(gp)
 4105430:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 4105434:	d0a73217 	ldw	r2,-25400(gp)
 4105438:	10000915 	stw	zero,36(r2)
 410543c:	e0bff317 	ldw	r2,-52(fp)
 4105440:	e0bffa15 	stw	r2,-24(fp)
 4105444:	e0bffa17 	ldw	r2,-24(fp)
 4105448:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 410544c:	e0bff18b 	ldhu	r2,-58(fp)
}
 4105450:	e037883a 	mov	sp,fp
 4105454:	dfc00117 	ldw	ra,4(sp)
 4105458:	df000017 	ldw	fp,0(sp)
 410545c:	dec00204 	addi	sp,sp,8
 4105460:	f800283a 	ret

04105464 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 4105464:	defffe04 	addi	sp,sp,-8
 4105468:	dfc00115 	stw	ra,4(sp)
 410546c:	df000015 	stw	fp,0(sp)
 4105470:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 4105474:	410ebb40 	call	410ebb4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 4105478:	41061e00 	call	41061e0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 410547c:	41062280 	call	4106228 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 4105480:	41063940 	call	4106394 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 4105484:	41061000 	call	4106100 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 4105488:	41082340 	call	4108234 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 410548c:	4108b340 	call	4108b34 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 4105490:	4109c5c0 	call	4109c5c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 4105494:	41062940 	call	4106294 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 4105498:	41063140 	call	4106314 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 410549c:	410ebd40 	call	410ebd4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 41054a0:	4106c080 	call	4106c08 <OSDebugInit>
#endif
}
 41054a4:	0001883a 	nop
 41054a8:	e037883a 	mov	sp,fp
 41054ac:	dfc00117 	ldw	ra,4(sp)
 41054b0:	df000017 	ldw	fp,0(sp)
 41054b4:	dec00204 	addi	sp,sp,8
 41054b8:	f800283a 	ret

041054bc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 41054bc:	deffff04 	addi	sp,sp,-4
 41054c0:	df000015 	stw	fp,0(sp)
 41054c4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 41054c8:	d0a72343 	ldbu	r2,-25459(gp)
 41054cc:	10803fcc 	andi	r2,r2,255
 41054d0:	10800058 	cmpnei	r2,r2,1
 41054d4:	1000071e 	bne	r2,zero,41054f4 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 41054d8:	d0a73103 	ldbu	r2,-25404(gp)
 41054dc:	10803fcc 	andi	r2,r2,255
 41054e0:	10803fe0 	cmpeqi	r2,r2,255
 41054e4:	1000031e 	bne	r2,zero,41054f4 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 41054e8:	d0a73103 	ldbu	r2,-25404(gp)
 41054ec:	10800044 	addi	r2,r2,1
 41054f0:	d0a73105 	stb	r2,-25404(gp)
        }
    }
}
 41054f4:	0001883a 	nop
 41054f8:	e037883a 	mov	sp,fp
 41054fc:	df000017 	ldw	fp,0(sp)
 4105500:	dec00104 	addi	sp,sp,4
 4105504:	f800283a 	ret

04105508 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 4105508:	defffb04 	addi	sp,sp,-20
 410550c:	dfc00415 	stw	ra,16(sp)
 4105510:	df000315 	stw	fp,12(sp)
 4105514:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4105518:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 410551c:	d0a72343 	ldbu	r2,-25459(gp)
 4105520:	10803fcc 	andi	r2,r2,255
 4105524:	10800058 	cmpnei	r2,r2,1
 4105528:	10002f1e 	bne	r2,zero,41055e8 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410552c:	0005303a 	rdctl	r2,status
 4105530:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4105534:	e0ffff17 	ldw	r3,-4(fp)
 4105538:	00bfff84 	movi	r2,-2
 410553c:	1884703a 	and	r2,r3,r2
 4105540:	1001703a 	wrctl	status,r2
  
  return context;
 4105544:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 4105548:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 410554c:	d0a73103 	ldbu	r2,-25404(gp)
 4105550:	10803fcc 	andi	r2,r2,255
 4105554:	10000326 	beq	r2,zero,4105564 <OSIntExit+0x5c>
            OSIntNesting--;
 4105558:	d0a73103 	ldbu	r2,-25404(gp)
 410555c:	10bfffc4 	addi	r2,r2,-1
 4105560:	d0a73105 	stb	r2,-25404(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 4105564:	d0a73103 	ldbu	r2,-25404(gp)
 4105568:	10803fcc 	andi	r2,r2,255
 410556c:	10001a1e 	bne	r2,zero,41055d8 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 4105570:	d0a72303 	ldbu	r2,-25460(gp)
 4105574:	10803fcc 	andi	r2,r2,255
 4105578:	1000171e 	bne	r2,zero,41055d8 <OSIntExit+0xd0>
                OS_SchedNew();
 410557c:	41066040 	call	4106604 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 4105580:	d0e72503 	ldbu	r3,-25452(gp)
 4105584:	d0a72543 	ldbu	r2,-25451(gp)
 4105588:	18c03fcc 	andi	r3,r3,255
 410558c:	10803fcc 	andi	r2,r2,255
 4105590:	18801126 	beq	r3,r2,41055d8 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 4105594:	d0a72503 	ldbu	r2,-25452(gp)
 4105598:	10c03fcc 	andi	r3,r2,255
 410559c:	008104b4 	movhi	r2,1042
 41055a0:	10b12504 	addi	r2,r2,-15212
 41055a4:	18c7883a 	add	r3,r3,r3
 41055a8:	18c7883a 	add	r3,r3,r3
 41055ac:	10c5883a 	add	r2,r2,r3
 41055b0:	10800017 	ldw	r2,0(r2)
 41055b4:	d0a72d15 	stw	r2,-25420(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 41055b8:	d0a72d17 	ldw	r2,-25420(gp)
 41055bc:	10c00e17 	ldw	r3,56(r2)
 41055c0:	18c00044 	addi	r3,r3,1
 41055c4:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 41055c8:	d0a72817 	ldw	r2,-25440(gp)
 41055cc:	10800044 	addi	r2,r2,1
 41055d0:	d0a72815 	stw	r2,-25440(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 41055d4:	410e8e00 	call	410e8e0 <OSCtxSw>
 41055d8:	e0bffd17 	ldw	r2,-12(fp)
 41055dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41055e0:	e0bffe17 	ldw	r2,-8(fp)
 41055e4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 41055e8:	0001883a 	nop
 41055ec:	e037883a 	mov	sp,fp
 41055f0:	dfc00117 	ldw	ra,4(sp)
 41055f4:	df000017 	ldw	fp,0(sp)
 41055f8:	dec00204 	addi	sp,sp,8
 41055fc:	f800283a 	ret

04105600 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 4105600:	defffc04 	addi	sp,sp,-16
 4105604:	df000315 	stw	fp,12(sp)
 4105608:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 410560c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 4105610:	d0a72343 	ldbu	r2,-25459(gp)
 4105614:	10803fcc 	andi	r2,r2,255
 4105618:	10800058 	cmpnei	r2,r2,1
 410561c:	1000161e 	bne	r2,zero,4105678 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4105620:	0005303a 	rdctl	r2,status
 4105624:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4105628:	e0ffff17 	ldw	r3,-4(fp)
 410562c:	00bfff84 	movi	r2,-2
 4105630:	1884703a 	and	r2,r3,r2
 4105634:	1001703a 	wrctl	status,r2
  
  return context;
 4105638:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 410563c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 4105640:	d0a73103 	ldbu	r2,-25404(gp)
 4105644:	10803fcc 	andi	r2,r2,255
 4105648:	1000071e 	bne	r2,zero,4105668 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 410564c:	d0a72303 	ldbu	r2,-25460(gp)
 4105650:	10803fcc 	andi	r2,r2,255
 4105654:	10803fe0 	cmpeqi	r2,r2,255
 4105658:	1000031e 	bne	r2,zero,4105668 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 410565c:	d0a72303 	ldbu	r2,-25460(gp)
 4105660:	10800044 	addi	r2,r2,1
 4105664:	d0a72305 	stb	r2,-25460(gp)
 4105668:	e0bffd17 	ldw	r2,-12(fp)
 410566c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4105670:	e0bffe17 	ldw	r2,-8(fp)
 4105674:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 4105678:	0001883a 	nop
 410567c:	e037883a 	mov	sp,fp
 4105680:	df000017 	ldw	fp,0(sp)
 4105684:	dec00104 	addi	sp,sp,4
 4105688:	f800283a 	ret

0410568c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 410568c:	defff804 	addi	sp,sp,-32
 4105690:	dfc00715 	stw	ra,28(sp)
 4105694:	df000615 	stw	fp,24(sp)
 4105698:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 410569c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 41056a0:	d0a72343 	ldbu	r2,-25459(gp)
 41056a4:	10803fcc 	andi	r2,r2,255
 41056a8:	10800058 	cmpnei	r2,r2,1
 41056ac:	1000281e 	bne	r2,zero,4105750 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41056b0:	0005303a 	rdctl	r2,status
 41056b4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41056b8:	e0ffff17 	ldw	r3,-4(fp)
 41056bc:	00bfff84 	movi	r2,-2
 41056c0:	1884703a 	and	r2,r3,r2
 41056c4:	1001703a 	wrctl	status,r2
  
  return context;
 41056c8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 41056cc:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 41056d0:	d0a72303 	ldbu	r2,-25460(gp)
 41056d4:	10803fcc 	andi	r2,r2,255
 41056d8:	10001926 	beq	r2,zero,4105740 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 41056dc:	d0a72303 	ldbu	r2,-25460(gp)
 41056e0:	10bfffc4 	addi	r2,r2,-1
 41056e4:	d0a72305 	stb	r2,-25460(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 41056e8:	d0a72303 	ldbu	r2,-25460(gp)
 41056ec:	10803fcc 	andi	r2,r2,255
 41056f0:	10000e1e 	bne	r2,zero,410572c <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 41056f4:	d0a73103 	ldbu	r2,-25404(gp)
 41056f8:	10803fcc 	andi	r2,r2,255
 41056fc:	1000061e 	bne	r2,zero,4105718 <OSSchedUnlock+0x8c>
 4105700:	e0bffa17 	ldw	r2,-24(fp)
 4105704:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4105708:	e0bffb17 	ldw	r2,-20(fp)
 410570c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 4105710:	41065340 	call	4106534 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 4105714:	00000e06 	br	4105750 <OSSchedUnlock+0xc4>
 4105718:	e0bffa17 	ldw	r2,-24(fp)
 410571c:	e0bffc15 	stw	r2,-16(fp)
 4105720:	e0bffc17 	ldw	r2,-16(fp)
 4105724:	1001703a 	wrctl	status,r2
 4105728:	00000906 	br	4105750 <OSSchedUnlock+0xc4>
 410572c:	e0bffa17 	ldw	r2,-24(fp)
 4105730:	e0bffd15 	stw	r2,-12(fp)
 4105734:	e0bffd17 	ldw	r2,-12(fp)
 4105738:	1001703a 	wrctl	status,r2
 410573c:	00000406 	br	4105750 <OSSchedUnlock+0xc4>
 4105740:	e0bffa17 	ldw	r2,-24(fp)
 4105744:	e0bffe15 	stw	r2,-8(fp)
 4105748:	e0bffe17 	ldw	r2,-8(fp)
 410574c:	1001703a 	wrctl	status,r2
 4105750:	0001883a 	nop
 4105754:	e037883a 	mov	sp,fp
 4105758:	dfc00117 	ldw	ra,4(sp)
 410575c:	df000017 	ldw	fp,0(sp)
 4105760:	dec00204 	addi	sp,sp,8
 4105764:	f800283a 	ret

04105768 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 4105768:	defffe04 	addi	sp,sp,-8
 410576c:	dfc00115 	stw	ra,4(sp)
 4105770:	df000015 	stw	fp,0(sp)
 4105774:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 4105778:	d0a72343 	ldbu	r2,-25459(gp)
 410577c:	10803fcc 	andi	r2,r2,255
 4105780:	10000f1e 	bne	r2,zero,41057c0 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 4105784:	41066040 	call	4106604 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 4105788:	d0a72503 	ldbu	r2,-25452(gp)
 410578c:	d0a72545 	stb	r2,-25451(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 4105790:	d0a72503 	ldbu	r2,-25452(gp)
 4105794:	10c03fcc 	andi	r3,r2,255
 4105798:	008104b4 	movhi	r2,1042
 410579c:	10b12504 	addi	r2,r2,-15212
 41057a0:	18c7883a 	add	r3,r3,r3
 41057a4:	18c7883a 	add	r3,r3,r3
 41057a8:	10c5883a 	add	r2,r2,r3
 41057ac:	10800017 	ldw	r2,0(r2)
 41057b0:	d0a72d15 	stw	r2,-25420(gp)
        OSTCBCur      = OSTCBHighRdy;
 41057b4:	d0a72d17 	ldw	r2,-25420(gp)
 41057b8:	d0a73215 	stw	r2,-25400(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 41057bc:	410e96c0 	call	410e96c <OSStartHighRdy>
    }
}
 41057c0:	0001883a 	nop
 41057c4:	e037883a 	mov	sp,fp
 41057c8:	dfc00117 	ldw	ra,4(sp)
 41057cc:	df000017 	ldw	fp,0(sp)
 41057d0:	dec00204 	addi	sp,sp,8
 41057d4:	f800283a 	ret

041057d8 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 41057d8:	defff904 	addi	sp,sp,-28
 41057dc:	dfc00615 	stw	ra,24(sp)
 41057e0:	df000515 	stw	fp,20(sp)
 41057e4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 41057e8:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 41057ec:	01000084 	movi	r4,2
 41057f0:	410bed00 	call	410bed0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41057f4:	0005303a 	rdctl	r2,status
 41057f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41057fc:	e0fffc17 	ldw	r3,-16(fp)
 4105800:	00bfff84 	movi	r2,-2
 4105804:	1884703a 	and	r2,r3,r2
 4105808:	1001703a 	wrctl	status,r2
  
  return context;
 410580c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 4105810:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 4105814:	d0272415 	stw	zero,-25456(gp)
 4105818:	e0bffb17 	ldw	r2,-20(fp)
 410581c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4105820:	e0bffd17 	ldw	r2,-12(fp)
 4105824:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 4105828:	01001904 	movi	r4,100
 410582c:	410bed00 	call	410bed0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4105830:	0005303a 	rdctl	r2,status
 4105834:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4105838:	e0fffe17 	ldw	r3,-8(fp)
 410583c:	00bfff84 	movi	r2,-2
 4105840:	1884703a 	and	r2,r3,r2
 4105844:	1001703a 	wrctl	status,r2
  
  return context;
 4105848:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 410584c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 4105850:	d0a72417 	ldw	r2,-25456(gp)
 4105854:	d0a72915 	stw	r2,-25436(gp)
    OSStatRdy    = OS_TRUE;
 4105858:	00800044 	movi	r2,1
 410585c:	d0a73505 	stb	r2,-25388(gp)
 4105860:	e0bffb17 	ldw	r2,-20(fp)
 4105864:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4105868:	e0bfff17 	ldw	r2,-4(fp)
 410586c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4105870:	0001883a 	nop
 4105874:	e037883a 	mov	sp,fp
 4105878:	dfc00117 	ldw	ra,4(sp)
 410587c:	df000017 	ldw	fp,0(sp)
 4105880:	dec00204 	addi	sp,sp,8
 4105884:	f800283a 	ret

04105888 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 4105888:	defff704 	addi	sp,sp,-36
 410588c:	dfc00815 	stw	ra,32(sp)
 4105890:	df000715 	stw	fp,28(sp)
 4105894:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4105898:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 410589c:	410eb940 	call	410eb94 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41058a0:	0005303a 	rdctl	r2,status
 41058a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41058a8:	e0fffd17 	ldw	r3,-12(fp)
 41058ac:	00bfff84 	movi	r2,-2
 41058b0:	1884703a 	and	r2,r3,r2
 41058b4:	1001703a 	wrctl	status,r2
  
  return context;
 41058b8:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 41058bc:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 41058c0:	d0a73317 	ldw	r2,-25396(gp)
 41058c4:	10800044 	addi	r2,r2,1
 41058c8:	d0a73315 	stw	r2,-25396(gp)
 41058cc:	e0bffb17 	ldw	r2,-20(fp)
 41058d0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41058d4:	e0bfff17 	ldw	r2,-4(fp)
 41058d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 41058dc:	d0a72343 	ldbu	r2,-25459(gp)
 41058e0:	10803fcc 	andi	r2,r2,255
 41058e4:	10800058 	cmpnei	r2,r2,1
 41058e8:	10006a1e 	bne	r2,zero,4105a94 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 41058ec:	d0a72703 	ldbu	r2,-25444(gp)
 41058f0:	10803fcc 	andi	r2,r2,255
 41058f4:	10c00060 	cmpeqi	r3,r2,1
 41058f8:	1800061e 	bne	r3,zero,4105914 <OSTimeTick+0x8c>
 41058fc:	10c000a0 	cmpeqi	r3,r2,2
 4105900:	1800061e 	bne	r3,zero,410591c <OSTimeTick+0x94>
 4105904:	10000a1e 	bne	r2,zero,4105930 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 4105908:	00800044 	movi	r2,1
 410590c:	e0bffa05 	stb	r2,-24(fp)
                 break;
 4105910:	00000b06 	br	4105940 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 4105914:	e03ffa05 	stb	zero,-24(fp)
                 break;
 4105918:	00000906 	br	4105940 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 410591c:	00800044 	movi	r2,1
 4105920:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 4105924:	00800044 	movi	r2,1
 4105928:	d0a72705 	stb	r2,-25444(gp)
                 break;
 410592c:	00000406 	br	4105940 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 4105930:	00800044 	movi	r2,1
 4105934:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 4105938:	d0272705 	stb	zero,-25444(gp)
                 break;
 410593c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 4105940:	e0bffa03 	ldbu	r2,-24(fp)
 4105944:	10005226 	beq	r2,zero,4105a90 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 4105948:	d0a72617 	ldw	r2,-25448(gp)
 410594c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4105950:	00004906 	br	4105a78 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4105954:	0005303a 	rdctl	r2,status
 4105958:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410595c:	e0fffc17 	ldw	r3,-16(fp)
 4105960:	00bfff84 	movi	r2,-2
 4105964:	1884703a 	and	r2,r3,r2
 4105968:	1001703a 	wrctl	status,r2
  
  return context;
 410596c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 4105970:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 4105974:	e0bff917 	ldw	r2,-28(fp)
 4105978:	10800b8b 	ldhu	r2,46(r2)
 410597c:	10bfffcc 	andi	r2,r2,65535
 4105980:	10003626 	beq	r2,zero,4105a5c <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 4105984:	e0bff917 	ldw	r2,-28(fp)
 4105988:	10800b8b 	ldhu	r2,46(r2)
 410598c:	10bfffc4 	addi	r2,r2,-1
 4105990:	1007883a 	mov	r3,r2
 4105994:	e0bff917 	ldw	r2,-28(fp)
 4105998:	10c00b8d 	sth	r3,46(r2)
 410599c:	e0bff917 	ldw	r2,-28(fp)
 41059a0:	10800b8b 	ldhu	r2,46(r2)
 41059a4:	10bfffcc 	andi	r2,r2,65535
 41059a8:	10002c1e 	bne	r2,zero,4105a5c <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 41059ac:	e0bff917 	ldw	r2,-28(fp)
 41059b0:	10800c03 	ldbu	r2,48(r2)
 41059b4:	10803fcc 	andi	r2,r2,255
 41059b8:	10800dcc 	andi	r2,r2,55
 41059bc:	10000b26 	beq	r2,zero,41059ec <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 41059c0:	e0bff917 	ldw	r2,-28(fp)
 41059c4:	10c00c03 	ldbu	r3,48(r2)
 41059c8:	00bff204 	movi	r2,-56
 41059cc:	1884703a 	and	r2,r3,r2
 41059d0:	1007883a 	mov	r3,r2
 41059d4:	e0bff917 	ldw	r2,-28(fp)
 41059d8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 41059dc:	e0bff917 	ldw	r2,-28(fp)
 41059e0:	00c00044 	movi	r3,1
 41059e4:	10c00c45 	stb	r3,49(r2)
 41059e8:	00000206 	br	41059f4 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 41059ec:	e0bff917 	ldw	r2,-28(fp)
 41059f0:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 41059f4:	e0bff917 	ldw	r2,-28(fp)
 41059f8:	10800c03 	ldbu	r2,48(r2)
 41059fc:	10803fcc 	andi	r2,r2,255
 4105a00:	1080020c 	andi	r2,r2,8
 4105a04:	1000151e 	bne	r2,zero,4105a5c <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 4105a08:	e0bff917 	ldw	r2,-28(fp)
 4105a0c:	10c00d83 	ldbu	r3,54(r2)
 4105a10:	d0a72f03 	ldbu	r2,-25412(gp)
 4105a14:	1884b03a 	or	r2,r3,r2
 4105a18:	d0a72f05 	stb	r2,-25412(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4105a1c:	e0bff917 	ldw	r2,-28(fp)
 4105a20:	10800d03 	ldbu	r2,52(r2)
 4105a24:	10c03fcc 	andi	r3,r2,255
 4105a28:	e0bff917 	ldw	r2,-28(fp)
 4105a2c:	10800d03 	ldbu	r2,52(r2)
 4105a30:	11003fcc 	andi	r4,r2,255
 4105a34:	d0a72f44 	addi	r2,gp,-25411
 4105a38:	2085883a 	add	r2,r4,r2
 4105a3c:	11000003 	ldbu	r4,0(r2)
 4105a40:	e0bff917 	ldw	r2,-28(fp)
 4105a44:	10800d43 	ldbu	r2,53(r2)
 4105a48:	2084b03a 	or	r2,r4,r2
 4105a4c:	1009883a 	mov	r4,r2
 4105a50:	d0a72f44 	addi	r2,gp,-25411
 4105a54:	1885883a 	add	r2,r3,r2
 4105a58:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 4105a5c:	e0bff917 	ldw	r2,-28(fp)
 4105a60:	10800517 	ldw	r2,20(r2)
 4105a64:	e0bff915 	stw	r2,-28(fp)
 4105a68:	e0bffb17 	ldw	r2,-20(fp)
 4105a6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4105a70:	e0bffe17 	ldw	r2,-8(fp)
 4105a74:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 4105a78:	e0bff917 	ldw	r2,-28(fp)
 4105a7c:	10800c83 	ldbu	r2,50(r2)
 4105a80:	10803fcc 	andi	r2,r2,255
 4105a84:	10800518 	cmpnei	r2,r2,20
 4105a88:	103fb21e 	bne	r2,zero,4105954 <OSTimeTick+0xcc>
 4105a8c:	00000106 	br	4105a94 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 4105a90:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 4105a94:	e037883a 	mov	sp,fp
 4105a98:	dfc00117 	ldw	ra,4(sp)
 4105a9c:	df000017 	ldw	fp,0(sp)
 4105aa0:	dec00204 	addi	sp,sp,8
 4105aa4:	f800283a 	ret

04105aa8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 4105aa8:	deffff04 	addi	sp,sp,-4
 4105aac:	df000015 	stw	fp,0(sp)
 4105ab0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 4105ab4:	00804784 	movi	r2,286
}
 4105ab8:	e037883a 	mov	sp,fp
 4105abc:	df000017 	ldw	fp,0(sp)
 4105ac0:	dec00104 	addi	sp,sp,4
 4105ac4:	f800283a 	ret

04105ac8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 4105ac8:	deffff04 	addi	sp,sp,-4
 4105acc:	df000015 	stw	fp,0(sp)
 4105ad0:	d839883a 	mov	fp,sp
}
 4105ad4:	0001883a 	nop
 4105ad8:	e037883a 	mov	sp,fp
 4105adc:	df000017 	ldw	fp,0(sp)
 4105ae0:	dec00104 	addi	sp,sp,4
 4105ae4:	f800283a 	ret

04105ae8 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 4105ae8:	defff804 	addi	sp,sp,-32
 4105aec:	dfc00715 	stw	ra,28(sp)
 4105af0:	df000615 	stw	fp,24(sp)
 4105af4:	df000604 	addi	fp,sp,24
 4105af8:	e13ffc15 	stw	r4,-16(fp)
 4105afc:	e17ffd15 	stw	r5,-12(fp)
 4105b00:	3007883a 	mov	r3,r6
 4105b04:	3805883a 	mov	r2,r7
 4105b08:	e0fffe05 	stb	r3,-8(fp)
 4105b0c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 4105b10:	e0bffc17 	ldw	r2,-16(fp)
 4105b14:	10800283 	ldbu	r2,10(r2)
 4105b18:	10c03fcc 	andi	r3,r2,255
 4105b1c:	00810474 	movhi	r2,1041
 4105b20:	10bdef04 	addi	r2,r2,-2116
 4105b24:	10c5883a 	add	r2,r2,r3
 4105b28:	10800003 	ldbu	r2,0(r2)
 4105b2c:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 4105b30:	e0bffa03 	ldbu	r2,-24(fp)
 4105b34:	e0fffc17 	ldw	r3,-16(fp)
 4105b38:	1885883a 	add	r2,r3,r2
 4105b3c:	108002c4 	addi	r2,r2,11
 4105b40:	10800003 	ldbu	r2,0(r2)
 4105b44:	10c03fcc 	andi	r3,r2,255
 4105b48:	00810474 	movhi	r2,1041
 4105b4c:	10bdef04 	addi	r2,r2,-2116
 4105b50:	10c5883a 	add	r2,r2,r3
 4105b54:	10800003 	ldbu	r2,0(r2)
 4105b58:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 4105b5c:	e0bffa03 	ldbu	r2,-24(fp)
 4105b60:	100490fa 	slli	r2,r2,3
 4105b64:	1007883a 	mov	r3,r2
 4105b68:	e0bffa43 	ldbu	r2,-23(fp)
 4105b6c:	1885883a 	add	r2,r3,r2
 4105b70:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 4105b74:	e0fffa83 	ldbu	r3,-22(fp)
 4105b78:	008104b4 	movhi	r2,1042
 4105b7c:	10b12504 	addi	r2,r2,-15212
 4105b80:	18c7883a 	add	r3,r3,r3
 4105b84:	18c7883a 	add	r3,r3,r3
 4105b88:	10c5883a 	add	r2,r2,r3
 4105b8c:	10800017 	ldw	r2,0(r2)
 4105b90:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 4105b94:	e0bffb17 	ldw	r2,-20(fp)
 4105b98:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 4105b9c:	e0bffb17 	ldw	r2,-20(fp)
 4105ba0:	e0fffd17 	ldw	r3,-12(fp)
 4105ba4:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 4105ba8:	e0bffb17 	ldw	r2,-20(fp)
 4105bac:	10800c03 	ldbu	r2,48(r2)
 4105bb0:	1007883a 	mov	r3,r2
 4105bb4:	e0bffe03 	ldbu	r2,-8(fp)
 4105bb8:	0084303a 	nor	r2,zero,r2
 4105bbc:	1884703a 	and	r2,r3,r2
 4105bc0:	1007883a 	mov	r3,r2
 4105bc4:	e0bffb17 	ldw	r2,-20(fp)
 4105bc8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 4105bcc:	e0bffb17 	ldw	r2,-20(fp)
 4105bd0:	e0ffff03 	ldbu	r3,-4(fp)
 4105bd4:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 4105bd8:	e0bffb17 	ldw	r2,-20(fp)
 4105bdc:	10800c03 	ldbu	r2,48(r2)
 4105be0:	10803fcc 	andi	r2,r2,255
 4105be4:	1080020c 	andi	r2,r2,8
 4105be8:	1000111e 	bne	r2,zero,4105c30 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 4105bec:	e0bffb17 	ldw	r2,-20(fp)
 4105bf0:	10c00d83 	ldbu	r3,54(r2)
 4105bf4:	d0a72f03 	ldbu	r2,-25412(gp)
 4105bf8:	1884b03a 	or	r2,r3,r2
 4105bfc:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 4105c00:	e0fffa03 	ldbu	r3,-24(fp)
 4105c04:	e13ffa03 	ldbu	r4,-24(fp)
 4105c08:	d0a72f44 	addi	r2,gp,-25411
 4105c0c:	2085883a 	add	r2,r4,r2
 4105c10:	11000003 	ldbu	r4,0(r2)
 4105c14:	e0bffb17 	ldw	r2,-20(fp)
 4105c18:	10800d43 	ldbu	r2,53(r2)
 4105c1c:	2084b03a 	or	r2,r4,r2
 4105c20:	1009883a 	mov	r4,r2
 4105c24:	d0a72f44 	addi	r2,gp,-25411
 4105c28:	1885883a 	add	r2,r3,r2
 4105c2c:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 4105c30:	e17ffc17 	ldw	r5,-16(fp)
 4105c34:	e13ffb17 	ldw	r4,-20(fp)
 4105c38:	4105ee00 	call	4105ee0 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 4105c3c:	e0bffb17 	ldw	r2,-20(fp)
 4105c40:	10800817 	ldw	r2,32(r2)
 4105c44:	10000826 	beq	r2,zero,4105c68 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 4105c48:	e0bffb17 	ldw	r2,-20(fp)
 4105c4c:	10800817 	ldw	r2,32(r2)
 4105c50:	100b883a 	mov	r5,r2
 4105c54:	e13ffb17 	ldw	r4,-20(fp)
 4105c58:	4105f980 	call	4105f98 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 4105c5c:	e0bffb17 	ldw	r2,-20(fp)
 4105c60:	e0fffc17 	ldw	r3,-16(fp)
 4105c64:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 4105c68:	e0bffa83 	ldbu	r2,-22(fp)
}
 4105c6c:	e037883a 	mov	sp,fp
 4105c70:	dfc00117 	ldw	ra,4(sp)
 4105c74:	df000017 	ldw	fp,0(sp)
 4105c78:	dec00204 	addi	sp,sp,8
 4105c7c:	f800283a 	ret

04105c80 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 4105c80:	defffd04 	addi	sp,sp,-12
 4105c84:	df000215 	stw	fp,8(sp)
 4105c88:	df000204 	addi	fp,sp,8
 4105c8c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 4105c90:	d0a73217 	ldw	r2,-25400(gp)
 4105c94:	e0ffff17 	ldw	r3,-4(fp)
 4105c98:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 4105c9c:	d0a73217 	ldw	r2,-25400(gp)
 4105ca0:	10800d03 	ldbu	r2,52(r2)
 4105ca4:	10803fcc 	andi	r2,r2,255
 4105ca8:	d0e73217 	ldw	r3,-25400(gp)
 4105cac:	18c00d03 	ldbu	r3,52(r3)
 4105cb0:	18c03fcc 	andi	r3,r3,255
 4105cb4:	e13fff17 	ldw	r4,-4(fp)
 4105cb8:	20c7883a 	add	r3,r4,r3
 4105cbc:	18c002c4 	addi	r3,r3,11
 4105cc0:	19000003 	ldbu	r4,0(r3)
 4105cc4:	d0e73217 	ldw	r3,-25400(gp)
 4105cc8:	18c00d43 	ldbu	r3,53(r3)
 4105ccc:	20c6b03a 	or	r3,r4,r3
 4105cd0:	1809883a 	mov	r4,r3
 4105cd4:	e0ffff17 	ldw	r3,-4(fp)
 4105cd8:	1885883a 	add	r2,r3,r2
 4105cdc:	108002c4 	addi	r2,r2,11
 4105ce0:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 4105ce4:	e0bfff17 	ldw	r2,-4(fp)
 4105ce8:	10c00283 	ldbu	r3,10(r2)
 4105cec:	d0a73217 	ldw	r2,-25400(gp)
 4105cf0:	10800d83 	ldbu	r2,54(r2)
 4105cf4:	1884b03a 	or	r2,r3,r2
 4105cf8:	1007883a 	mov	r3,r2
 4105cfc:	e0bfff17 	ldw	r2,-4(fp)
 4105d00:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 4105d04:	d0a73217 	ldw	r2,-25400(gp)
 4105d08:	10800d03 	ldbu	r2,52(r2)
 4105d0c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 4105d10:	e0fffe03 	ldbu	r3,-8(fp)
 4105d14:	e13ffe03 	ldbu	r4,-8(fp)
 4105d18:	d0a72f44 	addi	r2,gp,-25411
 4105d1c:	2085883a 	add	r2,r4,r2
 4105d20:	10800003 	ldbu	r2,0(r2)
 4105d24:	1009883a 	mov	r4,r2
 4105d28:	d0a73217 	ldw	r2,-25400(gp)
 4105d2c:	10800d43 	ldbu	r2,53(r2)
 4105d30:	0084303a 	nor	r2,zero,r2
 4105d34:	2084703a 	and	r2,r4,r2
 4105d38:	1009883a 	mov	r4,r2
 4105d3c:	d0a72f44 	addi	r2,gp,-25411
 4105d40:	1885883a 	add	r2,r3,r2
 4105d44:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 4105d48:	e0fffe03 	ldbu	r3,-8(fp)
 4105d4c:	d0a72f44 	addi	r2,gp,-25411
 4105d50:	1885883a 	add	r2,r3,r2
 4105d54:	10800003 	ldbu	r2,0(r2)
 4105d58:	10803fcc 	andi	r2,r2,255
 4105d5c:	1000071e 	bne	r2,zero,4105d7c <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 4105d60:	d0a73217 	ldw	r2,-25400(gp)
 4105d64:	10800d83 	ldbu	r2,54(r2)
 4105d68:	0084303a 	nor	r2,zero,r2
 4105d6c:	1007883a 	mov	r3,r2
 4105d70:	d0a72f03 	ldbu	r2,-25412(gp)
 4105d74:	1884703a 	and	r2,r3,r2
 4105d78:	d0a72f05 	stb	r2,-25412(gp)
    }
}
 4105d7c:	0001883a 	nop
 4105d80:	e037883a 	mov	sp,fp
 4105d84:	df000017 	ldw	fp,0(sp)
 4105d88:	dec00104 	addi	sp,sp,4
 4105d8c:	f800283a 	ret

04105d90 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 4105d90:	defffb04 	addi	sp,sp,-20
 4105d94:	df000415 	stw	fp,16(sp)
 4105d98:	df000404 	addi	fp,sp,16
 4105d9c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 4105da0:	d0a73217 	ldw	r2,-25400(gp)
 4105da4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 4105da8:	d0a73217 	ldw	r2,-25400(gp)
 4105dac:	e0ffff17 	ldw	r3,-4(fp)
 4105db0:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 4105db4:	e0bfff17 	ldw	r2,-4(fp)
 4105db8:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 4105dbc:	e0bffc17 	ldw	r2,-16(fp)
 4105dc0:	10800017 	ldw	r2,0(r2)
 4105dc4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 4105dc8:	00002006 	br	4105e4c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 4105dcc:	d0a73217 	ldw	r2,-25400(gp)
 4105dd0:	10800d03 	ldbu	r2,52(r2)
 4105dd4:	10803fcc 	andi	r2,r2,255
 4105dd8:	d0e73217 	ldw	r3,-25400(gp)
 4105ddc:	18c00d03 	ldbu	r3,52(r3)
 4105de0:	18c03fcc 	andi	r3,r3,255
 4105de4:	e13ffd17 	ldw	r4,-12(fp)
 4105de8:	20c7883a 	add	r3,r4,r3
 4105dec:	18c002c4 	addi	r3,r3,11
 4105df0:	19000003 	ldbu	r4,0(r3)
 4105df4:	d0e73217 	ldw	r3,-25400(gp)
 4105df8:	18c00d43 	ldbu	r3,53(r3)
 4105dfc:	20c6b03a 	or	r3,r4,r3
 4105e00:	1809883a 	mov	r4,r3
 4105e04:	e0fffd17 	ldw	r3,-12(fp)
 4105e08:	1885883a 	add	r2,r3,r2
 4105e0c:	108002c4 	addi	r2,r2,11
 4105e10:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 4105e14:	e0bffd17 	ldw	r2,-12(fp)
 4105e18:	10c00283 	ldbu	r3,10(r2)
 4105e1c:	d0a73217 	ldw	r2,-25400(gp)
 4105e20:	10800d83 	ldbu	r2,54(r2)
 4105e24:	1884b03a 	or	r2,r3,r2
 4105e28:	1007883a 	mov	r3,r2
 4105e2c:	e0bffd17 	ldw	r2,-12(fp)
 4105e30:	10c00285 	stb	r3,10(r2)
        pevents++;
 4105e34:	e0bffc17 	ldw	r2,-16(fp)
 4105e38:	10800104 	addi	r2,r2,4
 4105e3c:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 4105e40:	e0bffc17 	ldw	r2,-16(fp)
 4105e44:	10800017 	ldw	r2,0(r2)
 4105e48:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 4105e4c:	e0bffd17 	ldw	r2,-12(fp)
 4105e50:	103fde1e 	bne	r2,zero,4105dcc <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 4105e54:	d0a73217 	ldw	r2,-25400(gp)
 4105e58:	10800d03 	ldbu	r2,52(r2)
 4105e5c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 4105e60:	e0fffe03 	ldbu	r3,-8(fp)
 4105e64:	e13ffe03 	ldbu	r4,-8(fp)
 4105e68:	d0a72f44 	addi	r2,gp,-25411
 4105e6c:	2085883a 	add	r2,r4,r2
 4105e70:	10800003 	ldbu	r2,0(r2)
 4105e74:	1009883a 	mov	r4,r2
 4105e78:	d0a73217 	ldw	r2,-25400(gp)
 4105e7c:	10800d43 	ldbu	r2,53(r2)
 4105e80:	0084303a 	nor	r2,zero,r2
 4105e84:	2084703a 	and	r2,r4,r2
 4105e88:	1009883a 	mov	r4,r2
 4105e8c:	d0a72f44 	addi	r2,gp,-25411
 4105e90:	1885883a 	add	r2,r3,r2
 4105e94:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 4105e98:	e0fffe03 	ldbu	r3,-8(fp)
 4105e9c:	d0a72f44 	addi	r2,gp,-25411
 4105ea0:	1885883a 	add	r2,r3,r2
 4105ea4:	10800003 	ldbu	r2,0(r2)
 4105ea8:	10803fcc 	andi	r2,r2,255
 4105eac:	1000071e 	bne	r2,zero,4105ecc <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 4105eb0:	d0a73217 	ldw	r2,-25400(gp)
 4105eb4:	10800d83 	ldbu	r2,54(r2)
 4105eb8:	0084303a 	nor	r2,zero,r2
 4105ebc:	1007883a 	mov	r3,r2
 4105ec0:	d0a72f03 	ldbu	r2,-25412(gp)
 4105ec4:	1884703a 	and	r2,r3,r2
 4105ec8:	d0a72f05 	stb	r2,-25412(gp)
    }
}
 4105ecc:	0001883a 	nop
 4105ed0:	e037883a 	mov	sp,fp
 4105ed4:	df000017 	ldw	fp,0(sp)
 4105ed8:	dec00104 	addi	sp,sp,4
 4105edc:	f800283a 	ret

04105ee0 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 4105ee0:	defffc04 	addi	sp,sp,-16
 4105ee4:	df000315 	stw	fp,12(sp)
 4105ee8:	df000304 	addi	fp,sp,12
 4105eec:	e13ffe15 	stw	r4,-8(fp)
 4105ef0:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 4105ef4:	e0bffe17 	ldw	r2,-8(fp)
 4105ef8:	10800d03 	ldbu	r2,52(r2)
 4105efc:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 4105f00:	e0bffd03 	ldbu	r2,-12(fp)
 4105f04:	e0fffd03 	ldbu	r3,-12(fp)
 4105f08:	e13fff17 	ldw	r4,-4(fp)
 4105f0c:	20c7883a 	add	r3,r4,r3
 4105f10:	18c002c4 	addi	r3,r3,11
 4105f14:	18c00003 	ldbu	r3,0(r3)
 4105f18:	1809883a 	mov	r4,r3
 4105f1c:	e0fffe17 	ldw	r3,-8(fp)
 4105f20:	18c00d43 	ldbu	r3,53(r3)
 4105f24:	00c6303a 	nor	r3,zero,r3
 4105f28:	20c6703a 	and	r3,r4,r3
 4105f2c:	1809883a 	mov	r4,r3
 4105f30:	e0ffff17 	ldw	r3,-4(fp)
 4105f34:	1885883a 	add	r2,r3,r2
 4105f38:	108002c4 	addi	r2,r2,11
 4105f3c:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 4105f40:	e0bffd03 	ldbu	r2,-12(fp)
 4105f44:	e0ffff17 	ldw	r3,-4(fp)
 4105f48:	1885883a 	add	r2,r3,r2
 4105f4c:	108002c4 	addi	r2,r2,11
 4105f50:	10800003 	ldbu	r2,0(r2)
 4105f54:	10803fcc 	andi	r2,r2,255
 4105f58:	10000a1e 	bne	r2,zero,4105f84 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 4105f5c:	e0bfff17 	ldw	r2,-4(fp)
 4105f60:	10800283 	ldbu	r2,10(r2)
 4105f64:	1007883a 	mov	r3,r2
 4105f68:	e0bffe17 	ldw	r2,-8(fp)
 4105f6c:	10800d83 	ldbu	r2,54(r2)
 4105f70:	0084303a 	nor	r2,zero,r2
 4105f74:	1884703a 	and	r2,r3,r2
 4105f78:	1007883a 	mov	r3,r2
 4105f7c:	e0bfff17 	ldw	r2,-4(fp)
 4105f80:	10c00285 	stb	r3,10(r2)
    }
}
 4105f84:	0001883a 	nop
 4105f88:	e037883a 	mov	sp,fp
 4105f8c:	df000017 	ldw	fp,0(sp)
 4105f90:	dec00104 	addi	sp,sp,4
 4105f94:	f800283a 	ret

04105f98 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 4105f98:	defffa04 	addi	sp,sp,-24
 4105f9c:	df000515 	stw	fp,20(sp)
 4105fa0:	df000504 	addi	fp,sp,20
 4105fa4:	e13ffe15 	stw	r4,-8(fp)
 4105fa8:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 4105fac:	e0bffe17 	ldw	r2,-8(fp)
 4105fb0:	10800d03 	ldbu	r2,52(r2)
 4105fb4:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 4105fb8:	e0bffe17 	ldw	r2,-8(fp)
 4105fbc:	10800d83 	ldbu	r2,54(r2)
 4105fc0:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 4105fc4:	e0bffe17 	ldw	r2,-8(fp)
 4105fc8:	10800d43 	ldbu	r2,53(r2)
 4105fcc:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 4105fd0:	e0bfff17 	ldw	r2,-4(fp)
 4105fd4:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 4105fd8:	e0bffb17 	ldw	r2,-20(fp)
 4105fdc:	10800017 	ldw	r2,0(r2)
 4105fe0:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 4105fe4:	00002506 	br	410607c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 4105fe8:	e0bffd03 	ldbu	r2,-12(fp)
 4105fec:	e0fffd03 	ldbu	r3,-12(fp)
 4105ff0:	e13ffc17 	ldw	r4,-16(fp)
 4105ff4:	20c7883a 	add	r3,r4,r3
 4105ff8:	18c002c4 	addi	r3,r3,11
 4105ffc:	18c00003 	ldbu	r3,0(r3)
 4106000:	1809883a 	mov	r4,r3
 4106004:	e0fffd83 	ldbu	r3,-10(fp)
 4106008:	00c6303a 	nor	r3,zero,r3
 410600c:	20c6703a 	and	r3,r4,r3
 4106010:	1809883a 	mov	r4,r3
 4106014:	e0fffc17 	ldw	r3,-16(fp)
 4106018:	1885883a 	add	r2,r3,r2
 410601c:	108002c4 	addi	r2,r2,11
 4106020:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 4106024:	e0bffd03 	ldbu	r2,-12(fp)
 4106028:	e0fffc17 	ldw	r3,-16(fp)
 410602c:	1885883a 	add	r2,r3,r2
 4106030:	108002c4 	addi	r2,r2,11
 4106034:	10800003 	ldbu	r2,0(r2)
 4106038:	10803fcc 	andi	r2,r2,255
 410603c:	1000091e 	bne	r2,zero,4106064 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 4106040:	e0bffc17 	ldw	r2,-16(fp)
 4106044:	10800283 	ldbu	r2,10(r2)
 4106048:	1007883a 	mov	r3,r2
 410604c:	e0bffd43 	ldbu	r2,-11(fp)
 4106050:	0084303a 	nor	r2,zero,r2
 4106054:	1884703a 	and	r2,r3,r2
 4106058:	1007883a 	mov	r3,r2
 410605c:	e0bffc17 	ldw	r2,-16(fp)
 4106060:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 4106064:	e0bffb17 	ldw	r2,-20(fp)
 4106068:	10800104 	addi	r2,r2,4
 410606c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 4106070:	e0bffb17 	ldw	r2,-20(fp)
 4106074:	10800017 	ldw	r2,0(r2)
 4106078:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 410607c:	e0bffc17 	ldw	r2,-16(fp)
 4106080:	103fd91e 	bne	r2,zero,4105fe8 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 4106084:	0001883a 	nop
 4106088:	e037883a 	mov	sp,fp
 410608c:	df000017 	ldw	fp,0(sp)
 4106090:	dec00104 	addi	sp,sp,4
 4106094:	f800283a 	ret

04106098 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 4106098:	defffc04 	addi	sp,sp,-16
 410609c:	df000315 	stw	fp,12(sp)
 41060a0:	df000304 	addi	fp,sp,12
 41060a4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 41060a8:	e0bfff17 	ldw	r2,-4(fp)
 41060ac:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 41060b0:	e0bfff17 	ldw	r2,-4(fp)
 41060b4:	108002c4 	addi	r2,r2,11
 41060b8:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 41060bc:	e03ffe05 	stb	zero,-8(fp)
 41060c0:	00000706 	br	41060e0 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 41060c4:	e0bffd17 	ldw	r2,-12(fp)
 41060c8:	10c00044 	addi	r3,r2,1
 41060cc:	e0fffd15 	stw	r3,-12(fp)
 41060d0:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 41060d4:	e0bffe03 	ldbu	r2,-8(fp)
 41060d8:	10800044 	addi	r2,r2,1
 41060dc:	e0bffe05 	stb	r2,-8(fp)
 41060e0:	e0bffe03 	ldbu	r2,-8(fp)
 41060e4:	108000f0 	cmpltui	r2,r2,3
 41060e8:	103ff61e 	bne	r2,zero,41060c4 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 41060ec:	0001883a 	nop
 41060f0:	e037883a 	mov	sp,fp
 41060f4:	df000017 	ldw	fp,0(sp)
 41060f8:	dec00104 	addi	sp,sp,4
 41060fc:	f800283a 	ret

04106100 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 4106100:	defffb04 	addi	sp,sp,-20
 4106104:	dfc00415 	stw	ra,16(sp)
 4106108:	df000315 	stw	fp,12(sp)
 410610c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 4106110:	0142d004 	movi	r5,2880
 4106114:	010104b4 	movhi	r4,1042
 4106118:	212d1104 	addi	r4,r4,-19388
 410611c:	41064780 	call	4106478 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 4106120:	008104b4 	movhi	r2,1042
 4106124:	10ad1104 	addi	r2,r2,-19388
 4106128:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 410612c:	008104b4 	movhi	r2,1042
 4106130:	10ad1d04 	addi	r2,r2,-19340
 4106134:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 4106138:	e03ffd0d 	sth	zero,-12(fp)
 410613c:	00001306 	br	410618c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4106140:	e0bffe17 	ldw	r2,-8(fp)
 4106144:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 4106148:	e0bffe17 	ldw	r2,-8(fp)
 410614c:	e0ffff17 	ldw	r3,-4(fp)
 4106150:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 4106154:	e0bffe17 	ldw	r2,-8(fp)
 4106158:	00c00fc4 	movi	r3,63
 410615c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 4106160:	e0bffe17 	ldw	r2,-8(fp)
 4106164:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 4106168:	e0bffe17 	ldw	r2,-8(fp)
 410616c:	10800c04 	addi	r2,r2,48
 4106170:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 4106174:	e0bfff17 	ldw	r2,-4(fp)
 4106178:	10800c04 	addi	r2,r2,48
 410617c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 4106180:	e0bffd0b 	ldhu	r2,-12(fp)
 4106184:	10800044 	addi	r2,r2,1
 4106188:	e0bffd0d 	sth	r2,-12(fp)
 410618c:	e0bffd0b 	ldhu	r2,-12(fp)
 4106190:	10800ef0 	cmpltui	r2,r2,59
 4106194:	103fea1e 	bne	r2,zero,4106140 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 4106198:	e0bffe17 	ldw	r2,-8(fp)
 410619c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 41061a0:	e0bffe17 	ldw	r2,-8(fp)
 41061a4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 41061a8:	e0bffe17 	ldw	r2,-8(fp)
 41061ac:	00c00fc4 	movi	r3,63
 41061b0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 41061b4:	e0bffe17 	ldw	r2,-8(fp)
 41061b8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 41061bc:	008104b4 	movhi	r2,1042
 41061c0:	10ad1104 	addi	r2,r2,-19388
 41061c4:	d0a73015 	stw	r2,-25408(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 41061c8:	0001883a 	nop
 41061cc:	e037883a 	mov	sp,fp
 41061d0:	dfc00117 	ldw	ra,4(sp)
 41061d4:	df000017 	ldw	fp,0(sp)
 41061d8:	dec00204 	addi	sp,sp,8
 41061dc:	f800283a 	ret

041061e0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 41061e0:	deffff04 	addi	sp,sp,-4
 41061e4:	df000015 	stw	fp,0(sp)
 41061e8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 41061ec:	d0273315 	stw	zero,-25396(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 41061f0:	d0273105 	stb	zero,-25404(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 41061f4:	d0272305 	stb	zero,-25460(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 41061f8:	d0272b45 	stb	zero,-25427(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 41061fc:	d0272345 	stb	zero,-25459(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 4106200:	d0272815 	stw	zero,-25440(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 4106204:	d0272415 	stw	zero,-25456(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 4106208:	d0273615 	stw	zero,-25384(gp)
    OSIdleCtrMax  = 0L;
 410620c:	d0272915 	stw	zero,-25436(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 4106210:	d0273505 	stb	zero,-25388(gp)
#endif
}
 4106214:	0001883a 	nop
 4106218:	e037883a 	mov	sp,fp
 410621c:	df000017 	ldw	fp,0(sp)
 4106220:	dec00104 	addi	sp,sp,4
 4106224:	f800283a 	ret

04106228 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 4106228:	defffd04 	addi	sp,sp,-12
 410622c:	df000215 	stw	fp,8(sp)
 4106230:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 4106234:	d0272f05 	stb	zero,-25412(gp)
    prdytbl       = &OSRdyTbl[0];
 4106238:	d0a72f44 	addi	r2,gp,-25411
 410623c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 4106240:	e03ffe05 	stb	zero,-8(fp)
 4106244:	00000706 	br	4106264 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 4106248:	e0bfff17 	ldw	r2,-4(fp)
 410624c:	10c00044 	addi	r3,r2,1
 4106250:	e0ffff15 	stw	r3,-4(fp)
 4106254:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 4106258:	e0bffe03 	ldbu	r2,-8(fp)
 410625c:	10800044 	addi	r2,r2,1
 4106260:	e0bffe05 	stb	r2,-8(fp)
 4106264:	e0bffe03 	ldbu	r2,-8(fp)
 4106268:	108000f0 	cmpltui	r2,r2,3
 410626c:	103ff61e 	bne	r2,zero,4106248 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 4106270:	d0272545 	stb	zero,-25451(gp)
    OSPrioHighRdy = 0;
 4106274:	d0272505 	stb	zero,-25452(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 4106278:	d0272d15 	stw	zero,-25420(gp)
    OSTCBCur      = (OS_TCB *)0;
 410627c:	d0273215 	stw	zero,-25400(gp)
}
 4106280:	0001883a 	nop
 4106284:	e037883a 	mov	sp,fp
 4106288:	df000017 	ldw	fp,0(sp)
 410628c:	dec00104 	addi	sp,sp,4
 4106290:	f800283a 	ret

04106294 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 4106294:	defff804 	addi	sp,sp,-32
 4106298:	dfc00715 	stw	ra,28(sp)
 410629c:	df000615 	stw	fp,24(sp)
 41062a0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 41062a4:	008000c4 	movi	r2,3
 41062a8:	d8800415 	stw	r2,16(sp)
 41062ac:	d8000315 	stw	zero,12(sp)
 41062b0:	00808004 	movi	r2,512
 41062b4:	d8800215 	stw	r2,8(sp)
 41062b8:	008104b4 	movhi	r2,1042
 41062bc:	10ab1104 	addi	r2,r2,-21436
 41062c0:	d8800115 	stw	r2,4(sp)
 41062c4:	00bfffd4 	movui	r2,65535
 41062c8:	d8800015 	stw	r2,0(sp)
 41062cc:	01c00504 	movi	r7,20
 41062d0:	018104b4 	movhi	r6,1042
 41062d4:	31ad1004 	addi	r6,r6,-19392
 41062d8:	000b883a 	mov	r5,zero
 41062dc:	01010434 	movhi	r4,1040
 41062e0:	2119d004 	addi	r4,r4,26432
 41062e4:	410ae000 	call	410ae00 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 41062e8:	e1bfff04 	addi	r6,fp,-4
 41062ec:	01410474 	movhi	r5,1041
 41062f0:	297e2f04 	addi	r5,r5,-1860
 41062f4:	01000504 	movi	r4,20
 41062f8:	410b6100 	call	410b610 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 41062fc:	0001883a 	nop
 4106300:	e037883a 	mov	sp,fp
 4106304:	dfc00117 	ldw	ra,4(sp)
 4106308:	df000017 	ldw	fp,0(sp)
 410630c:	dec00204 	addi	sp,sp,8
 4106310:	f800283a 	ret

04106314 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 4106314:	defff804 	addi	sp,sp,-32
 4106318:	dfc00715 	stw	ra,28(sp)
 410631c:	df000615 	stw	fp,24(sp)
 4106320:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 4106324:	008000c4 	movi	r2,3
 4106328:	d8800415 	stw	r2,16(sp)
 410632c:	d8000315 	stw	zero,12(sp)
 4106330:	00808004 	movi	r2,512
 4106334:	d8800215 	stw	r2,8(sp)
 4106338:	008104b4 	movhi	r2,1042
 410633c:	10a89904 	addi	r2,r2,-23964
 4106340:	d8800115 	stw	r2,4(sp)
 4106344:	00bfff94 	movui	r2,65534
 4106348:	d8800015 	stw	r2,0(sp)
 410634c:	01c004c4 	movi	r7,19
 4106350:	018104b4 	movhi	r6,1042
 4106354:	31aa9804 	addi	r6,r6,-21920
 4106358:	000b883a 	mov	r5,zero
 410635c:	01010434 	movhi	r4,1040
 4106360:	2119e704 	addi	r4,r4,26524
 4106364:	410ae000 	call	410ae00 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 4106368:	e1bfff04 	addi	r6,fp,-4
 410636c:	01410474 	movhi	r5,1041
 4106370:	297e3304 	addi	r5,r5,-1844
 4106374:	010004c4 	movi	r4,19
 4106378:	410b6100 	call	410b610 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 410637c:	0001883a 	nop
 4106380:	e037883a 	mov	sp,fp
 4106384:	dfc00117 	ldw	ra,4(sp)
 4106388:	df000017 	ldw	fp,0(sp)
 410638c:	dec00204 	addi	sp,sp,8
 4106390:	f800283a 	ret

04106394 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 4106394:	defffb04 	addi	sp,sp,-20
 4106398:	dfc00415 	stw	ra,16(sp)
 410639c:	df000315 	stw	fp,12(sp)
 41063a0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 41063a4:	01414404 	movi	r5,1296
 41063a8:	010104b4 	movhi	r4,1042
 41063ac:	212fe104 	addi	r4,r4,-16508
 41063b0:	41064780 	call	4106478 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 41063b4:	01401504 	movi	r5,84
 41063b8:	010104b4 	movhi	r4,1042
 41063bc:	21312504 	addi	r4,r4,-15212
 41063c0:	41064780 	call	4106478 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 41063c4:	008104b4 	movhi	r2,1042
 41063c8:	10afe104 	addi	r2,r2,-16508
 41063cc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 41063d0:	008104b4 	movhi	r2,1042
 41063d4:	10affc04 	addi	r2,r2,-16400
 41063d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 41063dc:	e03ffd05 	stb	zero,-12(fp)
 41063e0:	00001106 	br	4106428 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 41063e4:	e0bffe17 	ldw	r2,-8(fp)
 41063e8:	e0ffff17 	ldw	r3,-4(fp)
 41063ec:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 41063f0:	e0bffe17 	ldw	r2,-8(fp)
 41063f4:	00c00fc4 	movi	r3,63
 41063f8:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 41063fc:	e0bffe17 	ldw	r2,-8(fp)
 4106400:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 4106404:	e0bffe17 	ldw	r2,-8(fp)
 4106408:	10801b04 	addi	r2,r2,108
 410640c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 4106410:	e0bfff17 	ldw	r2,-4(fp)
 4106414:	10801b04 	addi	r2,r2,108
 4106418:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 410641c:	e0bffd03 	ldbu	r2,-12(fp)
 4106420:	10800044 	addi	r2,r2,1
 4106424:	e0bffd05 	stb	r2,-12(fp)
 4106428:	e0bffd03 	ldbu	r2,-12(fp)
 410642c:	108002f0 	cmpltui	r2,r2,11
 4106430:	103fec1e 	bne	r2,zero,41063e4 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 4106434:	e0bffe17 	ldw	r2,-8(fp)
 4106438:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 410643c:	e0bffe17 	ldw	r2,-8(fp)
 4106440:	00c00fc4 	movi	r3,63
 4106444:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 4106448:	e0bffe17 	ldw	r2,-8(fp)
 410644c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 4106450:	d0272615 	stw	zero,-25448(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 4106454:	008104b4 	movhi	r2,1042
 4106458:	10afe104 	addi	r2,r2,-16508
 410645c:	d0a72a15 	stw	r2,-25432(gp)
}
 4106460:	0001883a 	nop
 4106464:	e037883a 	mov	sp,fp
 4106468:	dfc00117 	ldw	ra,4(sp)
 410646c:	df000017 	ldw	fp,0(sp)
 4106470:	dec00204 	addi	sp,sp,8
 4106474:	f800283a 	ret

04106478 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 4106478:	defffd04 	addi	sp,sp,-12
 410647c:	df000215 	stw	fp,8(sp)
 4106480:	df000204 	addi	fp,sp,8
 4106484:	e13ffe15 	stw	r4,-8(fp)
 4106488:	2805883a 	mov	r2,r5
 410648c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 4106490:	00000706 	br	41064b0 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 4106494:	e0bffe17 	ldw	r2,-8(fp)
 4106498:	10c00044 	addi	r3,r2,1
 410649c:	e0fffe15 	stw	r3,-8(fp)
 41064a0:	10000005 	stb	zero,0(r2)
        size--;
 41064a4:	e0bfff0b 	ldhu	r2,-4(fp)
 41064a8:	10bfffc4 	addi	r2,r2,-1
 41064ac:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 41064b0:	e0bfff0b 	ldhu	r2,-4(fp)
 41064b4:	103ff71e 	bne	r2,zero,4106494 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 41064b8:	0001883a 	nop
 41064bc:	e037883a 	mov	sp,fp
 41064c0:	df000017 	ldw	fp,0(sp)
 41064c4:	dec00104 	addi	sp,sp,4
 41064c8:	f800283a 	ret

041064cc <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 41064cc:	defffc04 	addi	sp,sp,-16
 41064d0:	df000315 	stw	fp,12(sp)
 41064d4:	df000304 	addi	fp,sp,12
 41064d8:	e13ffd15 	stw	r4,-12(fp)
 41064dc:	e17ffe15 	stw	r5,-8(fp)
 41064e0:	3005883a 	mov	r2,r6
 41064e4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 41064e8:	00000b06 	br	4106518 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 41064ec:	e0bffd17 	ldw	r2,-12(fp)
 41064f0:	10c00044 	addi	r3,r2,1
 41064f4:	e0fffd15 	stw	r3,-12(fp)
 41064f8:	e0fffe17 	ldw	r3,-8(fp)
 41064fc:	19000044 	addi	r4,r3,1
 4106500:	e13ffe15 	stw	r4,-8(fp)
 4106504:	18c00003 	ldbu	r3,0(r3)
 4106508:	10c00005 	stb	r3,0(r2)
        size--;
 410650c:	e0bfff0b 	ldhu	r2,-4(fp)
 4106510:	10bfffc4 	addi	r2,r2,-1
 4106514:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 4106518:	e0bfff0b 	ldhu	r2,-4(fp)
 410651c:	103ff31e 	bne	r2,zero,41064ec <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 4106520:	0001883a 	nop
 4106524:	e037883a 	mov	sp,fp
 4106528:	df000017 	ldw	fp,0(sp)
 410652c:	dec00104 	addi	sp,sp,4
 4106530:	f800283a 	ret

04106534 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 4106534:	defffb04 	addi	sp,sp,-20
 4106538:	dfc00415 	stw	ra,16(sp)
 410653c:	df000315 	stw	fp,12(sp)
 4106540:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4106544:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4106548:	0005303a 	rdctl	r2,status
 410654c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4106550:	e0ffff17 	ldw	r3,-4(fp)
 4106554:	00bfff84 	movi	r2,-2
 4106558:	1884703a 	and	r2,r3,r2
 410655c:	1001703a 	wrctl	status,r2
  
  return context;
 4106560:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 4106564:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 4106568:	d0a73103 	ldbu	r2,-25404(gp)
 410656c:	10803fcc 	andi	r2,r2,255
 4106570:	10001a1e 	bne	r2,zero,41065dc <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 4106574:	d0a72303 	ldbu	r2,-25460(gp)
 4106578:	10803fcc 	andi	r2,r2,255
 410657c:	1000171e 	bne	r2,zero,41065dc <OS_Sched+0xa8>
            OS_SchedNew();
 4106580:	41066040 	call	4106604 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 4106584:	d0e72503 	ldbu	r3,-25452(gp)
 4106588:	d0a72543 	ldbu	r2,-25451(gp)
 410658c:	18c03fcc 	andi	r3,r3,255
 4106590:	10803fcc 	andi	r2,r2,255
 4106594:	18801126 	beq	r3,r2,41065dc <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 4106598:	d0a72503 	ldbu	r2,-25452(gp)
 410659c:	10c03fcc 	andi	r3,r2,255
 41065a0:	008104b4 	movhi	r2,1042
 41065a4:	10b12504 	addi	r2,r2,-15212
 41065a8:	18c7883a 	add	r3,r3,r3
 41065ac:	18c7883a 	add	r3,r3,r3
 41065b0:	10c5883a 	add	r2,r2,r3
 41065b4:	10800017 	ldw	r2,0(r2)
 41065b8:	d0a72d15 	stw	r2,-25420(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 41065bc:	d0a72d17 	ldw	r2,-25420(gp)
 41065c0:	10c00e17 	ldw	r3,56(r2)
 41065c4:	18c00044 	addi	r3,r3,1
 41065c8:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 41065cc:	d0a72817 	ldw	r2,-25440(gp)
 41065d0:	10800044 	addi	r2,r2,1
 41065d4:	d0a72815 	stw	r2,-25440(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 41065d8:	410e8e00 	call	410e8e0 <OSCtxSw>
 41065dc:	e0bffd17 	ldw	r2,-12(fp)
 41065e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41065e4:	e0bffe17 	ldw	r2,-8(fp)
 41065e8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 41065ec:	0001883a 	nop
 41065f0:	e037883a 	mov	sp,fp
 41065f4:	dfc00117 	ldw	ra,4(sp)
 41065f8:	df000017 	ldw	fp,0(sp)
 41065fc:	dec00204 	addi	sp,sp,8
 4106600:	f800283a 	ret

04106604 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 4106604:	defffe04 	addi	sp,sp,-8
 4106608:	df000115 	stw	fp,4(sp)
 410660c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 4106610:	d0a72f03 	ldbu	r2,-25412(gp)
 4106614:	10c03fcc 	andi	r3,r2,255
 4106618:	00810474 	movhi	r2,1041
 410661c:	10bdef04 	addi	r2,r2,-2116
 4106620:	10c5883a 	add	r2,r2,r3
 4106624:	10800003 	ldbu	r2,0(r2)
 4106628:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 410662c:	e0bfff03 	ldbu	r2,-4(fp)
 4106630:	100490fa 	slli	r2,r2,3
 4106634:	1009883a 	mov	r4,r2
 4106638:	e0ffff03 	ldbu	r3,-4(fp)
 410663c:	d0a72f44 	addi	r2,gp,-25411
 4106640:	1885883a 	add	r2,r3,r2
 4106644:	10800003 	ldbu	r2,0(r2)
 4106648:	10c03fcc 	andi	r3,r2,255
 410664c:	00810474 	movhi	r2,1041
 4106650:	10bdef04 	addi	r2,r2,-2116
 4106654:	10c5883a 	add	r2,r2,r3
 4106658:	10800003 	ldbu	r2,0(r2)
 410665c:	2085883a 	add	r2,r4,r2
 4106660:	d0a72505 	stb	r2,-25452(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 4106664:	0001883a 	nop
 4106668:	e037883a 	mov	sp,fp
 410666c:	df000017 	ldw	fp,0(sp)
 4106670:	dec00104 	addi	sp,sp,4
 4106674:	f800283a 	ret

04106678 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 4106678:	defffc04 	addi	sp,sp,-16
 410667c:	df000315 	stw	fp,12(sp)
 4106680:	df000304 	addi	fp,sp,12
 4106684:	e13ffe15 	stw	r4,-8(fp)
 4106688:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 410668c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 4106690:	00000b06 	br	41066c0 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 4106694:	e0bffe17 	ldw	r2,-8(fp)
 4106698:	10c00044 	addi	r3,r2,1
 410669c:	e0fffe15 	stw	r3,-8(fp)
 41066a0:	e0ffff17 	ldw	r3,-4(fp)
 41066a4:	19000044 	addi	r4,r3,1
 41066a8:	e13fff15 	stw	r4,-4(fp)
 41066ac:	18c00003 	ldbu	r3,0(r3)
 41066b0:	10c00005 	stb	r3,0(r2)
        len++;
 41066b4:	e0bffd03 	ldbu	r2,-12(fp)
 41066b8:	10800044 	addi	r2,r2,1
 41066bc:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 41066c0:	e0bfff17 	ldw	r2,-4(fp)
 41066c4:	10800003 	ldbu	r2,0(r2)
 41066c8:	10803fcc 	andi	r2,r2,255
 41066cc:	103ff11e 	bne	r2,zero,4106694 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 41066d0:	e0bffe17 	ldw	r2,-8(fp)
 41066d4:	10000005 	stb	zero,0(r2)
    return (len);
 41066d8:	e0bffd03 	ldbu	r2,-12(fp)
}
 41066dc:	e037883a 	mov	sp,fp
 41066e0:	df000017 	ldw	fp,0(sp)
 41066e4:	dec00104 	addi	sp,sp,4
 41066e8:	f800283a 	ret

041066ec <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 41066ec:	defffd04 	addi	sp,sp,-12
 41066f0:	df000215 	stw	fp,8(sp)
 41066f4:	df000204 	addi	fp,sp,8
 41066f8:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 41066fc:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 4106700:	00000606 	br	410671c <OS_StrLen+0x30>
        psrc++;
 4106704:	e0bfff17 	ldw	r2,-4(fp)
 4106708:	10800044 	addi	r2,r2,1
 410670c:	e0bfff15 	stw	r2,-4(fp)
        len++;
 4106710:	e0bffe03 	ldbu	r2,-8(fp)
 4106714:	10800044 	addi	r2,r2,1
 4106718:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 410671c:	e0bfff17 	ldw	r2,-4(fp)
 4106720:	10800003 	ldbu	r2,0(r2)
 4106724:	10803fcc 	andi	r2,r2,255
 4106728:	103ff61e 	bne	r2,zero,4106704 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 410672c:	e0bffe03 	ldbu	r2,-8(fp)
}
 4106730:	e037883a 	mov	sp,fp
 4106734:	df000017 	ldw	fp,0(sp)
 4106738:	dec00104 	addi	sp,sp,4
 410673c:	f800283a 	ret

04106740 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 4106740:	defffa04 	addi	sp,sp,-24
 4106744:	dfc00515 	stw	ra,20(sp)
 4106748:	df000415 	stw	fp,16(sp)
 410674c:	df000404 	addi	fp,sp,16
 4106750:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4106754:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4106758:	0005303a 	rdctl	r2,status
 410675c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4106760:	e0fffd17 	ldw	r3,-12(fp)
 4106764:	00bfff84 	movi	r2,-2
 4106768:	1884703a 	and	r2,r3,r2
 410676c:	1001703a 	wrctl	status,r2
  
  return context;
 4106770:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 4106774:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 4106778:	d0a72417 	ldw	r2,-25456(gp)
 410677c:	10800044 	addi	r2,r2,1
 4106780:	d0a72415 	stw	r2,-25456(gp)
 4106784:	e0bffc17 	ldw	r2,-16(fp)
 4106788:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410678c:	e0bffe17 	ldw	r2,-8(fp)
 4106790:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 4106794:	410ebf40 	call	410ebf4 <OSTaskIdleHook>
    }
 4106798:	003fef06 	br	4106758 <OS_TaskIdle+0x18>

0410679c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 410679c:	defffa04 	addi	sp,sp,-24
 41067a0:	dfc00515 	stw	ra,20(sp)
 41067a4:	df000415 	stw	fp,16(sp)
 41067a8:	df000404 	addi	fp,sp,16
 41067ac:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 41067b0:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 41067b4:	00000206 	br	41067c0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 41067b8:	01003204 	movi	r4,200
 41067bc:	410bed00 	call	410bed0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 41067c0:	d0a73503 	ldbu	r2,-25388(gp)
 41067c4:	10803fcc 	andi	r2,r2,255
 41067c8:	103ffb26 	beq	r2,zero,41067b8 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 41067cc:	d0a72917 	ldw	r2,-25436(gp)
 41067d0:	01401904 	movi	r5,100
 41067d4:	1009883a 	mov	r4,r2
 41067d8:	4100b180 	call	4100b18 <__udivsi3>
 41067dc:	d0a72915 	stw	r2,-25436(gp)
    if (OSIdleCtrMax == 0L) {
 41067e0:	d0a72917 	ldw	r2,-25436(gp)
 41067e4:	1000031e 	bne	r2,zero,41067f4 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 41067e8:	d0272b05 	stb	zero,-25428(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 41067ec:	01003fc4 	movi	r4,255
 41067f0:	410bb580 	call	410bb58 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41067f4:	0005303a 	rdctl	r2,status
 41067f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41067fc:	e0fffd17 	ldw	r3,-12(fp)
 4106800:	00bfff84 	movi	r2,-2
 4106804:	1884703a 	and	r2,r3,r2
 4106808:	1001703a 	wrctl	status,r2
  
  return context;
 410680c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 4106810:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 4106814:	d0a72417 	ldw	r2,-25456(gp)
 4106818:	d0a73615 	stw	r2,-25384(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 410681c:	d0272415 	stw	zero,-25456(gp)
 4106820:	e0bffc17 	ldw	r2,-16(fp)
 4106824:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4106828:	e0bffe17 	ldw	r2,-8(fp)
 410682c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 4106830:	d0a73617 	ldw	r2,-25384(gp)
 4106834:	d0e72917 	ldw	r3,-25436(gp)
 4106838:	180b883a 	mov	r5,r3
 410683c:	1009883a 	mov	r4,r2
 4106840:	4100b180 	call	4100b18 <__udivsi3>
 4106844:	1007883a 	mov	r3,r2
 4106848:	00801904 	movi	r2,100
 410684c:	10c5c83a 	sub	r2,r2,r3
 4106850:	d0a72b05 	stb	r2,-25428(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 4106854:	410eb740 	call	410eb74 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 4106858:	41068680 	call	4106868 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 410685c:	01001904 	movi	r4,100
 4106860:	410bed00 	call	410bed0 <OSTimeDly>
    }
 4106864:	003fe306 	br	41067f4 <OS_TaskStat+0x58>

04106868 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 4106868:	defffa04 	addi	sp,sp,-24
 410686c:	dfc00515 	stw	ra,20(sp)
 4106870:	df000415 	stw	fp,16(sp)
 4106874:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4106878:	e03ffc05 	stb	zero,-16(fp)
 410687c:	00002406 	br	4106910 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 4106880:	e0bffc03 	ldbu	r2,-16(fp)
 4106884:	e0fffe04 	addi	r3,fp,-8
 4106888:	180b883a 	mov	r5,r3
 410688c:	1009883a 	mov	r4,r2
 4106890:	410b9980 	call	410b998 <OSTaskStkChk>
 4106894:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 4106898:	e0bffc43 	ldbu	r2,-15(fp)
 410689c:	1000191e 	bne	r2,zero,4106904 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 41068a0:	e0fffc03 	ldbu	r3,-16(fp)
 41068a4:	008104b4 	movhi	r2,1042
 41068a8:	10b12504 	addi	r2,r2,-15212
 41068ac:	18c7883a 	add	r3,r3,r3
 41068b0:	18c7883a 	add	r3,r3,r3
 41068b4:	10c5883a 	add	r2,r2,r3
 41068b8:	10800017 	ldw	r2,0(r2)
 41068bc:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 41068c0:	e0bffd17 	ldw	r2,-12(fp)
 41068c4:	10000f26 	beq	r2,zero,4106904 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 41068c8:	e0bffd17 	ldw	r2,-12(fp)
 41068cc:	10800060 	cmpeqi	r2,r2,1
 41068d0:	10000c1e 	bne	r2,zero,4106904 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 41068d4:	e0bffd17 	ldw	r2,-12(fp)
 41068d8:	10c00217 	ldw	r3,8(r2)
 41068dc:	e0bffd17 	ldw	r2,-12(fp)
 41068e0:	10800317 	ldw	r2,12(r2)
 41068e4:	1085883a 	add	r2,r2,r2
 41068e8:	1085883a 	add	r2,r2,r2
 41068ec:	1887883a 	add	r3,r3,r2
 41068f0:	e0bffd17 	ldw	r2,-12(fp)
 41068f4:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 41068f8:	e0ffff17 	ldw	r3,-4(fp)
 41068fc:	e0bffd17 	ldw	r2,-12(fp)
 4106900:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 4106904:	e0bffc03 	ldbu	r2,-16(fp)
 4106908:	10800044 	addi	r2,r2,1
 410690c:	e0bffc05 	stb	r2,-16(fp)
 4106910:	e0bffc03 	ldbu	r2,-16(fp)
 4106914:	10800570 	cmpltui	r2,r2,21
 4106918:	103fd91e 	bne	r2,zero,4106880 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 410691c:	0001883a 	nop
 4106920:	e037883a 	mov	sp,fp
 4106924:	dfc00117 	ldw	ra,4(sp)
 4106928:	df000017 	ldw	fp,0(sp)
 410692c:	dec00204 	addi	sp,sp,8
 4106930:	f800283a 	ret

04106934 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 4106934:	defff204 	addi	sp,sp,-56
 4106938:	dfc00d15 	stw	ra,52(sp)
 410693c:	df000c15 	stw	fp,48(sp)
 4106940:	df000c04 	addi	fp,sp,48
 4106944:	e17ffc15 	stw	r5,-16(fp)
 4106948:	e1bffd15 	stw	r6,-12(fp)
 410694c:	3807883a 	mov	r3,r7
 4106950:	e0800417 	ldw	r2,16(fp)
 4106954:	e13ffb05 	stb	r4,-20(fp)
 4106958:	e0fffe0d 	sth	r3,-8(fp)
 410695c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4106960:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4106964:	0005303a 	rdctl	r2,status
 4106968:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410696c:	e0fffa17 	ldw	r3,-24(fp)
 4106970:	00bfff84 	movi	r2,-2
 4106974:	1884703a 	and	r2,r3,r2
 4106978:	1001703a 	wrctl	status,r2
  
  return context;
 410697c:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 4106980:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 4106984:	d0a72a17 	ldw	r2,-25432(gp)
 4106988:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 410698c:	e0bff617 	ldw	r2,-40(fp)
 4106990:	10009326 	beq	r2,zero,4106be0 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 4106994:	e0bff617 	ldw	r2,-40(fp)
 4106998:	10800517 	ldw	r2,20(r2)
 410699c:	d0a72a15 	stw	r2,-25432(gp)
 41069a0:	e0bff417 	ldw	r2,-48(fp)
 41069a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41069a8:	e0bff817 	ldw	r2,-32(fp)
 41069ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 41069b0:	e0bff617 	ldw	r2,-40(fp)
 41069b4:	e0fffc17 	ldw	r3,-16(fp)
 41069b8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 41069bc:	e0bff617 	ldw	r2,-40(fp)
 41069c0:	e0fffb03 	ldbu	r3,-20(fp)
 41069c4:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 41069c8:	e0bff617 	ldw	r2,-40(fp)
 41069cc:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 41069d0:	e0bff617 	ldw	r2,-40(fp)
 41069d4:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 41069d8:	e0bff617 	ldw	r2,-40(fp)
 41069dc:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 41069e0:	e0bff617 	ldw	r2,-40(fp)
 41069e4:	e0c00317 	ldw	r3,12(fp)
 41069e8:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 41069ec:	e0bff617 	ldw	r2,-40(fp)
 41069f0:	e0c00217 	ldw	r3,8(fp)
 41069f4:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 41069f8:	e0bff617 	ldw	r2,-40(fp)
 41069fc:	e0fffd17 	ldw	r3,-12(fp)
 4106a00:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 4106a04:	e0bff617 	ldw	r2,-40(fp)
 4106a08:	e0ffff0b 	ldhu	r3,-4(fp)
 4106a0c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 4106a10:	e0bff617 	ldw	r2,-40(fp)
 4106a14:	e0fffe0b 	ldhu	r3,-8(fp)
 4106a18:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 4106a1c:	e0bff617 	ldw	r2,-40(fp)
 4106a20:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 4106a24:	e0bffb03 	ldbu	r2,-20(fp)
 4106a28:	1004d0fa 	srli	r2,r2,3
 4106a2c:	1007883a 	mov	r3,r2
 4106a30:	e0bff617 	ldw	r2,-40(fp)
 4106a34:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 4106a38:	e0bffb03 	ldbu	r2,-20(fp)
 4106a3c:	108001cc 	andi	r2,r2,7
 4106a40:	1007883a 	mov	r3,r2
 4106a44:	e0bff617 	ldw	r2,-40(fp)
 4106a48:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 4106a4c:	e0bff617 	ldw	r2,-40(fp)
 4106a50:	10800d03 	ldbu	r2,52(r2)
 4106a54:	10803fcc 	andi	r2,r2,255
 4106a58:	00c00044 	movi	r3,1
 4106a5c:	1884983a 	sll	r2,r3,r2
 4106a60:	1007883a 	mov	r3,r2
 4106a64:	e0bff617 	ldw	r2,-40(fp)
 4106a68:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 4106a6c:	e0bff617 	ldw	r2,-40(fp)
 4106a70:	10800cc3 	ldbu	r2,51(r2)
 4106a74:	10803fcc 	andi	r2,r2,255
 4106a78:	00c00044 	movi	r3,1
 4106a7c:	1884983a 	sll	r2,r3,r2
 4106a80:	1007883a 	mov	r3,r2
 4106a84:	e0bff617 	ldw	r2,-40(fp)
 4106a88:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 4106a8c:	e0bff617 	ldw	r2,-40(fp)
 4106a90:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 4106a94:	e0bff617 	ldw	r2,-40(fp)
 4106a98:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 4106a9c:	e0bff617 	ldw	r2,-40(fp)
 4106aa0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 4106aa4:	e0bff617 	ldw	r2,-40(fp)
 4106aa8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 4106aac:	e0bff617 	ldw	r2,-40(fp)
 4106ab0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 4106ab4:	e0bff617 	ldw	r2,-40(fp)
 4106ab8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 4106abc:	e0bff617 	ldw	r2,-40(fp)
 4106ac0:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 4106ac4:	e0bff617 	ldw	r2,-40(fp)
 4106ac8:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 4106acc:	e0bff617 	ldw	r2,-40(fp)
 4106ad0:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 4106ad4:	e0bff617 	ldw	r2,-40(fp)
 4106ad8:	00c00fc4 	movi	r3,63
 4106adc:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4106ae0:	e0bff617 	ldw	r2,-40(fp)
 4106ae4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 4106ae8:	e13ff617 	ldw	r4,-40(fp)
 4106aec:	410ec140 	call	410ec14 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 4106af0:	e13ff617 	ldw	r4,-40(fp)
 4106af4:	410eb0c0 	call	410eb0c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4106af8:	0005303a 	rdctl	r2,status
 4106afc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4106b00:	e0fff517 	ldw	r3,-44(fp)
 4106b04:	00bfff84 	movi	r2,-2
 4106b08:	1884703a 	and	r2,r3,r2
 4106b0c:	1001703a 	wrctl	status,r2
  
  return context;
 4106b10:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 4106b14:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 4106b18:	e0fffb03 	ldbu	r3,-20(fp)
 4106b1c:	008104b4 	movhi	r2,1042
 4106b20:	10b12504 	addi	r2,r2,-15212
 4106b24:	18c7883a 	add	r3,r3,r3
 4106b28:	18c7883a 	add	r3,r3,r3
 4106b2c:	10c5883a 	add	r2,r2,r3
 4106b30:	e0fff617 	ldw	r3,-40(fp)
 4106b34:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 4106b38:	d0e72617 	ldw	r3,-25448(gp)
 4106b3c:	e0bff617 	ldw	r2,-40(fp)
 4106b40:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 4106b44:	e0bff617 	ldw	r2,-40(fp)
 4106b48:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 4106b4c:	d0a72617 	ldw	r2,-25448(gp)
 4106b50:	10000326 	beq	r2,zero,4106b60 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 4106b54:	d0a72617 	ldw	r2,-25448(gp)
 4106b58:	e0fff617 	ldw	r3,-40(fp)
 4106b5c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 4106b60:	e0bff617 	ldw	r2,-40(fp)
 4106b64:	d0a72615 	stw	r2,-25448(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 4106b68:	e0bff617 	ldw	r2,-40(fp)
 4106b6c:	10c00d83 	ldbu	r3,54(r2)
 4106b70:	d0a72f03 	ldbu	r2,-25412(gp)
 4106b74:	1884b03a 	or	r2,r3,r2
 4106b78:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4106b7c:	e0bff617 	ldw	r2,-40(fp)
 4106b80:	10800d03 	ldbu	r2,52(r2)
 4106b84:	10c03fcc 	andi	r3,r2,255
 4106b88:	e0bff617 	ldw	r2,-40(fp)
 4106b8c:	10800d03 	ldbu	r2,52(r2)
 4106b90:	11003fcc 	andi	r4,r2,255
 4106b94:	d0a72f44 	addi	r2,gp,-25411
 4106b98:	2085883a 	add	r2,r4,r2
 4106b9c:	11000003 	ldbu	r4,0(r2)
 4106ba0:	e0bff617 	ldw	r2,-40(fp)
 4106ba4:	10800d43 	ldbu	r2,53(r2)
 4106ba8:	2084b03a 	or	r2,r4,r2
 4106bac:	1009883a 	mov	r4,r2
 4106bb0:	d0a72f44 	addi	r2,gp,-25411
 4106bb4:	1885883a 	add	r2,r3,r2
 4106bb8:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 4106bbc:	d0a72b43 	ldbu	r2,-25427(gp)
 4106bc0:	10800044 	addi	r2,r2,1
 4106bc4:	d0a72b45 	stb	r2,-25427(gp)
 4106bc8:	e0bff417 	ldw	r2,-48(fp)
 4106bcc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4106bd0:	e0bff717 	ldw	r2,-36(fp)
 4106bd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 4106bd8:	0005883a 	mov	r2,zero
 4106bdc:	00000506 	br	4106bf4 <OS_TCBInit+0x2c0>
 4106be0:	e0bff417 	ldw	r2,-48(fp)
 4106be4:	e0bff915 	stw	r2,-28(fp)
 4106be8:	e0bff917 	ldw	r2,-28(fp)
 4106bec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 4106bf0:	00801084 	movi	r2,66
}
 4106bf4:	e037883a 	mov	sp,fp
 4106bf8:	dfc00117 	ldw	ra,4(sp)
 4106bfc:	df000017 	ldw	fp,0(sp)
 4106c00:	dec00204 	addi	sp,sp,8
 4106c04:	f800283a 	ret

04106c08 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 4106c08:	defffe04 	addi	sp,sp,-8
 4106c0c:	df000115 	stw	fp,4(sp)
 4106c10:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 4106c14:	d0a01004 	addi	r2,gp,-32704
 4106c18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 4106c1c:	d0a01104 	addi	r2,gp,-32700
 4106c20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 4106c24:	d0a01284 	addi	r2,gp,-32694
 4106c28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 4106c2c:	d0a01304 	addi	r2,gp,-32692
 4106c30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 4106c34:	d0a01204 	addi	r2,gp,-32696
 4106c38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 4106c3c:	d0a01384 	addi	r2,gp,-32690
 4106c40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 4106c44:	d0a01404 	addi	r2,gp,-32688
 4106c48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 4106c4c:	d0a01484 	addi	r2,gp,-32686
 4106c50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 4106c54:	d0a01504 	addi	r2,gp,-32684
 4106c58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 4106c5c:	d0a01584 	addi	r2,gp,-32682
 4106c60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 4106c64:	d0a01604 	addi	r2,gp,-32680
 4106c68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 4106c6c:	d0a01684 	addi	r2,gp,-32678
 4106c70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 4106c74:	d0a01704 	addi	r2,gp,-32676
 4106c78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 4106c7c:	d0a01784 	addi	r2,gp,-32674
 4106c80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 4106c84:	d0a01804 	addi	r2,gp,-32672
 4106c88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 4106c8c:	d0a01884 	addi	r2,gp,-32670
 4106c90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 4106c94:	d0a01904 	addi	r2,gp,-32668
 4106c98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 4106c9c:	d0a01984 	addi	r2,gp,-32666
 4106ca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 4106ca4:	d0a01a04 	addi	r2,gp,-32664
 4106ca8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 4106cac:	d0a01a84 	addi	r2,gp,-32662
 4106cb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 4106cb4:	d0a01b04 	addi	r2,gp,-32660
 4106cb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 4106cbc:	d0a01b84 	addi	r2,gp,-32658
 4106cc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 4106cc4:	d0a01c04 	addi	r2,gp,-32656
 4106cc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 4106ccc:	d0a01c84 	addi	r2,gp,-32654
 4106cd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 4106cd4:	d0a01d04 	addi	r2,gp,-32652
 4106cd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 4106cdc:	d0a01d84 	addi	r2,gp,-32650
 4106ce0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 4106ce4:	d0a01e04 	addi	r2,gp,-32648
 4106ce8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 4106cec:	d0a01e84 	addi	r2,gp,-32646
 4106cf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 4106cf4:	d0a01f04 	addi	r2,gp,-32644
 4106cf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 4106cfc:	d0a01f84 	addi	r2,gp,-32642
 4106d00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 4106d04:	d0a02004 	addi	r2,gp,-32640
 4106d08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 4106d0c:	d0a02084 	addi	r2,gp,-32638
 4106d10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 4106d14:	d0a02104 	addi	r2,gp,-32636
 4106d18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 4106d1c:	d0a02184 	addi	r2,gp,-32634
 4106d20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 4106d24:	d0a02204 	addi	r2,gp,-32632
 4106d28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 4106d2c:	d0a02284 	addi	r2,gp,-32630
 4106d30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 4106d34:	d0a02304 	addi	r2,gp,-32628
 4106d38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 4106d3c:	d0a02384 	addi	r2,gp,-32626
 4106d40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 4106d44:	d0a02404 	addi	r2,gp,-32624
 4106d48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 4106d4c:	d0a02484 	addi	r2,gp,-32622
 4106d50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 4106d54:	d0a02504 	addi	r2,gp,-32620
 4106d58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 4106d5c:	d0a02584 	addi	r2,gp,-32618
 4106d60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 4106d64:	d0a02604 	addi	r2,gp,-32616
 4106d68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 4106d6c:	d0a02684 	addi	r2,gp,-32614
 4106d70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 4106d74:	d0a02704 	addi	r2,gp,-32612
 4106d78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 4106d7c:	d0a02c04 	addi	r2,gp,-32592
 4106d80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 4106d84:	0001883a 	nop
 4106d88:	e037883a 	mov	sp,fp
 4106d8c:	df000017 	ldw	fp,0(sp)
 4106d90:	dec00104 	addi	sp,sp,4
 4106d94:	f800283a 	ret

04106d98 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 4106d98:	defff204 	addi	sp,sp,-56
 4106d9c:	df000d15 	stw	fp,52(sp)
 4106da0:	df000d04 	addi	fp,sp,52
 4106da4:	e13ffc15 	stw	r4,-16(fp)
 4106da8:	2807883a 	mov	r3,r5
 4106dac:	3005883a 	mov	r2,r6
 4106db0:	e1ffff15 	stw	r7,-4(fp)
 4106db4:	e0fffd0d 	sth	r3,-12(fp)
 4106db8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4106dbc:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4106dc0:	e0bfff17 	ldw	r2,-4(fp)
 4106dc4:	1000021e 	bne	r2,zero,4106dd0 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 4106dc8:	0005883a 	mov	r2,zero
 4106dcc:	0000b006 	br	4107090 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 4106dd0:	e0bffc17 	ldw	r2,-16(fp)
 4106dd4:	1000051e 	bne	r2,zero,4106dec <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4106dd8:	e0bfff17 	ldw	r2,-4(fp)
 4106ddc:	00c01b84 	movi	r3,110
 4106de0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4106de4:	0005883a 	mov	r2,zero
 4106de8:	0000a906 	br	4107090 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 4106dec:	e0bffc17 	ldw	r2,-16(fp)
 4106df0:	10800003 	ldbu	r2,0(r2)
 4106df4:	10803fcc 	andi	r2,r2,255
 4106df8:	10800160 	cmpeqi	r2,r2,5
 4106dfc:	1000051e 	bne	r2,zero,4106e14 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 4106e00:	e0bfff17 	ldw	r2,-4(fp)
 4106e04:	00c00044 	movi	r3,1
 4106e08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4106e0c:	0005883a 	mov	r2,zero
 4106e10:	00009f06 	br	4107090 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 4106e14:	e0fffe03 	ldbu	r3,-8(fp)
 4106e18:	00bfe004 	movi	r2,-128
 4106e1c:	1884703a 	and	r2,r3,r2
 4106e20:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 4106e24:	e0bff503 	ldbu	r2,-44(fp)
 4106e28:	10000626 	beq	r2,zero,4106e44 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 4106e2c:	e0bffe03 	ldbu	r2,-8(fp)
 4106e30:	10801fcc 	andi	r2,r2,127
 4106e34:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 4106e38:	00800044 	movi	r2,1
 4106e3c:	e0bff385 	stb	r2,-50(fp)
 4106e40:	00000106 	br	4106e48 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 4106e44:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 4106e48:	e0bfff17 	ldw	r2,-4(fp)
 4106e4c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4106e50:	0005303a 	rdctl	r2,status
 4106e54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4106e58:	e0fffb17 	ldw	r3,-20(fp)
 4106e5c:	00bfff84 	movi	r2,-2
 4106e60:	1884703a 	and	r2,r3,r2
 4106e64:	1001703a 	wrctl	status,r2
  
  return context;
 4106e68:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 4106e6c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 4106e70:	e0bffe03 	ldbu	r2,-8(fp)
 4106e74:	10c00060 	cmpeqi	r3,r2,1
 4106e78:	18005f1e 	bne	r3,zero,4106ff8 <OSFlagAccept+0x260>
 4106e7c:	10c00088 	cmpgei	r3,r2,2
 4106e80:	1800021e 	bne	r3,zero,4106e8c <OSFlagAccept+0xf4>
 4106e84:	10003f26 	beq	r2,zero,4106f84 <OSFlagAccept+0x1ec>
 4106e88:	00007706 	br	4107068 <OSFlagAccept+0x2d0>
 4106e8c:	10c000a0 	cmpeqi	r3,r2,2
 4106e90:	1800031e 	bne	r3,zero,4106ea0 <OSFlagAccept+0x108>
 4106e94:	108000e0 	cmpeqi	r2,r2,3
 4106e98:	10001e1e 	bne	r2,zero,4106f14 <OSFlagAccept+0x17c>
 4106e9c:	00007206 	br	4107068 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 4106ea0:	e0bffc17 	ldw	r2,-16(fp)
 4106ea4:	10c0020b 	ldhu	r3,8(r2)
 4106ea8:	e0bffd0b 	ldhu	r2,-12(fp)
 4106eac:	1884703a 	and	r2,r3,r2
 4106eb0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4106eb4:	e0fff30b 	ldhu	r3,-52(fp)
 4106eb8:	e0bffd0b 	ldhu	r2,-12(fp)
 4106ebc:	18800d1e 	bne	r3,r2,4106ef4 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4106ec0:	e0bff383 	ldbu	r2,-50(fp)
 4106ec4:	10800058 	cmpnei	r2,r2,1
 4106ec8:	10000d1e 	bne	r2,zero,4106f00 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 4106ecc:	e0bffc17 	ldw	r2,-16(fp)
 4106ed0:	1080020b 	ldhu	r2,8(r2)
 4106ed4:	1007883a 	mov	r3,r2
 4106ed8:	e0bff30b 	ldhu	r2,-52(fp)
 4106edc:	0084303a 	nor	r2,zero,r2
 4106ee0:	1884703a 	and	r2,r3,r2
 4106ee4:	1007883a 	mov	r3,r2
 4106ee8:	e0bffc17 	ldw	r2,-16(fp)
 4106eec:	10c0020d 	sth	r3,8(r2)
 4106ef0:	00000306 	br	4106f00 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4106ef4:	e0bfff17 	ldw	r2,-4(fp)
 4106ef8:	00c01c04 	movi	r3,112
 4106efc:	10c00005 	stb	r3,0(r2)
 4106f00:	e0bff417 	ldw	r2,-48(fp)
 4106f04:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4106f08:	e0bff617 	ldw	r2,-40(fp)
 4106f0c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4106f10:	00005e06 	br	410708c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 4106f14:	e0bffc17 	ldw	r2,-16(fp)
 4106f18:	10c0020b 	ldhu	r3,8(r2)
 4106f1c:	e0bffd0b 	ldhu	r2,-12(fp)
 4106f20:	1884703a 	and	r2,r3,r2
 4106f24:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 4106f28:	e0bff30b 	ldhu	r2,-52(fp)
 4106f2c:	10000d26 	beq	r2,zero,4106f64 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4106f30:	e0bff383 	ldbu	r2,-50(fp)
 4106f34:	10800058 	cmpnei	r2,r2,1
 4106f38:	10000d1e 	bne	r2,zero,4106f70 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 4106f3c:	e0bffc17 	ldw	r2,-16(fp)
 4106f40:	1080020b 	ldhu	r2,8(r2)
 4106f44:	1007883a 	mov	r3,r2
 4106f48:	e0bff30b 	ldhu	r2,-52(fp)
 4106f4c:	0084303a 	nor	r2,zero,r2
 4106f50:	1884703a 	and	r2,r3,r2
 4106f54:	1007883a 	mov	r3,r2
 4106f58:	e0bffc17 	ldw	r2,-16(fp)
 4106f5c:	10c0020d 	sth	r3,8(r2)
 4106f60:	00000306 	br	4106f70 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4106f64:	e0bfff17 	ldw	r2,-4(fp)
 4106f68:	00c01c04 	movi	r3,112
 4106f6c:	10c00005 	stb	r3,0(r2)
 4106f70:	e0bff417 	ldw	r2,-48(fp)
 4106f74:	e0bff715 	stw	r2,-36(fp)
 4106f78:	e0bff717 	ldw	r2,-36(fp)
 4106f7c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4106f80:	00004206 	br	410708c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 4106f84:	e0bffc17 	ldw	r2,-16(fp)
 4106f88:	1080020b 	ldhu	r2,8(r2)
 4106f8c:	0084303a 	nor	r2,zero,r2
 4106f90:	1007883a 	mov	r3,r2
 4106f94:	e0bffd0b 	ldhu	r2,-12(fp)
 4106f98:	1884703a 	and	r2,r3,r2
 4106f9c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4106fa0:	e0fff30b 	ldhu	r3,-52(fp)
 4106fa4:	e0bffd0b 	ldhu	r2,-12(fp)
 4106fa8:	18800b1e 	bne	r3,r2,4106fd8 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4106fac:	e0bff383 	ldbu	r2,-50(fp)
 4106fb0:	10800058 	cmpnei	r2,r2,1
 4106fb4:	10000b1e 	bne	r2,zero,4106fe4 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 4106fb8:	e0bffc17 	ldw	r2,-16(fp)
 4106fbc:	10c0020b 	ldhu	r3,8(r2)
 4106fc0:	e0bff30b 	ldhu	r2,-52(fp)
 4106fc4:	1884b03a 	or	r2,r3,r2
 4106fc8:	1007883a 	mov	r3,r2
 4106fcc:	e0bffc17 	ldw	r2,-16(fp)
 4106fd0:	10c0020d 	sth	r3,8(r2)
 4106fd4:	00000306 	br	4106fe4 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4106fd8:	e0bfff17 	ldw	r2,-4(fp)
 4106fdc:	00c01c04 	movi	r3,112
 4106fe0:	10c00005 	stb	r3,0(r2)
 4106fe4:	e0bff417 	ldw	r2,-48(fp)
 4106fe8:	e0bff815 	stw	r2,-32(fp)
 4106fec:	e0bff817 	ldw	r2,-32(fp)
 4106ff0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4106ff4:	00002506 	br	410708c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 4106ff8:	e0bffc17 	ldw	r2,-16(fp)
 4106ffc:	1080020b 	ldhu	r2,8(r2)
 4107000:	0084303a 	nor	r2,zero,r2
 4107004:	1007883a 	mov	r3,r2
 4107008:	e0bffd0b 	ldhu	r2,-12(fp)
 410700c:	1884703a 	and	r2,r3,r2
 4107010:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 4107014:	e0bff30b 	ldhu	r2,-52(fp)
 4107018:	10000b26 	beq	r2,zero,4107048 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 410701c:	e0bff383 	ldbu	r2,-50(fp)
 4107020:	10800058 	cmpnei	r2,r2,1
 4107024:	10000b1e 	bne	r2,zero,4107054 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 4107028:	e0bffc17 	ldw	r2,-16(fp)
 410702c:	10c0020b 	ldhu	r3,8(r2)
 4107030:	e0bff30b 	ldhu	r2,-52(fp)
 4107034:	1884b03a 	or	r2,r3,r2
 4107038:	1007883a 	mov	r3,r2
 410703c:	e0bffc17 	ldw	r2,-16(fp)
 4107040:	10c0020d 	sth	r3,8(r2)
 4107044:	00000306 	br	4107054 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4107048:	e0bfff17 	ldw	r2,-4(fp)
 410704c:	00c01c04 	movi	r3,112
 4107050:	10c00005 	stb	r3,0(r2)
 4107054:	e0bff417 	ldw	r2,-48(fp)
 4107058:	e0bff915 	stw	r2,-28(fp)
 410705c:	e0bff917 	ldw	r2,-28(fp)
 4107060:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4107064:	00000906 	br	410708c <OSFlagAccept+0x2f4>
 4107068:	e0bff417 	ldw	r2,-48(fp)
 410706c:	e0bffa15 	stw	r2,-24(fp)
 4107070:	e0bffa17 	ldw	r2,-24(fp)
 4107074:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 4107078:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 410707c:	e0bfff17 	ldw	r2,-4(fp)
 4107080:	00c01bc4 	movi	r3,111
 4107084:	10c00005 	stb	r3,0(r2)
             break;
 4107088:	0001883a 	nop
    }
    return (flags_rdy);
 410708c:	e0bff30b 	ldhu	r2,-52(fp)
}
 4107090:	e037883a 	mov	sp,fp
 4107094:	df000017 	ldw	fp,0(sp)
 4107098:	dec00104 	addi	sp,sp,4
 410709c:	f800283a 	ret

041070a0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 41070a0:	defff804 	addi	sp,sp,-32
 41070a4:	df000715 	stw	fp,28(sp)
 41070a8:	df000704 	addi	fp,sp,28
 41070ac:	2005883a 	mov	r2,r4
 41070b0:	e17fff15 	stw	r5,-4(fp)
 41070b4:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 41070b8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 41070bc:	e0bfff17 	ldw	r2,-4(fp)
 41070c0:	1000021e 	bne	r2,zero,41070cc <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 41070c4:	0005883a 	mov	r2,zero
 41070c8:	00003306 	br	4107198 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 41070cc:	d0a73103 	ldbu	r2,-25404(gp)
 41070d0:	10803fcc 	andi	r2,r2,255
 41070d4:	10000526 	beq	r2,zero,41070ec <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 41070d8:	e0bfff17 	ldw	r2,-4(fp)
 41070dc:	00c00404 	movi	r3,16
 41070e0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 41070e4:	0005883a 	mov	r2,zero
 41070e8:	00002b06 	br	4107198 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41070ec:	0005303a 	rdctl	r2,status
 41070f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41070f4:	e0fffd17 	ldw	r3,-12(fp)
 41070f8:	00bfff84 	movi	r2,-2
 41070fc:	1884703a 	and	r2,r3,r2
 4107100:	1001703a 	wrctl	status,r2
  
  return context;
 4107104:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4107108:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 410710c:	d0a73417 	ldw	r2,-25392(gp)
 4107110:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 4107114:	e0bffb17 	ldw	r2,-20(fp)
 4107118:	10001726 	beq	r2,zero,4107178 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 410711c:	d0a73417 	ldw	r2,-25392(gp)
 4107120:	10800117 	ldw	r2,4(r2)
 4107124:	d0a73415 	stw	r2,-25392(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 4107128:	e0bffb17 	ldw	r2,-20(fp)
 410712c:	00c00144 	movi	r3,5
 4107130:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 4107134:	e0bffb17 	ldw	r2,-20(fp)
 4107138:	e0fffe0b 	ldhu	r3,-8(fp)
 410713c:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 4107140:	e0bffb17 	ldw	r2,-20(fp)
 4107144:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 4107148:	e0bffb17 	ldw	r2,-20(fp)
 410714c:	00c00fc4 	movi	r3,63
 4107150:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4107154:	e0bffb17 	ldw	r2,-20(fp)
 4107158:	100002c5 	stb	zero,11(r2)
 410715c:	e0bff917 	ldw	r2,-28(fp)
 4107160:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4107164:	e0bffa17 	ldw	r2,-24(fp)
 4107168:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 410716c:	e0bfff17 	ldw	r2,-4(fp)
 4107170:	10000005 	stb	zero,0(r2)
 4107174:	00000706 	br	4107194 <OSFlagCreate+0xf4>
 4107178:	e0bff917 	ldw	r2,-28(fp)
 410717c:	e0bffc15 	stw	r2,-16(fp)
 4107180:	e0bffc17 	ldw	r2,-16(fp)
 4107184:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 4107188:	e0bfff17 	ldw	r2,-4(fp)
 410718c:	00c01c84 	movi	r3,114
 4107190:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 4107194:	e0bffb17 	ldw	r2,-20(fp)
}
 4107198:	e037883a 	mov	sp,fp
 410719c:	df000017 	ldw	fp,0(sp)
 41071a0:	dec00104 	addi	sp,sp,4
 41071a4:	f800283a 	ret

041071a8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 41071a8:	defff204 	addi	sp,sp,-56
 41071ac:	dfc00d15 	stw	ra,52(sp)
 41071b0:	df000c15 	stw	fp,48(sp)
 41071b4:	df000c04 	addi	fp,sp,48
 41071b8:	e13ffd15 	stw	r4,-12(fp)
 41071bc:	2805883a 	mov	r2,r5
 41071c0:	e1bfff15 	stw	r6,-4(fp)
 41071c4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 41071c8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 41071cc:	e0bfff17 	ldw	r2,-4(fp)
 41071d0:	1000021e 	bne	r2,zero,41071dc <OSFlagDel+0x34>
        return (pgrp);
 41071d4:	e0bffd17 	ldw	r2,-12(fp)
 41071d8:	00008006 	br	41073dc <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 41071dc:	e0bffd17 	ldw	r2,-12(fp)
 41071e0:	1000051e 	bne	r2,zero,41071f8 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 41071e4:	e0bfff17 	ldw	r2,-4(fp)
 41071e8:	00c01b84 	movi	r3,110
 41071ec:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 41071f0:	e0bffd17 	ldw	r2,-12(fp)
 41071f4:	00007906 	br	41073dc <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 41071f8:	d0a73103 	ldbu	r2,-25404(gp)
 41071fc:	10803fcc 	andi	r2,r2,255
 4107200:	10000526 	beq	r2,zero,4107218 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 4107204:	e0bfff17 	ldw	r2,-4(fp)
 4107208:	00c003c4 	movi	r3,15
 410720c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 4107210:	e0bffd17 	ldw	r2,-12(fp)
 4107214:	00007106 	br	41073dc <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 4107218:	e0bffd17 	ldw	r2,-12(fp)
 410721c:	10800003 	ldbu	r2,0(r2)
 4107220:	10803fcc 	andi	r2,r2,255
 4107224:	10800160 	cmpeqi	r2,r2,5
 4107228:	1000051e 	bne	r2,zero,4107240 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 410722c:	e0bfff17 	ldw	r2,-4(fp)
 4107230:	00c00044 	movi	r3,1
 4107234:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 4107238:	e0bffd17 	ldw	r2,-12(fp)
 410723c:	00006706 	br	41073dc <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4107240:	0005303a 	rdctl	r2,status
 4107244:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4107248:	e0fffc17 	ldw	r3,-16(fp)
 410724c:	00bfff84 	movi	r2,-2
 4107250:	1884703a 	and	r2,r3,r2
 4107254:	1001703a 	wrctl	status,r2
  
  return context;
 4107258:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 410725c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 4107260:	e0bffd17 	ldw	r2,-12(fp)
 4107264:	10800117 	ldw	r2,4(r2)
 4107268:	10000326 	beq	r2,zero,4107278 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 410726c:	00800044 	movi	r2,1
 4107270:	e0bff405 	stb	r2,-48(fp)
 4107274:	00000106 	br	410727c <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4107278:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 410727c:	e0bffe03 	ldbu	r2,-8(fp)
 4107280:	10000326 	beq	r2,zero,4107290 <OSFlagDel+0xe8>
 4107284:	10800060 	cmpeqi	r2,r2,1
 4107288:	1000231e 	bne	r2,zero,4107318 <OSFlagDel+0x170>
 410728c:	00004806 	br	41073b0 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 4107290:	e0bff403 	ldbu	r2,-48(fp)
 4107294:	1000161e 	bne	r2,zero,41072f0 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 4107298:	e0bffd17 	ldw	r2,-12(fp)
 410729c:	00c00fc4 	movi	r3,63
 41072a0:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 41072a4:	e0bffd17 	ldw	r2,-12(fp)
 41072a8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 41072ac:	e0bffd17 	ldw	r2,-12(fp)
 41072b0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 41072b4:	d0e73417 	ldw	r3,-25392(gp)
 41072b8:	e0bffd17 	ldw	r2,-12(fp)
 41072bc:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 41072c0:	e0bffd17 	ldw	r2,-12(fp)
 41072c4:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 41072c8:	e0bffd17 	ldw	r2,-12(fp)
 41072cc:	d0a73415 	stw	r2,-25392(gp)
 41072d0:	e0bff717 	ldw	r2,-36(fp)
 41072d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41072d8:	e0bff817 	ldw	r2,-32(fp)
 41072dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 41072e0:	e0bfff17 	ldw	r2,-4(fp)
 41072e4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 41072e8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 41072ec:	00003a06 	br	41073d8 <OSFlagDel+0x230>
 41072f0:	e0bff717 	ldw	r2,-36(fp)
 41072f4:	e0bff915 	stw	r2,-28(fp)
 41072f8:	e0bff917 	ldw	r2,-28(fp)
 41072fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 4107300:	e0bfff17 	ldw	r2,-4(fp)
 4107304:	00c01244 	movi	r3,73
 4107308:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 410730c:	e0bffd17 	ldw	r2,-12(fp)
 4107310:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 4107314:	00003006 	br	41073d8 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 4107318:	e0bffd17 	ldw	r2,-12(fp)
 410731c:	10800117 	ldw	r2,4(r2)
 4107320:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 4107324:	00000606 	br	4107340 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 4107328:	000b883a 	mov	r5,zero
 410732c:	e13ff517 	ldw	r4,-44(fp)
 4107330:	41083140 	call	4108314 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 4107334:	e0bff517 	ldw	r2,-44(fp)
 4107338:	10800017 	ldw	r2,0(r2)
 410733c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 4107340:	e0bff517 	ldw	r2,-44(fp)
 4107344:	103ff81e 	bne	r2,zero,4107328 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 4107348:	e0bffd17 	ldw	r2,-12(fp)
 410734c:	00c00fc4 	movi	r3,63
 4107350:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4107354:	e0bffd17 	ldw	r2,-12(fp)
 4107358:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 410735c:	e0bffd17 	ldw	r2,-12(fp)
 4107360:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 4107364:	d0e73417 	ldw	r3,-25392(gp)
 4107368:	e0bffd17 	ldw	r2,-12(fp)
 410736c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 4107370:	e0bffd17 	ldw	r2,-12(fp)
 4107374:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 4107378:	e0bffd17 	ldw	r2,-12(fp)
 410737c:	d0a73415 	stw	r2,-25392(gp)
 4107380:	e0bff717 	ldw	r2,-36(fp)
 4107384:	e0bffa15 	stw	r2,-24(fp)
 4107388:	e0bffa17 	ldw	r2,-24(fp)
 410738c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4107390:	e0bff403 	ldbu	r2,-48(fp)
 4107394:	10800058 	cmpnei	r2,r2,1
 4107398:	1000011e 	bne	r2,zero,41073a0 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 410739c:	41065340 	call	4106534 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 41073a0:	e0bfff17 	ldw	r2,-4(fp)
 41073a4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 41073a8:	e03ff615 	stw	zero,-40(fp)
             break;
 41073ac:	00000a06 	br	41073d8 <OSFlagDel+0x230>
 41073b0:	e0bff717 	ldw	r2,-36(fp)
 41073b4:	e0bffb15 	stw	r2,-20(fp)
 41073b8:	e0bffb17 	ldw	r2,-20(fp)
 41073bc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 41073c0:	e0bfff17 	ldw	r2,-4(fp)
 41073c4:	00c001c4 	movi	r3,7
 41073c8:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 41073cc:	e0bffd17 	ldw	r2,-12(fp)
 41073d0:	e0bff615 	stw	r2,-40(fp)
             break;
 41073d4:	0001883a 	nop
    }
    return (pgrp_return);
 41073d8:	e0bff617 	ldw	r2,-40(fp)
}
 41073dc:	e037883a 	mov	sp,fp
 41073e0:	dfc00117 	ldw	ra,4(sp)
 41073e4:	df000017 	ldw	fp,0(sp)
 41073e8:	dec00204 	addi	sp,sp,8
 41073ec:	f800283a 	ret

041073f0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 41073f0:	defff604 	addi	sp,sp,-40
 41073f4:	dfc00915 	stw	ra,36(sp)
 41073f8:	df000815 	stw	fp,32(sp)
 41073fc:	df000804 	addi	fp,sp,32
 4107400:	e13ffd15 	stw	r4,-12(fp)
 4107404:	e17ffe15 	stw	r5,-8(fp)
 4107408:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 410740c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4107410:	e0bfff17 	ldw	r2,-4(fp)
 4107414:	1000021e 	bne	r2,zero,4107420 <OSFlagNameGet+0x30>
        return (0);
 4107418:	0005883a 	mov	r2,zero
 410741c:	00003906 	br	4107504 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 4107420:	e0bffd17 	ldw	r2,-12(fp)
 4107424:	1000051e 	bne	r2,zero,410743c <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4107428:	e0bfff17 	ldw	r2,-4(fp)
 410742c:	00c01b84 	movi	r3,110
 4107430:	10c00005 	stb	r3,0(r2)
        return (0);
 4107434:	0005883a 	mov	r2,zero
 4107438:	00003206 	br	4107504 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 410743c:	e0bffe17 	ldw	r2,-8(fp)
 4107440:	1000051e 	bne	r2,zero,4107458 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 4107444:	e0bfff17 	ldw	r2,-4(fp)
 4107448:	00c00304 	movi	r3,12
 410744c:	10c00005 	stb	r3,0(r2)
        return (0);
 4107450:	0005883a 	mov	r2,zero
 4107454:	00002b06 	br	4107504 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4107458:	d0a73103 	ldbu	r2,-25404(gp)
 410745c:	10803fcc 	andi	r2,r2,255
 4107460:	10000526 	beq	r2,zero,4107478 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 4107464:	e0bfff17 	ldw	r2,-4(fp)
 4107468:	00c00444 	movi	r3,17
 410746c:	10c00005 	stb	r3,0(r2)
        return (0);
 4107470:	0005883a 	mov	r2,zero
 4107474:	00002306 	br	4107504 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4107478:	0005303a 	rdctl	r2,status
 410747c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4107480:	e0fffc17 	ldw	r3,-16(fp)
 4107484:	00bfff84 	movi	r2,-2
 4107488:	1884703a 	and	r2,r3,r2
 410748c:	1001703a 	wrctl	status,r2
  
  return context;
 4107490:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4107494:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 4107498:	e0bffd17 	ldw	r2,-12(fp)
 410749c:	10800003 	ldbu	r2,0(r2)
 41074a0:	10803fcc 	andi	r2,r2,255
 41074a4:	10800160 	cmpeqi	r2,r2,5
 41074a8:	1000091e 	bne	r2,zero,41074d0 <OSFlagNameGet+0xe0>
 41074ac:	e0bff817 	ldw	r2,-32(fp)
 41074b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41074b4:	e0bff917 	ldw	r2,-28(fp)
 41074b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 41074bc:	e0bfff17 	ldw	r2,-4(fp)
 41074c0:	00c00044 	movi	r3,1
 41074c4:	10c00005 	stb	r3,0(r2)
        return (0);
 41074c8:	0005883a 	mov	r2,zero
 41074cc:	00000d06 	br	4107504 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 41074d0:	e0bffd17 	ldw	r2,-12(fp)
 41074d4:	10800284 	addi	r2,r2,10
 41074d8:	100b883a 	mov	r5,r2
 41074dc:	e13ffe17 	ldw	r4,-8(fp)
 41074e0:	41066780 	call	4106678 <OS_StrCopy>
 41074e4:	e0bffb05 	stb	r2,-20(fp)
 41074e8:	e0bff817 	ldw	r2,-32(fp)
 41074ec:	e0bffa15 	stw	r2,-24(fp)
 41074f0:	e0bffa17 	ldw	r2,-24(fp)
 41074f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 41074f8:	e0bfff17 	ldw	r2,-4(fp)
 41074fc:	10000005 	stb	zero,0(r2)
    return (len);
 4107500:	e0bffb03 	ldbu	r2,-20(fp)
}
 4107504:	e037883a 	mov	sp,fp
 4107508:	dfc00117 	ldw	ra,4(sp)
 410750c:	df000017 	ldw	fp,0(sp)
 4107510:	dec00204 	addi	sp,sp,8
 4107514:	f800283a 	ret

04107518 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 4107518:	defff504 	addi	sp,sp,-44
 410751c:	dfc00a15 	stw	ra,40(sp)
 4107520:	df000915 	stw	fp,36(sp)
 4107524:	df000904 	addi	fp,sp,36
 4107528:	e13ffd15 	stw	r4,-12(fp)
 410752c:	e17ffe15 	stw	r5,-8(fp)
 4107530:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4107534:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4107538:	e0bfff17 	ldw	r2,-4(fp)
 410753c:	10004326 	beq	r2,zero,410764c <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 4107540:	e0bffd17 	ldw	r2,-12(fp)
 4107544:	1000041e 	bne	r2,zero,4107558 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4107548:	e0bfff17 	ldw	r2,-4(fp)
 410754c:	00c01b84 	movi	r3,110
 4107550:	10c00005 	stb	r3,0(r2)
        return;
 4107554:	00003e06 	br	4107650 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4107558:	e0bffe17 	ldw	r2,-8(fp)
 410755c:	1000041e 	bne	r2,zero,4107570 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 4107560:	e0bfff17 	ldw	r2,-4(fp)
 4107564:	00c00304 	movi	r3,12
 4107568:	10c00005 	stb	r3,0(r2)
        return;
 410756c:	00003806 	br	4107650 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4107570:	d0a73103 	ldbu	r2,-25404(gp)
 4107574:	10803fcc 	andi	r2,r2,255
 4107578:	10000426 	beq	r2,zero,410758c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 410757c:	e0bfff17 	ldw	r2,-4(fp)
 4107580:	00c00484 	movi	r3,18
 4107584:	10c00005 	stb	r3,0(r2)
        return;
 4107588:	00003106 	br	4107650 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410758c:	0005303a 	rdctl	r2,status
 4107590:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4107594:	e0fffc17 	ldw	r3,-16(fp)
 4107598:	00bfff84 	movi	r2,-2
 410759c:	1884703a 	and	r2,r3,r2
 41075a0:	1001703a 	wrctl	status,r2
  
  return context;
 41075a4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 41075a8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 41075ac:	e0bffd17 	ldw	r2,-12(fp)
 41075b0:	10800003 	ldbu	r2,0(r2)
 41075b4:	10803fcc 	andi	r2,r2,255
 41075b8:	10800160 	cmpeqi	r2,r2,5
 41075bc:	1000081e 	bne	r2,zero,41075e0 <OSFlagNameSet+0xc8>
 41075c0:	e0bff717 	ldw	r2,-36(fp)
 41075c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41075c8:	e0bff817 	ldw	r2,-32(fp)
 41075cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 41075d0:	e0bfff17 	ldw	r2,-4(fp)
 41075d4:	00c00044 	movi	r3,1
 41075d8:	10c00005 	stb	r3,0(r2)
        return;
 41075dc:	00001c06 	br	4107650 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 41075e0:	e13ffe17 	ldw	r4,-8(fp)
 41075e4:	41066ec0 	call	41066ec <OS_StrLen>
 41075e8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 41075ec:	e0bffa03 	ldbu	r2,-24(fp)
 41075f0:	10800830 	cmpltui	r2,r2,32
 41075f4:	1000081e 	bne	r2,zero,4107618 <OSFlagNameSet+0x100>
 41075f8:	e0bff717 	ldw	r2,-36(fp)
 41075fc:	e0bff915 	stw	r2,-28(fp)
 4107600:	e0bff917 	ldw	r2,-28(fp)
 4107604:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 4107608:	e0bfff17 	ldw	r2,-4(fp)
 410760c:	00c01cc4 	movi	r3,115
 4107610:	10c00005 	stb	r3,0(r2)
        return;
 4107614:	00000e06 	br	4107650 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 4107618:	e0bffd17 	ldw	r2,-12(fp)
 410761c:	10800284 	addi	r2,r2,10
 4107620:	e17ffe17 	ldw	r5,-8(fp)
 4107624:	1009883a 	mov	r4,r2
 4107628:	41066780 	call	4106678 <OS_StrCopy>
 410762c:	e0bff717 	ldw	r2,-36(fp)
 4107630:	e0bffb15 	stw	r2,-20(fp)
 4107634:	e0bffb17 	ldw	r2,-20(fp)
 4107638:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 410763c:	e0bfff17 	ldw	r2,-4(fp)
 4107640:	10000005 	stb	zero,0(r2)
    return;
 4107644:	0001883a 	nop
 4107648:	00000106 	br	4107650 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 410764c:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 4107650:	e037883a 	mov	sp,fp
 4107654:	dfc00117 	ldw	ra,4(sp)
 4107658:	df000017 	ldw	fp,0(sp)
 410765c:	dec00204 	addi	sp,sp,8
 4107660:	f800283a 	ret

04107664 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 4107664:	deffe104 	addi	sp,sp,-124
 4107668:	dfc01e15 	stw	ra,120(sp)
 410766c:	df001d15 	stw	fp,116(sp)
 4107670:	df001d04 	addi	fp,sp,116
 4107674:	e13ffc15 	stw	r4,-16(fp)
 4107678:	2809883a 	mov	r4,r5
 410767c:	3007883a 	mov	r3,r6
 4107680:	3805883a 	mov	r2,r7
 4107684:	e13ffd0d 	sth	r4,-12(fp)
 4107688:	e0fffe05 	stb	r3,-8(fp)
 410768c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4107690:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4107694:	e0800217 	ldw	r2,8(fp)
 4107698:	1000021e 	bne	r2,zero,41076a4 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 410769c:	0005883a 	mov	r2,zero
 41076a0:	00015906 	br	4107c08 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 41076a4:	e0bffc17 	ldw	r2,-16(fp)
 41076a8:	1000051e 	bne	r2,zero,41076c0 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 41076ac:	e0800217 	ldw	r2,8(fp)
 41076b0:	00c01b84 	movi	r3,110
 41076b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 41076b8:	0005883a 	mov	r2,zero
 41076bc:	00015206 	br	4107c08 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 41076c0:	d0a73103 	ldbu	r2,-25404(gp)
 41076c4:	10803fcc 	andi	r2,r2,255
 41076c8:	10000526 	beq	r2,zero,41076e0 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 41076cc:	e0800217 	ldw	r2,8(fp)
 41076d0:	00c00084 	movi	r3,2
 41076d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 41076d8:	0005883a 	mov	r2,zero
 41076dc:	00014a06 	br	4107c08 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 41076e0:	d0a72303 	ldbu	r2,-25460(gp)
 41076e4:	10803fcc 	andi	r2,r2,255
 41076e8:	10000526 	beq	r2,zero,4107700 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 41076ec:	e0800217 	ldw	r2,8(fp)
 41076f0:	00c00344 	movi	r3,13
 41076f4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 41076f8:	0005883a 	mov	r2,zero
 41076fc:	00014206 	br	4107c08 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 4107700:	e0bffc17 	ldw	r2,-16(fp)
 4107704:	10800003 	ldbu	r2,0(r2)
 4107708:	10803fcc 	andi	r2,r2,255
 410770c:	10800160 	cmpeqi	r2,r2,5
 4107710:	1000051e 	bne	r2,zero,4107728 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 4107714:	e0800217 	ldw	r2,8(fp)
 4107718:	00c00044 	movi	r3,1
 410771c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4107720:	0005883a 	mov	r2,zero
 4107724:	00013806 	br	4107c08 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 4107728:	e0fffe03 	ldbu	r3,-8(fp)
 410772c:	00bfe004 	movi	r2,-128
 4107730:	1884703a 	and	r2,r3,r2
 4107734:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 4107738:	e0bfe603 	ldbu	r2,-104(fp)
 410773c:	10000626 	beq	r2,zero,4107758 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 4107740:	e0bffe03 	ldbu	r2,-8(fp)
 4107744:	10801fcc 	andi	r2,r2,127
 4107748:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 410774c:	00800044 	movi	r2,1
 4107750:	e0bfe405 	stb	r2,-112(fp)
 4107754:	00000106 	br	410775c <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 4107758:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410775c:	0005303a 	rdctl	r2,status
 4107760:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4107764:	e0fff617 	ldw	r3,-40(fp)
 4107768:	00bfff84 	movi	r2,-2
 410776c:	1884703a 	and	r2,r3,r2
 4107770:	1001703a 	wrctl	status,r2
  
  return context;
 4107774:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 4107778:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 410777c:	e0bffe03 	ldbu	r2,-8(fp)
 4107780:	10c00060 	cmpeqi	r3,r2,1
 4107784:	1800921e 	bne	r3,zero,41079d0 <OSFlagPend+0x36c>
 4107788:	10c00088 	cmpgei	r3,r2,2
 410778c:	1800021e 	bne	r3,zero,4107798 <OSFlagPend+0x134>
 4107790:	10006126 	beq	r2,zero,4107918 <OSFlagPend+0x2b4>
 4107794:	0000bb06 	br	4107a84 <OSFlagPend+0x420>
 4107798:	10c000a0 	cmpeqi	r3,r2,2
 410779c:	1800031e 	bne	r3,zero,41077ac <OSFlagPend+0x148>
 41077a0:	108000e0 	cmpeqi	r2,r2,3
 41077a4:	10002f1e 	bne	r2,zero,4107864 <OSFlagPend+0x200>
 41077a8:	0000b606 	br	4107a84 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 41077ac:	e0bffc17 	ldw	r2,-16(fp)
 41077b0:	10c0020b 	ldhu	r3,8(r2)
 41077b4:	e0bffd0b 	ldhu	r2,-12(fp)
 41077b8:	1884703a 	and	r2,r3,r2
 41077bc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 41077c0:	e0ffe80b 	ldhu	r3,-96(fp)
 41077c4:	e0bffd0b 	ldhu	r2,-12(fp)
 41077c8:	1880171e 	bne	r3,r2,4107828 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 41077cc:	e0bfe403 	ldbu	r2,-112(fp)
 41077d0:	10800058 	cmpnei	r2,r2,1
 41077d4:	1000091e 	bne	r2,zero,41077fc <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 41077d8:	e0bffc17 	ldw	r2,-16(fp)
 41077dc:	1080020b 	ldhu	r2,8(r2)
 41077e0:	1007883a 	mov	r3,r2
 41077e4:	e0bfe80b 	ldhu	r2,-96(fp)
 41077e8:	0084303a 	nor	r2,zero,r2
 41077ec:	1884703a 	and	r2,r3,r2
 41077f0:	1007883a 	mov	r3,r2
 41077f4:	e0bffc17 	ldw	r2,-16(fp)
 41077f8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 41077fc:	d0a73217 	ldw	r2,-25400(gp)
 4107800:	e0ffe80b 	ldhu	r3,-96(fp)
 4107804:	10c00b0d 	sth	r3,44(r2)
 4107808:	e0bfe517 	ldw	r2,-108(fp)
 410780c:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4107810:	e0bfe717 	ldw	r2,-100(fp)
 4107814:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4107818:	e0800217 	ldw	r2,8(fp)
 410781c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4107820:	e0bfe80b 	ldhu	r2,-96(fp)
 4107824:	0000f806 	br	4107c08 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4107828:	e13ffd0b 	ldhu	r4,-12(fp)
 410782c:	e17ffe03 	ldbu	r5,-8(fp)
 4107830:	e0bfff0b 	ldhu	r2,-4(fp)
 4107834:	e0fff704 	addi	r3,fp,-36
 4107838:	d8800015 	stw	r2,0(sp)
 410783c:	280f883a 	mov	r7,r5
 4107840:	200d883a 	mov	r6,r4
 4107844:	180b883a 	mov	r5,r3
 4107848:	e13ffc17 	ldw	r4,-16(fp)
 410784c:	41080d40 	call	41080d4 <OS_FlagBlock>
 4107850:	e0bfe517 	ldw	r2,-108(fp)
 4107854:	e0bfe915 	stw	r2,-92(fp)
 4107858:	e0bfe917 	ldw	r2,-92(fp)
 410785c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4107860:	00009206 	br	4107aac <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 4107864:	e0bffc17 	ldw	r2,-16(fp)
 4107868:	10c0020b 	ldhu	r3,8(r2)
 410786c:	e0bffd0b 	ldhu	r2,-12(fp)
 4107870:	1884703a 	and	r2,r3,r2
 4107874:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 4107878:	e0bfe80b 	ldhu	r2,-96(fp)
 410787c:	10001726 	beq	r2,zero,41078dc <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4107880:	e0bfe403 	ldbu	r2,-112(fp)
 4107884:	10800058 	cmpnei	r2,r2,1
 4107888:	1000091e 	bne	r2,zero,41078b0 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 410788c:	e0bffc17 	ldw	r2,-16(fp)
 4107890:	1080020b 	ldhu	r2,8(r2)
 4107894:	1007883a 	mov	r3,r2
 4107898:	e0bfe80b 	ldhu	r2,-96(fp)
 410789c:	0084303a 	nor	r2,zero,r2
 41078a0:	1884703a 	and	r2,r3,r2
 41078a4:	1007883a 	mov	r3,r2
 41078a8:	e0bffc17 	ldw	r2,-16(fp)
 41078ac:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 41078b0:	d0a73217 	ldw	r2,-25400(gp)
 41078b4:	e0ffe80b 	ldhu	r3,-96(fp)
 41078b8:	10c00b0d 	sth	r3,44(r2)
 41078bc:	e0bfe517 	ldw	r2,-108(fp)
 41078c0:	e0bfea15 	stw	r2,-88(fp)
 41078c4:	e0bfea17 	ldw	r2,-88(fp)
 41078c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 41078cc:	e0800217 	ldw	r2,8(fp)
 41078d0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 41078d4:	e0bfe80b 	ldhu	r2,-96(fp)
 41078d8:	0000cb06 	br	4107c08 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 41078dc:	e13ffd0b 	ldhu	r4,-12(fp)
 41078e0:	e17ffe03 	ldbu	r5,-8(fp)
 41078e4:	e0bfff0b 	ldhu	r2,-4(fp)
 41078e8:	e0fff704 	addi	r3,fp,-36
 41078ec:	d8800015 	stw	r2,0(sp)
 41078f0:	280f883a 	mov	r7,r5
 41078f4:	200d883a 	mov	r6,r4
 41078f8:	180b883a 	mov	r5,r3
 41078fc:	e13ffc17 	ldw	r4,-16(fp)
 4107900:	41080d40 	call	41080d4 <OS_FlagBlock>
 4107904:	e0bfe517 	ldw	r2,-108(fp)
 4107908:	e0bfeb15 	stw	r2,-84(fp)
 410790c:	e0bfeb17 	ldw	r2,-84(fp)
 4107910:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4107914:	00006506 	br	4107aac <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 4107918:	e0bffc17 	ldw	r2,-16(fp)
 410791c:	1080020b 	ldhu	r2,8(r2)
 4107920:	0084303a 	nor	r2,zero,r2
 4107924:	1007883a 	mov	r3,r2
 4107928:	e0bffd0b 	ldhu	r2,-12(fp)
 410792c:	1884703a 	and	r2,r3,r2
 4107930:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4107934:	e0ffe80b 	ldhu	r3,-96(fp)
 4107938:	e0bffd0b 	ldhu	r2,-12(fp)
 410793c:	1880151e 	bne	r3,r2,4107994 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4107940:	e0bfe403 	ldbu	r2,-112(fp)
 4107944:	10800058 	cmpnei	r2,r2,1
 4107948:	1000071e 	bne	r2,zero,4107968 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 410794c:	e0bffc17 	ldw	r2,-16(fp)
 4107950:	10c0020b 	ldhu	r3,8(r2)
 4107954:	e0bfe80b 	ldhu	r2,-96(fp)
 4107958:	1884b03a 	or	r2,r3,r2
 410795c:	1007883a 	mov	r3,r2
 4107960:	e0bffc17 	ldw	r2,-16(fp)
 4107964:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4107968:	d0a73217 	ldw	r2,-25400(gp)
 410796c:	e0ffe80b 	ldhu	r3,-96(fp)
 4107970:	10c00b0d 	sth	r3,44(r2)
 4107974:	e0bfe517 	ldw	r2,-108(fp)
 4107978:	e0bfec15 	stw	r2,-80(fp)
 410797c:	e0bfec17 	ldw	r2,-80(fp)
 4107980:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4107984:	e0800217 	ldw	r2,8(fp)
 4107988:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 410798c:	e0bfe80b 	ldhu	r2,-96(fp)
 4107990:	00009d06 	br	4107c08 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4107994:	e13ffd0b 	ldhu	r4,-12(fp)
 4107998:	e17ffe03 	ldbu	r5,-8(fp)
 410799c:	e0bfff0b 	ldhu	r2,-4(fp)
 41079a0:	e0fff704 	addi	r3,fp,-36
 41079a4:	d8800015 	stw	r2,0(sp)
 41079a8:	280f883a 	mov	r7,r5
 41079ac:	200d883a 	mov	r6,r4
 41079b0:	180b883a 	mov	r5,r3
 41079b4:	e13ffc17 	ldw	r4,-16(fp)
 41079b8:	41080d40 	call	41080d4 <OS_FlagBlock>
 41079bc:	e0bfe517 	ldw	r2,-108(fp)
 41079c0:	e0bfed15 	stw	r2,-76(fp)
 41079c4:	e0bfed17 	ldw	r2,-76(fp)
 41079c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 41079cc:	00003706 	br	4107aac <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 41079d0:	e0bffc17 	ldw	r2,-16(fp)
 41079d4:	1080020b 	ldhu	r2,8(r2)
 41079d8:	0084303a 	nor	r2,zero,r2
 41079dc:	1007883a 	mov	r3,r2
 41079e0:	e0bffd0b 	ldhu	r2,-12(fp)
 41079e4:	1884703a 	and	r2,r3,r2
 41079e8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 41079ec:	e0bfe80b 	ldhu	r2,-96(fp)
 41079f0:	10001526 	beq	r2,zero,4107a48 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 41079f4:	e0bfe403 	ldbu	r2,-112(fp)
 41079f8:	10800058 	cmpnei	r2,r2,1
 41079fc:	1000071e 	bne	r2,zero,4107a1c <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 4107a00:	e0bffc17 	ldw	r2,-16(fp)
 4107a04:	10c0020b 	ldhu	r3,8(r2)
 4107a08:	e0bfe80b 	ldhu	r2,-96(fp)
 4107a0c:	1884b03a 	or	r2,r3,r2
 4107a10:	1007883a 	mov	r3,r2
 4107a14:	e0bffc17 	ldw	r2,-16(fp)
 4107a18:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4107a1c:	d0a73217 	ldw	r2,-25400(gp)
 4107a20:	e0ffe80b 	ldhu	r3,-96(fp)
 4107a24:	10c00b0d 	sth	r3,44(r2)
 4107a28:	e0bfe517 	ldw	r2,-108(fp)
 4107a2c:	e0bfee15 	stw	r2,-72(fp)
 4107a30:	e0bfee17 	ldw	r2,-72(fp)
 4107a34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4107a38:	e0800217 	ldw	r2,8(fp)
 4107a3c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4107a40:	e0bfe80b 	ldhu	r2,-96(fp)
 4107a44:	00007006 	br	4107c08 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4107a48:	e13ffd0b 	ldhu	r4,-12(fp)
 4107a4c:	e17ffe03 	ldbu	r5,-8(fp)
 4107a50:	e0bfff0b 	ldhu	r2,-4(fp)
 4107a54:	e0fff704 	addi	r3,fp,-36
 4107a58:	d8800015 	stw	r2,0(sp)
 4107a5c:	280f883a 	mov	r7,r5
 4107a60:	200d883a 	mov	r6,r4
 4107a64:	180b883a 	mov	r5,r3
 4107a68:	e13ffc17 	ldw	r4,-16(fp)
 4107a6c:	41080d40 	call	41080d4 <OS_FlagBlock>
 4107a70:	e0bfe517 	ldw	r2,-108(fp)
 4107a74:	e0bfef15 	stw	r2,-68(fp)
 4107a78:	e0bfef17 	ldw	r2,-68(fp)
 4107a7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4107a80:	00000a06 	br	4107aac <OSFlagPend+0x448>
 4107a84:	e0bfe517 	ldw	r2,-108(fp)
 4107a88:	e0bff015 	stw	r2,-64(fp)
 4107a8c:	e0bff017 	ldw	r2,-64(fp)
 4107a90:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 4107a94:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 4107a98:	e0800217 	ldw	r2,8(fp)
 4107a9c:	00c01bc4 	movi	r3,111
 4107aa0:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 4107aa4:	e0bfe80b 	ldhu	r2,-96(fp)
 4107aa8:	00005706 	br	4107c08 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 4107aac:	41065340 	call	4106534 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4107ab0:	0005303a 	rdctl	r2,status
 4107ab4:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4107ab8:	e0fff117 	ldw	r3,-60(fp)
 4107abc:	00bfff84 	movi	r2,-2
 4107ac0:	1884703a 	and	r2,r3,r2
 4107ac4:	1001703a 	wrctl	status,r2
  
  return context;
 4107ac8:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 4107acc:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 4107ad0:	d0a73217 	ldw	r2,-25400(gp)
 4107ad4:	10800c43 	ldbu	r2,49(r2)
 4107ad8:	10803fcc 	andi	r2,r2,255
 4107adc:	10001c26 	beq	r2,zero,4107b50 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 4107ae0:	d0a73217 	ldw	r2,-25400(gp)
 4107ae4:	10800c43 	ldbu	r2,49(r2)
 4107ae8:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4107aec:	d0a73217 	ldw	r2,-25400(gp)
 4107af0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 4107af4:	e0bff704 	addi	r2,fp,-36
 4107af8:	1009883a 	mov	r4,r2
 4107afc:	41084080 	call	4108408 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 4107b00:	d0a73217 	ldw	r2,-25400(gp)
 4107b04:	10000c05 	stb	zero,48(r2)
 4107b08:	e0bfe517 	ldw	r2,-108(fp)
 4107b0c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4107b10:	e0bff217 	ldw	r2,-56(fp)
 4107b14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 4107b18:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 4107b1c:	e0bff303 	ldbu	r2,-52(fp)
 4107b20:	108000a0 	cmpeqi	r2,r2,2
 4107b24:	10000426 	beq	r2,zero,4107b38 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 4107b28:	e0800217 	ldw	r2,8(fp)
 4107b2c:	00c00384 	movi	r3,14
 4107b30:	10c00005 	stb	r3,0(r2)
                 break;
 4107b34:	00000406 	br	4107b48 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 4107b38:	e0800217 	ldw	r2,8(fp)
 4107b3c:	00c00284 	movi	r3,10
 4107b40:	10c00005 	stb	r3,0(r2)
                 break;
 4107b44:	0001883a 	nop
        }
        return (flags_rdy);
 4107b48:	e0bfe80b 	ldhu	r2,-96(fp)
 4107b4c:	00002e06 	br	4107c08 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 4107b50:	d0a73217 	ldw	r2,-25400(gp)
 4107b54:	10800b0b 	ldhu	r2,44(r2)
 4107b58:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 4107b5c:	e0bfe403 	ldbu	r2,-112(fp)
 4107b60:	10800058 	cmpnei	r2,r2,1
 4107b64:	1000211e 	bne	r2,zero,4107bec <OSFlagPend+0x588>
        switch (wait_type) {
 4107b68:	e0bffe03 	ldbu	r2,-8(fp)
 4107b6c:	10001616 	blt	r2,zero,4107bc8 <OSFlagPend+0x564>
 4107b70:	10c00090 	cmplti	r3,r2,2
 4107b74:	18000c1e 	bne	r3,zero,4107ba8 <OSFlagPend+0x544>
 4107b78:	10800108 	cmpgei	r2,r2,4
 4107b7c:	1000121e 	bne	r2,zero,4107bc8 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 4107b80:	e0bffc17 	ldw	r2,-16(fp)
 4107b84:	1080020b 	ldhu	r2,8(r2)
 4107b88:	1007883a 	mov	r3,r2
 4107b8c:	e0bfe80b 	ldhu	r2,-96(fp)
 4107b90:	0084303a 	nor	r2,zero,r2
 4107b94:	1884703a 	and	r2,r3,r2
 4107b98:	1007883a 	mov	r3,r2
 4107b9c:	e0bffc17 	ldw	r2,-16(fp)
 4107ba0:	10c0020d 	sth	r3,8(r2)
                 break;
 4107ba4:	00001106 	br	4107bec <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 4107ba8:	e0bffc17 	ldw	r2,-16(fp)
 4107bac:	10c0020b 	ldhu	r3,8(r2)
 4107bb0:	e0bfe80b 	ldhu	r2,-96(fp)
 4107bb4:	1884b03a 	or	r2,r3,r2
 4107bb8:	1007883a 	mov	r3,r2
 4107bbc:	e0bffc17 	ldw	r2,-16(fp)
 4107bc0:	10c0020d 	sth	r3,8(r2)
                 break;
 4107bc4:	00000906 	br	4107bec <OSFlagPend+0x588>
 4107bc8:	e0bfe517 	ldw	r2,-108(fp)
 4107bcc:	e0bff415 	stw	r2,-48(fp)
 4107bd0:	e0bff417 	ldw	r2,-48(fp)
 4107bd4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 4107bd8:	e0800217 	ldw	r2,8(fp)
 4107bdc:	00c01bc4 	movi	r3,111
 4107be0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 4107be4:	0005883a 	mov	r2,zero
 4107be8:	00000706 	br	4107c08 <OSFlagPend+0x5a4>
 4107bec:	e0bfe517 	ldw	r2,-108(fp)
 4107bf0:	e0bff515 	stw	r2,-44(fp)
 4107bf4:	e0bff517 	ldw	r2,-44(fp)
 4107bf8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 4107bfc:	e0800217 	ldw	r2,8(fp)
 4107c00:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 4107c04:	e0bfe80b 	ldhu	r2,-96(fp)
}
 4107c08:	e037883a 	mov	sp,fp
 4107c0c:	dfc00117 	ldw	ra,4(sp)
 4107c10:	df000017 	ldw	fp,0(sp)
 4107c14:	dec00204 	addi	sp,sp,8
 4107c18:	f800283a 	ret

04107c1c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 4107c1c:	defffb04 	addi	sp,sp,-20
 4107c20:	df000415 	stw	fp,16(sp)
 4107c24:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4107c28:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4107c2c:	0005303a 	rdctl	r2,status
 4107c30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4107c34:	e0fffe17 	ldw	r3,-8(fp)
 4107c38:	00bfff84 	movi	r2,-2
 4107c3c:	1884703a 	and	r2,r3,r2
 4107c40:	1001703a 	wrctl	status,r2
  
  return context;
 4107c44:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 4107c48:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 4107c4c:	d0a73217 	ldw	r2,-25400(gp)
 4107c50:	10800b0b 	ldhu	r2,44(r2)
 4107c54:	e0bffd0d 	sth	r2,-12(fp)
 4107c58:	e0bffc17 	ldw	r2,-16(fp)
 4107c5c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4107c60:	e0bfff17 	ldw	r2,-4(fp)
 4107c64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 4107c68:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4107c6c:	e037883a 	mov	sp,fp
 4107c70:	df000017 	ldw	fp,0(sp)
 4107c74:	dec00104 	addi	sp,sp,4
 4107c78:	f800283a 	ret

04107c7c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 4107c7c:	deffef04 	addi	sp,sp,-68
 4107c80:	dfc01015 	stw	ra,64(sp)
 4107c84:	df000f15 	stw	fp,60(sp)
 4107c88:	df000f04 	addi	fp,sp,60
 4107c8c:	e13ffc15 	stw	r4,-16(fp)
 4107c90:	2807883a 	mov	r3,r5
 4107c94:	3005883a 	mov	r2,r6
 4107c98:	e1ffff15 	stw	r7,-4(fp)
 4107c9c:	e0fffd0d 	sth	r3,-12(fp)
 4107ca0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 4107ca4:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 4107ca8:	e0bfff17 	ldw	r2,-4(fp)
 4107cac:	1000021e 	bne	r2,zero,4107cb8 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 4107cb0:	0005883a 	mov	r2,zero
 4107cb4:	0000d106 	br	4107ffc <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 4107cb8:	e0bffc17 	ldw	r2,-16(fp)
 4107cbc:	1000051e 	bne	r2,zero,4107cd4 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4107cc0:	e0bfff17 	ldw	r2,-4(fp)
 4107cc4:	00c01b84 	movi	r3,110
 4107cc8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4107ccc:	0005883a 	mov	r2,zero
 4107cd0:	0000ca06 	br	4107ffc <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 4107cd4:	e0bffc17 	ldw	r2,-16(fp)
 4107cd8:	10800003 	ldbu	r2,0(r2)
 4107cdc:	10803fcc 	andi	r2,r2,255
 4107ce0:	10800160 	cmpeqi	r2,r2,5
 4107ce4:	1000051e 	bne	r2,zero,4107cfc <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 4107ce8:	e0bfff17 	ldw	r2,-4(fp)
 4107cec:	00c00044 	movi	r3,1
 4107cf0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4107cf4:	0005883a 	mov	r2,zero
 4107cf8:	0000c006 	br	4107ffc <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4107cfc:	0005303a 	rdctl	r2,status
 4107d00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4107d04:	e0fffb17 	ldw	r3,-20(fp)
 4107d08:	00bfff84 	movi	r2,-2
 4107d0c:	1884703a 	and	r2,r3,r2
 4107d10:	1001703a 	wrctl	status,r2
  
  return context;
 4107d14:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 4107d18:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 4107d1c:	e0bffe03 	ldbu	r2,-8(fp)
 4107d20:	10000326 	beq	r2,zero,4107d30 <OSFlagPost+0xb4>
 4107d24:	10800060 	cmpeqi	r2,r2,1
 4107d28:	10000b1e 	bne	r2,zero,4107d58 <OSFlagPost+0xdc>
 4107d2c:	00001206 	br	4107d78 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 4107d30:	e0bffc17 	ldw	r2,-16(fp)
 4107d34:	1080020b 	ldhu	r2,8(r2)
 4107d38:	1007883a 	mov	r3,r2
 4107d3c:	e0bffd0b 	ldhu	r2,-12(fp)
 4107d40:	0084303a 	nor	r2,zero,r2
 4107d44:	1884703a 	and	r2,r3,r2
 4107d48:	1007883a 	mov	r3,r2
 4107d4c:	e0bffc17 	ldw	r2,-16(fp)
 4107d50:	10c0020d 	sth	r3,8(r2)
             break;
 4107d54:	00001106 	br	4107d9c <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 4107d58:	e0bffc17 	ldw	r2,-16(fp)
 4107d5c:	10c0020b 	ldhu	r3,8(r2)
 4107d60:	e0bffd0b 	ldhu	r2,-12(fp)
 4107d64:	1884b03a 	or	r2,r3,r2
 4107d68:	1007883a 	mov	r3,r2
 4107d6c:	e0bffc17 	ldw	r2,-16(fp)
 4107d70:	10c0020d 	sth	r3,8(r2)
             break;
 4107d74:	00000906 	br	4107d9c <OSFlagPost+0x120>
 4107d78:	e0bff317 	ldw	r2,-52(fp)
 4107d7c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4107d80:	e0bff417 	ldw	r2,-48(fp)
 4107d84:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 4107d88:	e0bfff17 	ldw	r2,-4(fp)
 4107d8c:	00c01c44 	movi	r3,113
 4107d90:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 4107d94:	0005883a 	mov	r2,zero
 4107d98:	00009806 	br	4107ffc <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 4107d9c:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 4107da0:	e0bffc17 	ldw	r2,-16(fp)
 4107da4:	10800117 	ldw	r2,4(r2)
 4107da8:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 4107dac:	00007706 	br	4107f8c <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 4107db0:	e0bff117 	ldw	r2,-60(fp)
 4107db4:	10800483 	ldbu	r2,18(r2)
 4107db8:	10803fcc 	andi	r2,r2,255
 4107dbc:	10c00060 	cmpeqi	r3,r2,1
 4107dc0:	18004a1e 	bne	r3,zero,4107eec <OSFlagPost+0x270>
 4107dc4:	10c00088 	cmpgei	r3,r2,2
 4107dc8:	1800021e 	bne	r3,zero,4107dd4 <OSFlagPost+0x158>
 4107dcc:	10002f26 	beq	r2,zero,4107e8c <OSFlagPost+0x210>
 4107dd0:	00005b06 	br	4107f40 <OSFlagPost+0x2c4>
 4107dd4:	10c000a0 	cmpeqi	r3,r2,2
 4107dd8:	1800031e 	bne	r3,zero,4107de8 <OSFlagPost+0x16c>
 4107ddc:	108000e0 	cmpeqi	r2,r2,3
 4107de0:	1000171e 	bne	r2,zero,4107e40 <OSFlagPost+0x1c4>
 4107de4:	00005606 	br	4107f40 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4107de8:	e0bffc17 	ldw	r2,-16(fp)
 4107dec:	10c0020b 	ldhu	r3,8(r2)
 4107df0:	e0bff117 	ldw	r2,-60(fp)
 4107df4:	1080040b 	ldhu	r2,16(r2)
 4107df8:	1884703a 	and	r2,r3,r2
 4107dfc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 4107e00:	e0bff117 	ldw	r2,-60(fp)
 4107e04:	1080040b 	ldhu	r2,16(r2)
 4107e08:	10ffffcc 	andi	r3,r2,65535
 4107e0c:	e0bff60b 	ldhu	r2,-40(fp)
 4107e10:	1880541e 	bne	r3,r2,4107f64 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4107e14:	e0bff60b 	ldhu	r2,-40(fp)
 4107e18:	100b883a 	mov	r5,r2
 4107e1c:	e13ff117 	ldw	r4,-60(fp)
 4107e20:	41083140 	call	4108314 <OS_FlagTaskRdy>
 4107e24:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4107e28:	e0bff683 	ldbu	r2,-38(fp)
 4107e2c:	10800058 	cmpnei	r2,r2,1
 4107e30:	10004c1e 	bne	r2,zero,4107f64 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4107e34:	00800044 	movi	r2,1
 4107e38:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4107e3c:	00004906 	br	4107f64 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4107e40:	e0bffc17 	ldw	r2,-16(fp)
 4107e44:	10c0020b 	ldhu	r3,8(r2)
 4107e48:	e0bff117 	ldw	r2,-60(fp)
 4107e4c:	1080040b 	ldhu	r2,16(r2)
 4107e50:	1884703a 	and	r2,r3,r2
 4107e54:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 4107e58:	e0bff60b 	ldhu	r2,-40(fp)
 4107e5c:	10004326 	beq	r2,zero,4107f6c <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4107e60:	e0bff60b 	ldhu	r2,-40(fp)
 4107e64:	100b883a 	mov	r5,r2
 4107e68:	e13ff117 	ldw	r4,-60(fp)
 4107e6c:	41083140 	call	4108314 <OS_FlagTaskRdy>
 4107e70:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4107e74:	e0bff683 	ldbu	r2,-38(fp)
 4107e78:	10800058 	cmpnei	r2,r2,1
 4107e7c:	10003b1e 	bne	r2,zero,4107f6c <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4107e80:	00800044 	movi	r2,1
 4107e84:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4107e88:	00003806 	br	4107f6c <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4107e8c:	e0bffc17 	ldw	r2,-16(fp)
 4107e90:	1080020b 	ldhu	r2,8(r2)
 4107e94:	0084303a 	nor	r2,zero,r2
 4107e98:	1007883a 	mov	r3,r2
 4107e9c:	e0bff117 	ldw	r2,-60(fp)
 4107ea0:	1080040b 	ldhu	r2,16(r2)
 4107ea4:	1884703a 	and	r2,r3,r2
 4107ea8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 4107eac:	e0bff117 	ldw	r2,-60(fp)
 4107eb0:	1080040b 	ldhu	r2,16(r2)
 4107eb4:	10ffffcc 	andi	r3,r2,65535
 4107eb8:	e0bff60b 	ldhu	r2,-40(fp)
 4107ebc:	18802d1e 	bne	r3,r2,4107f74 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4107ec0:	e0bff60b 	ldhu	r2,-40(fp)
 4107ec4:	100b883a 	mov	r5,r2
 4107ec8:	e13ff117 	ldw	r4,-60(fp)
 4107ecc:	41083140 	call	4108314 <OS_FlagTaskRdy>
 4107ed0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4107ed4:	e0bff683 	ldbu	r2,-38(fp)
 4107ed8:	10800058 	cmpnei	r2,r2,1
 4107edc:	1000251e 	bne	r2,zero,4107f74 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4107ee0:	00800044 	movi	r2,1
 4107ee4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4107ee8:	00002206 	br	4107f74 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4107eec:	e0bffc17 	ldw	r2,-16(fp)
 4107ef0:	1080020b 	ldhu	r2,8(r2)
 4107ef4:	0084303a 	nor	r2,zero,r2
 4107ef8:	1007883a 	mov	r3,r2
 4107efc:	e0bff117 	ldw	r2,-60(fp)
 4107f00:	1080040b 	ldhu	r2,16(r2)
 4107f04:	1884703a 	and	r2,r3,r2
 4107f08:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 4107f0c:	e0bff60b 	ldhu	r2,-40(fp)
 4107f10:	10001a26 	beq	r2,zero,4107f7c <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4107f14:	e0bff60b 	ldhu	r2,-40(fp)
 4107f18:	100b883a 	mov	r5,r2
 4107f1c:	e13ff117 	ldw	r4,-60(fp)
 4107f20:	41083140 	call	4108314 <OS_FlagTaskRdy>
 4107f24:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4107f28:	e0bff683 	ldbu	r2,-38(fp)
 4107f2c:	10800058 	cmpnei	r2,r2,1
 4107f30:	1000121e 	bne	r2,zero,4107f7c <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4107f34:	00800044 	movi	r2,1
 4107f38:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4107f3c:	00000f06 	br	4107f7c <OSFlagPost+0x300>
 4107f40:	e0bff317 	ldw	r2,-52(fp)
 4107f44:	e0bff515 	stw	r2,-44(fp)
 4107f48:	e0bff517 	ldw	r2,-44(fp)
 4107f4c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 4107f50:	e0bfff17 	ldw	r2,-4(fp)
 4107f54:	00c01bc4 	movi	r3,111
 4107f58:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 4107f5c:	0005883a 	mov	r2,zero
 4107f60:	00002606 	br	4107ffc <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4107f64:	0001883a 	nop
 4107f68:	00000506 	br	4107f80 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4107f6c:	0001883a 	nop
 4107f70:	00000306 	br	4107f80 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4107f74:	0001883a 	nop
 4107f78:	00000106 	br	4107f80 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4107f7c:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 4107f80:	e0bff117 	ldw	r2,-60(fp)
 4107f84:	10800017 	ldw	r2,0(r2)
 4107f88:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 4107f8c:	e0bff117 	ldw	r2,-60(fp)
 4107f90:	103f871e 	bne	r2,zero,4107db0 <OSFlagPost+0x134>
 4107f94:	e0bff317 	ldw	r2,-52(fp)
 4107f98:	e0bff715 	stw	r2,-36(fp)
 4107f9c:	e0bff717 	ldw	r2,-36(fp)
 4107fa0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 4107fa4:	e0bff203 	ldbu	r2,-56(fp)
 4107fa8:	10800058 	cmpnei	r2,r2,1
 4107fac:	1000011e 	bne	r2,zero,4107fb4 <OSFlagPost+0x338>
        OS_Sched();
 4107fb0:	41065340 	call	4106534 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4107fb4:	0005303a 	rdctl	r2,status
 4107fb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4107fbc:	e0fffa17 	ldw	r3,-24(fp)
 4107fc0:	00bfff84 	movi	r2,-2
 4107fc4:	1884703a 	and	r2,r3,r2
 4107fc8:	1001703a 	wrctl	status,r2
  
  return context;
 4107fcc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 4107fd0:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 4107fd4:	e0bffc17 	ldw	r2,-16(fp)
 4107fd8:	1080020b 	ldhu	r2,8(r2)
 4107fdc:	e0bff90d 	sth	r2,-28(fp)
 4107fe0:	e0bff317 	ldw	r2,-52(fp)
 4107fe4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4107fe8:	e0bff817 	ldw	r2,-32(fp)
 4107fec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 4107ff0:	e0bfff17 	ldw	r2,-4(fp)
 4107ff4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 4107ff8:	e0bff90b 	ldhu	r2,-28(fp)
}
 4107ffc:	e037883a 	mov	sp,fp
 4108000:	dfc00117 	ldw	ra,4(sp)
 4108004:	df000017 	ldw	fp,0(sp)
 4108008:	dec00204 	addi	sp,sp,8
 410800c:	f800283a 	ret

04108010 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 4108010:	defff904 	addi	sp,sp,-28
 4108014:	df000615 	stw	fp,24(sp)
 4108018:	df000604 	addi	fp,sp,24
 410801c:	e13ffe15 	stw	r4,-8(fp)
 4108020:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 4108024:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 4108028:	e0bfff17 	ldw	r2,-4(fp)
 410802c:	1000021e 	bne	r2,zero,4108038 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 4108030:	0005883a 	mov	r2,zero
 4108034:	00002306 	br	41080c4 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 4108038:	e0bffe17 	ldw	r2,-8(fp)
 410803c:	1000051e 	bne	r2,zero,4108054 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4108040:	e0bfff17 	ldw	r2,-4(fp)
 4108044:	00c01b84 	movi	r3,110
 4108048:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 410804c:	0005883a 	mov	r2,zero
 4108050:	00001c06 	br	41080c4 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 4108054:	e0bffe17 	ldw	r2,-8(fp)
 4108058:	10800003 	ldbu	r2,0(r2)
 410805c:	10803fcc 	andi	r2,r2,255
 4108060:	10800160 	cmpeqi	r2,r2,5
 4108064:	1000051e 	bne	r2,zero,410807c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 4108068:	e0bfff17 	ldw	r2,-4(fp)
 410806c:	00c00044 	movi	r3,1
 4108070:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4108074:	0005883a 	mov	r2,zero
 4108078:	00001206 	br	41080c4 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410807c:	0005303a 	rdctl	r2,status
 4108080:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4108084:	e0fffc17 	ldw	r3,-16(fp)
 4108088:	00bfff84 	movi	r2,-2
 410808c:	1884703a 	and	r2,r3,r2
 4108090:	1001703a 	wrctl	status,r2
  
  return context;
 4108094:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4108098:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 410809c:	e0bffe17 	ldw	r2,-8(fp)
 41080a0:	1080020b 	ldhu	r2,8(r2)
 41080a4:	e0bffb0d 	sth	r2,-20(fp)
 41080a8:	e0bffa17 	ldw	r2,-24(fp)
 41080ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41080b0:	e0bffd17 	ldw	r2,-12(fp)
 41080b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 41080b8:	e0bfff17 	ldw	r2,-4(fp)
 41080bc:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 41080c0:	e0bffb0b 	ldhu	r2,-20(fp)
}
 41080c4:	e037883a 	mov	sp,fp
 41080c8:	df000017 	ldw	fp,0(sp)
 41080cc:	dec00104 	addi	sp,sp,4
 41080d0:	f800283a 	ret

041080d4 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 41080d4:	defff804 	addi	sp,sp,-32
 41080d8:	df000715 	stw	fp,28(sp)
 41080dc:	df000704 	addi	fp,sp,28
 41080e0:	e13ffb15 	stw	r4,-20(fp)
 41080e4:	e17ffc15 	stw	r5,-16(fp)
 41080e8:	3009883a 	mov	r4,r6
 41080ec:	3807883a 	mov	r3,r7
 41080f0:	e0800117 	ldw	r2,4(fp)
 41080f4:	e13ffd0d 	sth	r4,-12(fp)
 41080f8:	e0fffe05 	stb	r3,-8(fp)
 41080fc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 4108100:	d0a73217 	ldw	r2,-25400(gp)
 4108104:	d0e73217 	ldw	r3,-25400(gp)
 4108108:	18c00c03 	ldbu	r3,48(r3)
 410810c:	18c00814 	ori	r3,r3,32
 4108110:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 4108114:	d0a73217 	ldw	r2,-25400(gp)
 4108118:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 410811c:	d0a73217 	ldw	r2,-25400(gp)
 4108120:	e0ffff0b 	ldhu	r3,-4(fp)
 4108124:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 4108128:	d0a73217 	ldw	r2,-25400(gp)
 410812c:	e0fffc17 	ldw	r3,-16(fp)
 4108130:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 4108134:	e0bffc17 	ldw	r2,-16(fp)
 4108138:	e0fffd0b 	ldhu	r3,-12(fp)
 410813c:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 4108140:	e0bffc17 	ldw	r2,-16(fp)
 4108144:	e0fffe03 	ldbu	r3,-8(fp)
 4108148:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 410814c:	d0e73217 	ldw	r3,-25400(gp)
 4108150:	e0bffc17 	ldw	r2,-16(fp)
 4108154:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 4108158:	e0bffb17 	ldw	r2,-20(fp)
 410815c:	10c00117 	ldw	r3,4(r2)
 4108160:	e0bffc17 	ldw	r2,-16(fp)
 4108164:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 4108168:	e0bffc17 	ldw	r2,-16(fp)
 410816c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 4108170:	e0bffc17 	ldw	r2,-16(fp)
 4108174:	e0fffb17 	ldw	r3,-20(fp)
 4108178:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 410817c:	e0bffb17 	ldw	r2,-20(fp)
 4108180:	10800117 	ldw	r2,4(r2)
 4108184:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 4108188:	e0bff917 	ldw	r2,-28(fp)
 410818c:	10000326 	beq	r2,zero,410819c <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 4108190:	e0bff917 	ldw	r2,-28(fp)
 4108194:	e0fffc17 	ldw	r3,-16(fp)
 4108198:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 410819c:	e0bffb17 	ldw	r2,-20(fp)
 41081a0:	e0fffc17 	ldw	r3,-16(fp)
 41081a4:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 41081a8:	d0a73217 	ldw	r2,-25400(gp)
 41081ac:	10800d03 	ldbu	r2,52(r2)
 41081b0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 41081b4:	e0fffa03 	ldbu	r3,-24(fp)
 41081b8:	e13ffa03 	ldbu	r4,-24(fp)
 41081bc:	d0a72f44 	addi	r2,gp,-25411
 41081c0:	2085883a 	add	r2,r4,r2
 41081c4:	10800003 	ldbu	r2,0(r2)
 41081c8:	1009883a 	mov	r4,r2
 41081cc:	d0a73217 	ldw	r2,-25400(gp)
 41081d0:	10800d43 	ldbu	r2,53(r2)
 41081d4:	0084303a 	nor	r2,zero,r2
 41081d8:	2084703a 	and	r2,r4,r2
 41081dc:	1009883a 	mov	r4,r2
 41081e0:	d0a72f44 	addi	r2,gp,-25411
 41081e4:	1885883a 	add	r2,r3,r2
 41081e8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 41081ec:	e0fffa03 	ldbu	r3,-24(fp)
 41081f0:	d0a72f44 	addi	r2,gp,-25411
 41081f4:	1885883a 	add	r2,r3,r2
 41081f8:	10800003 	ldbu	r2,0(r2)
 41081fc:	10803fcc 	andi	r2,r2,255
 4108200:	1000071e 	bne	r2,zero,4108220 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4108204:	d0a73217 	ldw	r2,-25400(gp)
 4108208:	10800d83 	ldbu	r2,54(r2)
 410820c:	0084303a 	nor	r2,zero,r2
 4108210:	1007883a 	mov	r3,r2
 4108214:	d0a72f03 	ldbu	r2,-25412(gp)
 4108218:	1884703a 	and	r2,r3,r2
 410821c:	d0a72f05 	stb	r2,-25412(gp)
    }
}
 4108220:	0001883a 	nop
 4108224:	e037883a 	mov	sp,fp
 4108228:	df000017 	ldw	fp,0(sp)
 410822c:	dec00104 	addi	sp,sp,4
 4108230:	f800283a 	ret

04108234 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 4108234:	defffb04 	addi	sp,sp,-20
 4108238:	dfc00415 	stw	ra,16(sp)
 410823c:	df000315 	stw	fp,12(sp)
 4108240:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 4108244:	0140dc04 	movi	r5,880
 4108248:	010104b4 	movhi	r4,1042
 410824c:	2124b104 	addi	r4,r4,-27964
 4108250:	41064780 	call	4106478 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 4108254:	008104b4 	movhi	r2,1042
 4108258:	10a4b104 	addi	r2,r2,-27964
 410825c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 4108260:	008104b4 	movhi	r2,1042
 4108264:	10a4bc04 	addi	r2,r2,-27920
 4108268:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 410826c:	e03ffd0d 	sth	zero,-12(fp)
 4108270:	00001306 	br	41082c0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4108274:	e0bffe17 	ldw	r2,-8(fp)
 4108278:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 410827c:	e0bffe17 	ldw	r2,-8(fp)
 4108280:	e0ffff17 	ldw	r3,-4(fp)
 4108284:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 4108288:	e0bffe17 	ldw	r2,-8(fp)
 410828c:	00c00fc4 	movi	r3,63
 4108290:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 4108294:	e0bffe17 	ldw	r2,-8(fp)
 4108298:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 410829c:	e0bffe17 	ldw	r2,-8(fp)
 41082a0:	10800b04 	addi	r2,r2,44
 41082a4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 41082a8:	e0bfff17 	ldw	r2,-4(fp)
 41082ac:	10800b04 	addi	r2,r2,44
 41082b0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 41082b4:	e0bffd0b 	ldhu	r2,-12(fp)
 41082b8:	10800044 	addi	r2,r2,1
 41082bc:	e0bffd0d 	sth	r2,-12(fp)
 41082c0:	e0bffd0b 	ldhu	r2,-12(fp)
 41082c4:	108004f0 	cmpltui	r2,r2,19
 41082c8:	103fea1e 	bne	r2,zero,4108274 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 41082cc:	e0bffe17 	ldw	r2,-8(fp)
 41082d0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 41082d4:	e0bffe17 	ldw	r2,-8(fp)
 41082d8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 41082dc:	e0bffe17 	ldw	r2,-8(fp)
 41082e0:	00c00fc4 	movi	r3,63
 41082e4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 41082e8:	e0bffe17 	ldw	r2,-8(fp)
 41082ec:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 41082f0:	008104b4 	movhi	r2,1042
 41082f4:	10a4b104 	addi	r2,r2,-27964
 41082f8:	d0a73415 	stw	r2,-25392(gp)
#endif
}
 41082fc:	0001883a 	nop
 4108300:	e037883a 	mov	sp,fp
 4108304:	dfc00117 	ldw	ra,4(sp)
 4108308:	df000017 	ldw	fp,0(sp)
 410830c:	dec00204 	addi	sp,sp,8
 4108310:	f800283a 	ret

04108314 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 4108314:	defffa04 	addi	sp,sp,-24
 4108318:	dfc00515 	stw	ra,20(sp)
 410831c:	df000415 	stw	fp,16(sp)
 4108320:	df000404 	addi	fp,sp,16
 4108324:	e13ffe15 	stw	r4,-8(fp)
 4108328:	2805883a 	mov	r2,r5
 410832c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 4108330:	e0bffe17 	ldw	r2,-8(fp)
 4108334:	10800217 	ldw	r2,8(r2)
 4108338:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 410833c:	e0bffd17 	ldw	r2,-12(fp)
 4108340:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 4108344:	e0bffd17 	ldw	r2,-12(fp)
 4108348:	e0ffff0b 	ldhu	r3,-4(fp)
 410834c:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 4108350:	e0bffd17 	ldw	r2,-12(fp)
 4108354:	10c00c03 	ldbu	r3,48(r2)
 4108358:	00bff7c4 	movi	r2,-33
 410835c:	1884703a 	and	r2,r3,r2
 4108360:	1007883a 	mov	r3,r2
 4108364:	e0bffd17 	ldw	r2,-12(fp)
 4108368:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 410836c:	e0bffd17 	ldw	r2,-12(fp)
 4108370:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 4108374:	e0bffd17 	ldw	r2,-12(fp)
 4108378:	10800c03 	ldbu	r2,48(r2)
 410837c:	10803fcc 	andi	r2,r2,255
 4108380:	1000181e 	bne	r2,zero,41083e4 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 4108384:	e0bffd17 	ldw	r2,-12(fp)
 4108388:	10c00d83 	ldbu	r3,54(r2)
 410838c:	d0a72f03 	ldbu	r2,-25412(gp)
 4108390:	1884b03a 	or	r2,r3,r2
 4108394:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4108398:	e0bffd17 	ldw	r2,-12(fp)
 410839c:	10800d03 	ldbu	r2,52(r2)
 41083a0:	10c03fcc 	andi	r3,r2,255
 41083a4:	e0bffd17 	ldw	r2,-12(fp)
 41083a8:	10800d03 	ldbu	r2,52(r2)
 41083ac:	11003fcc 	andi	r4,r2,255
 41083b0:	d0a72f44 	addi	r2,gp,-25411
 41083b4:	2085883a 	add	r2,r4,r2
 41083b8:	11000003 	ldbu	r4,0(r2)
 41083bc:	e0bffd17 	ldw	r2,-12(fp)
 41083c0:	10800d43 	ldbu	r2,53(r2)
 41083c4:	2084b03a 	or	r2,r4,r2
 41083c8:	1009883a 	mov	r4,r2
 41083cc:	d0a72f44 	addi	r2,gp,-25411
 41083d0:	1885883a 	add	r2,r3,r2
 41083d4:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 41083d8:	00800044 	movi	r2,1
 41083dc:	e0bffc05 	stb	r2,-16(fp)
 41083e0:	00000106 	br	41083e8 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 41083e4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 41083e8:	e13ffe17 	ldw	r4,-8(fp)
 41083ec:	41084080 	call	4108408 <OS_FlagUnlink>
    return (sched);
 41083f0:	e0bffc03 	ldbu	r2,-16(fp)
}
 41083f4:	e037883a 	mov	sp,fp
 41083f8:	dfc00117 	ldw	ra,4(sp)
 41083fc:	df000017 	ldw	fp,0(sp)
 4108400:	dec00204 	addi	sp,sp,8
 4108404:	f800283a 	ret

04108408 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 4108408:	defffa04 	addi	sp,sp,-24
 410840c:	df000515 	stw	fp,20(sp)
 4108410:	df000504 	addi	fp,sp,20
 4108414:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 4108418:	e0bfff17 	ldw	r2,-4(fp)
 410841c:	10800117 	ldw	r2,4(r2)
 4108420:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 4108424:	e0bfff17 	ldw	r2,-4(fp)
 4108428:	10800017 	ldw	r2,0(r2)
 410842c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 4108430:	e0bffb17 	ldw	r2,-20(fp)
 4108434:	10000b1e 	bne	r2,zero,4108464 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 4108438:	e0bfff17 	ldw	r2,-4(fp)
 410843c:	10800317 	ldw	r2,12(r2)
 4108440:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 4108444:	e0bffd17 	ldw	r2,-12(fp)
 4108448:	e0fffc17 	ldw	r3,-16(fp)
 410844c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 4108450:	e0bffc17 	ldw	r2,-16(fp)
 4108454:	10000b26 	beq	r2,zero,4108484 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 4108458:	e0bffc17 	ldw	r2,-16(fp)
 410845c:	10000115 	stw	zero,4(r2)
 4108460:	00000806 	br	4108484 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 4108464:	e0bffb17 	ldw	r2,-20(fp)
 4108468:	e0fffc17 	ldw	r3,-16(fp)
 410846c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 4108470:	e0bffc17 	ldw	r2,-16(fp)
 4108474:	10000326 	beq	r2,zero,4108484 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 4108478:	e0bffc17 	ldw	r2,-16(fp)
 410847c:	e0fffb17 	ldw	r3,-20(fp)
 4108480:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 4108484:	e0bfff17 	ldw	r2,-4(fp)
 4108488:	10800217 	ldw	r2,8(r2)
 410848c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 4108490:	e0bffe17 	ldw	r2,-8(fp)
 4108494:	10000a15 	stw	zero,40(r2)
#endif
}
 4108498:	0001883a 	nop
 410849c:	e037883a 	mov	sp,fp
 41084a0:	df000017 	ldw	fp,0(sp)
 41084a4:	dec00104 	addi	sp,sp,4
 41084a8:	f800283a 	ret

041084ac <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 41084ac:	defff404 	addi	sp,sp,-48
 41084b0:	df000b15 	stw	fp,44(sp)
 41084b4:	df000b04 	addi	fp,sp,44
 41084b8:	e13ffc15 	stw	r4,-16(fp)
 41084bc:	e17ffd15 	stw	r5,-12(fp)
 41084c0:	e1bffe15 	stw	r6,-8(fp)
 41084c4:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 41084c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 41084cc:	e0bfff17 	ldw	r2,-4(fp)
 41084d0:	1000021e 	bne	r2,zero,41084dc <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 41084d4:	0005883a 	mov	r2,zero
 41084d8:	00006506 	br	4108670 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 41084dc:	e0bffc17 	ldw	r2,-16(fp)
 41084e0:	1000051e 	bne	r2,zero,41084f8 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 41084e4:	e0bfff17 	ldw	r2,-4(fp)
 41084e8:	00c01884 	movi	r3,98
 41084ec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 41084f0:	0005883a 	mov	r2,zero
 41084f4:	00005e06 	br	4108670 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 41084f8:	e0bffc17 	ldw	r2,-16(fp)
 41084fc:	108000cc 	andi	r2,r2,3
 4108500:	10000526 	beq	r2,zero,4108518 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 4108504:	e0bfff17 	ldw	r2,-4(fp)
 4108508:	00c01884 	movi	r3,98
 410850c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 4108510:	0005883a 	mov	r2,zero
 4108514:	00005606 	br	4108670 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 4108518:	e0bffd17 	ldw	r2,-12(fp)
 410851c:	108000a8 	cmpgeui	r2,r2,2
 4108520:	1000051e 	bne	r2,zero,4108538 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 4108524:	e0bfff17 	ldw	r2,-4(fp)
 4108528:	00c016c4 	movi	r3,91
 410852c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 4108530:	0005883a 	mov	r2,zero
 4108534:	00004e06 	br	4108670 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 4108538:	e0bffe17 	ldw	r2,-8(fp)
 410853c:	10800128 	cmpgeui	r2,r2,4
 4108540:	1000051e 	bne	r2,zero,4108558 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 4108544:	e0bfff17 	ldw	r2,-4(fp)
 4108548:	00c01704 	movi	r3,92
 410854c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 4108550:	0005883a 	mov	r2,zero
 4108554:	00004606 	br	4108670 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4108558:	0005303a 	rdctl	r2,status
 410855c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4108560:	e0fffb17 	ldw	r3,-20(fp)
 4108564:	00bfff84 	movi	r2,-2
 4108568:	1884703a 	and	r2,r3,r2
 410856c:	1001703a 	wrctl	status,r2
  
  return context;
 4108570:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4108574:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 4108578:	d0a72c17 	ldw	r2,-25424(gp)
 410857c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 4108580:	d0a72c17 	ldw	r2,-25424(gp)
 4108584:	10000326 	beq	r2,zero,4108594 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 4108588:	d0a72c17 	ldw	r2,-25424(gp)
 410858c:	10800117 	ldw	r2,4(r2)
 4108590:	d0a72c15 	stw	r2,-25424(gp)
 4108594:	e0bff817 	ldw	r2,-32(fp)
 4108598:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410859c:	e0bff917 	ldw	r2,-28(fp)
 41085a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 41085a4:	e0bffa17 	ldw	r2,-24(fp)
 41085a8:	1000051e 	bne	r2,zero,41085c0 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 41085ac:	e0bfff17 	ldw	r2,-4(fp)
 41085b0:	00c01684 	movi	r3,90
 41085b4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 41085b8:	0005883a 	mov	r2,zero
 41085bc:	00002c06 	br	4108670 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 41085c0:	e0bffc17 	ldw	r2,-16(fp)
 41085c4:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 41085c8:	e0fffc17 	ldw	r3,-16(fp)
 41085cc:	e0bffe17 	ldw	r2,-8(fp)
 41085d0:	1885883a 	add	r2,r3,r2
 41085d4:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 41085d8:	e03ff715 	stw	zero,-36(fp)
 41085dc:	00000c06 	br	4108610 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 41085e0:	e0bff617 	ldw	r2,-40(fp)
 41085e4:	e0fff517 	ldw	r3,-44(fp)
 41085e8:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 41085ec:	e0bff517 	ldw	r2,-44(fp)
 41085f0:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 41085f4:	e0fff517 	ldw	r3,-44(fp)
 41085f8:	e0bffe17 	ldw	r2,-8(fp)
 41085fc:	1885883a 	add	r2,r3,r2
 4108600:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 4108604:	e0bff717 	ldw	r2,-36(fp)
 4108608:	10800044 	addi	r2,r2,1
 410860c:	e0bff715 	stw	r2,-36(fp)
 4108610:	e0bffd17 	ldw	r2,-12(fp)
 4108614:	10bfffc4 	addi	r2,r2,-1
 4108618:	e0fff717 	ldw	r3,-36(fp)
 410861c:	18bff036 	bltu	r3,r2,41085e0 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 4108620:	e0bff617 	ldw	r2,-40(fp)
 4108624:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 4108628:	e0bffa17 	ldw	r2,-24(fp)
 410862c:	e0fffc17 	ldw	r3,-16(fp)
 4108630:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 4108634:	e0bffa17 	ldw	r2,-24(fp)
 4108638:	e0fffc17 	ldw	r3,-16(fp)
 410863c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 4108640:	e0bffa17 	ldw	r2,-24(fp)
 4108644:	e0fffd17 	ldw	r3,-12(fp)
 4108648:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 410864c:	e0bffa17 	ldw	r2,-24(fp)
 4108650:	e0fffd17 	ldw	r3,-12(fp)
 4108654:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 4108658:	e0bffa17 	ldw	r2,-24(fp)
 410865c:	e0fffe17 	ldw	r3,-8(fp)
 4108660:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 4108664:	e0bfff17 	ldw	r2,-4(fp)
 4108668:	10000005 	stb	zero,0(r2)
    return (pmem);
 410866c:	e0bffa17 	ldw	r2,-24(fp)
}
 4108670:	e037883a 	mov	sp,fp
 4108674:	df000017 	ldw	fp,0(sp)
 4108678:	dec00104 	addi	sp,sp,4
 410867c:	f800283a 	ret

04108680 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 4108680:	defff804 	addi	sp,sp,-32
 4108684:	df000715 	stw	fp,28(sp)
 4108688:	df000704 	addi	fp,sp,28
 410868c:	e13ffe15 	stw	r4,-8(fp)
 4108690:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4108694:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4108698:	e0bfff17 	ldw	r2,-4(fp)
 410869c:	1000021e 	bne	r2,zero,41086a8 <OSMemGet+0x28>
        return ((void *)0);
 41086a0:	0005883a 	mov	r2,zero
 41086a4:	00002e06 	br	4108760 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 41086a8:	e0bffe17 	ldw	r2,-8(fp)
 41086ac:	1000051e 	bne	r2,zero,41086c4 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 41086b0:	e0bfff17 	ldw	r2,-4(fp)
 41086b4:	00c01804 	movi	r3,96
 41086b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 41086bc:	0005883a 	mov	r2,zero
 41086c0:	00002706 	br	4108760 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41086c4:	0005303a 	rdctl	r2,status
 41086c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41086cc:	e0fffd17 	ldw	r3,-12(fp)
 41086d0:	00bfff84 	movi	r2,-2
 41086d4:	1884703a 	and	r2,r3,r2
 41086d8:	1001703a 	wrctl	status,r2
  
  return context;
 41086dc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 41086e0:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 41086e4:	e0bffe17 	ldw	r2,-8(fp)
 41086e8:	10800417 	ldw	r2,16(r2)
 41086ec:	10001426 	beq	r2,zero,4108740 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 41086f0:	e0bffe17 	ldw	r2,-8(fp)
 41086f4:	10800117 	ldw	r2,4(r2)
 41086f8:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 41086fc:	e0bffb17 	ldw	r2,-20(fp)
 4108700:	10c00017 	ldw	r3,0(r2)
 4108704:	e0bffe17 	ldw	r2,-8(fp)
 4108708:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 410870c:	e0bffe17 	ldw	r2,-8(fp)
 4108710:	10800417 	ldw	r2,16(r2)
 4108714:	10ffffc4 	addi	r3,r2,-1
 4108718:	e0bffe17 	ldw	r2,-8(fp)
 410871c:	10c00415 	stw	r3,16(r2)
 4108720:	e0bff917 	ldw	r2,-28(fp)
 4108724:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4108728:	e0bffa17 	ldw	r2,-24(fp)
 410872c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 4108730:	e0bfff17 	ldw	r2,-4(fp)
 4108734:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 4108738:	e0bffb17 	ldw	r2,-20(fp)
 410873c:	00000806 	br	4108760 <OSMemGet+0xe0>
 4108740:	e0bff917 	ldw	r2,-28(fp)
 4108744:	e0bffc15 	stw	r2,-16(fp)
 4108748:	e0bffc17 	ldw	r2,-16(fp)
 410874c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 4108750:	e0bfff17 	ldw	r2,-4(fp)
 4108754:	00c01744 	movi	r3,93
 4108758:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 410875c:	0005883a 	mov	r2,zero
}
 4108760:	e037883a 	mov	sp,fp
 4108764:	df000017 	ldw	fp,0(sp)
 4108768:	dec00104 	addi	sp,sp,4
 410876c:	f800283a 	ret

04108770 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4108770:	defff704 	addi	sp,sp,-36
 4108774:	dfc00815 	stw	ra,32(sp)
 4108778:	df000715 	stw	fp,28(sp)
 410877c:	df000704 	addi	fp,sp,28
 4108780:	e13ffd15 	stw	r4,-12(fp)
 4108784:	e17ffe15 	stw	r5,-8(fp)
 4108788:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 410878c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4108790:	e0bfff17 	ldw	r2,-4(fp)
 4108794:	1000021e 	bne	r2,zero,41087a0 <OSMemNameGet+0x30>
        return (0);
 4108798:	0005883a 	mov	r2,zero
 410879c:	00002b06 	br	410884c <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 41087a0:	e0bffd17 	ldw	r2,-12(fp)
 41087a4:	1000051e 	bne	r2,zero,41087bc <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 41087a8:	e0bfff17 	ldw	r2,-4(fp)
 41087ac:	00c01804 	movi	r3,96
 41087b0:	10c00005 	stb	r3,0(r2)
        return (0);
 41087b4:	0005883a 	mov	r2,zero
 41087b8:	00002406 	br	410884c <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 41087bc:	e0bffe17 	ldw	r2,-8(fp)
 41087c0:	1000051e 	bne	r2,zero,41087d8 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 41087c4:	e0bfff17 	ldw	r2,-4(fp)
 41087c8:	00c00304 	movi	r3,12
 41087cc:	10c00005 	stb	r3,0(r2)
        return (0);
 41087d0:	0005883a 	mov	r2,zero
 41087d4:	00001d06 	br	410884c <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 41087d8:	d0a73103 	ldbu	r2,-25404(gp)
 41087dc:	10803fcc 	andi	r2,r2,255
 41087e0:	10000526 	beq	r2,zero,41087f8 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 41087e4:	e0bfff17 	ldw	r2,-4(fp)
 41087e8:	00c00444 	movi	r3,17
 41087ec:	10c00005 	stb	r3,0(r2)
        return (0);
 41087f0:	0005883a 	mov	r2,zero
 41087f4:	00001506 	br	410884c <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41087f8:	0005303a 	rdctl	r2,status
 41087fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4108800:	e0fffb17 	ldw	r3,-20(fp)
 4108804:	00bfff84 	movi	r2,-2
 4108808:	1884703a 	and	r2,r3,r2
 410880c:	1001703a 	wrctl	status,r2
  
  return context;
 4108810:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 4108814:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 4108818:	e0bffd17 	ldw	r2,-12(fp)
 410881c:	10800504 	addi	r2,r2,20
 4108820:	100b883a 	mov	r5,r2
 4108824:	e13ffe17 	ldw	r4,-8(fp)
 4108828:	41066780 	call	4106678 <OS_StrCopy>
 410882c:	e0bffa05 	stb	r2,-24(fp)
 4108830:	e0bff917 	ldw	r2,-28(fp)
 4108834:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4108838:	e0bffc17 	ldw	r2,-16(fp)
 410883c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4108840:	e0bfff17 	ldw	r2,-4(fp)
 4108844:	10000005 	stb	zero,0(r2)
    return (len);
 4108848:	e0bffa03 	ldbu	r2,-24(fp)
}
 410884c:	e037883a 	mov	sp,fp
 4108850:	dfc00117 	ldw	ra,4(sp)
 4108854:	df000017 	ldw	fp,0(sp)
 4108858:	dec00204 	addi	sp,sp,8
 410885c:	f800283a 	ret

04108860 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 4108860:	defff604 	addi	sp,sp,-40
 4108864:	dfc00915 	stw	ra,36(sp)
 4108868:	df000815 	stw	fp,32(sp)
 410886c:	df000804 	addi	fp,sp,32
 4108870:	e13ffd15 	stw	r4,-12(fp)
 4108874:	e17ffe15 	stw	r5,-8(fp)
 4108878:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 410887c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4108880:	e0bfff17 	ldw	r2,-4(fp)
 4108884:	10003526 	beq	r2,zero,410895c <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4108888:	e0bffd17 	ldw	r2,-12(fp)
 410888c:	1000041e 	bne	r2,zero,41088a0 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4108890:	e0bfff17 	ldw	r2,-4(fp)
 4108894:	00c01804 	movi	r3,96
 4108898:	10c00005 	stb	r3,0(r2)
        return;
 410889c:	00003006 	br	4108960 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 41088a0:	e0bffe17 	ldw	r2,-8(fp)
 41088a4:	1000041e 	bne	r2,zero,41088b8 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 41088a8:	e0bfff17 	ldw	r2,-4(fp)
 41088ac:	00c00304 	movi	r3,12
 41088b0:	10c00005 	stb	r3,0(r2)
        return;
 41088b4:	00002a06 	br	4108960 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 41088b8:	d0a73103 	ldbu	r2,-25404(gp)
 41088bc:	10803fcc 	andi	r2,r2,255
 41088c0:	10000426 	beq	r2,zero,41088d4 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 41088c4:	e0bfff17 	ldw	r2,-4(fp)
 41088c8:	00c00484 	movi	r3,18
 41088cc:	10c00005 	stb	r3,0(r2)
        return;
 41088d0:	00002306 	br	4108960 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41088d4:	0005303a 	rdctl	r2,status
 41088d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41088dc:	e0fffc17 	ldw	r3,-16(fp)
 41088e0:	00bfff84 	movi	r2,-2
 41088e4:	1884703a 	and	r2,r3,r2
 41088e8:	1001703a 	wrctl	status,r2
  
  return context;
 41088ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 41088f0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 41088f4:	e13ffe17 	ldw	r4,-8(fp)
 41088f8:	41066ec0 	call	41066ec <OS_StrLen>
 41088fc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 4108900:	e0bffa03 	ldbu	r2,-24(fp)
 4108904:	10800830 	cmpltui	r2,r2,32
 4108908:	1000081e 	bne	r2,zero,410892c <OSMemNameSet+0xcc>
 410890c:	e0bff817 	ldw	r2,-32(fp)
 4108910:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4108914:	e0bff917 	ldw	r2,-28(fp)
 4108918:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 410891c:	e0bfff17 	ldw	r2,-4(fp)
 4108920:	00c018c4 	movi	r3,99
 4108924:	10c00005 	stb	r3,0(r2)
        return;
 4108928:	00000d06 	br	4108960 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 410892c:	e0bffd17 	ldw	r2,-12(fp)
 4108930:	10800504 	addi	r2,r2,20
 4108934:	e17ffe17 	ldw	r5,-8(fp)
 4108938:	1009883a 	mov	r4,r2
 410893c:	41066780 	call	4106678 <OS_StrCopy>
 4108940:	e0bff817 	ldw	r2,-32(fp)
 4108944:	e0bffb15 	stw	r2,-20(fp)
 4108948:	e0bffb17 	ldw	r2,-20(fp)
 410894c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4108950:	e0bfff17 	ldw	r2,-4(fp)
 4108954:	10000005 	stb	zero,0(r2)
 4108958:	00000106 	br	4108960 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 410895c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4108960:	e037883a 	mov	sp,fp
 4108964:	dfc00117 	ldw	ra,4(sp)
 4108968:	df000017 	ldw	fp,0(sp)
 410896c:	dec00204 	addi	sp,sp,8
 4108970:	f800283a 	ret

04108974 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 4108974:	defff904 	addi	sp,sp,-28
 4108978:	df000615 	stw	fp,24(sp)
 410897c:	df000604 	addi	fp,sp,24
 4108980:	e13ffe15 	stw	r4,-8(fp)
 4108984:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4108988:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 410898c:	e0bffe17 	ldw	r2,-8(fp)
 4108990:	1000021e 	bne	r2,zero,410899c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 4108994:	00801804 	movi	r2,96
 4108998:	00002806 	br	4108a3c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 410899c:	e0bfff17 	ldw	r2,-4(fp)
 41089a0:	1000021e 	bne	r2,zero,41089ac <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 41089a4:	008017c4 	movi	r2,95
 41089a8:	00002406 	br	4108a3c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41089ac:	0005303a 	rdctl	r2,status
 41089b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41089b4:	e0fffd17 	ldw	r3,-12(fp)
 41089b8:	00bfff84 	movi	r2,-2
 41089bc:	1884703a 	and	r2,r3,r2
 41089c0:	1001703a 	wrctl	status,r2
  
  return context;
 41089c4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 41089c8:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 41089cc:	e0bffe17 	ldw	r2,-8(fp)
 41089d0:	10c00417 	ldw	r3,16(r2)
 41089d4:	e0bffe17 	ldw	r2,-8(fp)
 41089d8:	10800317 	ldw	r2,12(r2)
 41089dc:	18800636 	bltu	r3,r2,41089f8 <OSMemPut+0x84>
 41089e0:	e0bffa17 	ldw	r2,-24(fp)
 41089e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41089e8:	e0bffb17 	ldw	r2,-20(fp)
 41089ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 41089f0:	00801784 	movi	r2,94
 41089f4:	00001106 	br	4108a3c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 41089f8:	e0bffe17 	ldw	r2,-8(fp)
 41089fc:	10c00117 	ldw	r3,4(r2)
 4108a00:	e0bfff17 	ldw	r2,-4(fp)
 4108a04:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 4108a08:	e0bffe17 	ldw	r2,-8(fp)
 4108a0c:	e0ffff17 	ldw	r3,-4(fp)
 4108a10:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 4108a14:	e0bffe17 	ldw	r2,-8(fp)
 4108a18:	10800417 	ldw	r2,16(r2)
 4108a1c:	10c00044 	addi	r3,r2,1
 4108a20:	e0bffe17 	ldw	r2,-8(fp)
 4108a24:	10c00415 	stw	r3,16(r2)
 4108a28:	e0bffa17 	ldw	r2,-24(fp)
 4108a2c:	e0bffc15 	stw	r2,-16(fp)
 4108a30:	e0bffc17 	ldw	r2,-16(fp)
 4108a34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 4108a38:	0005883a 	mov	r2,zero
}
 4108a3c:	e037883a 	mov	sp,fp
 4108a40:	df000017 	ldw	fp,0(sp)
 4108a44:	dec00104 	addi	sp,sp,4
 4108a48:	f800283a 	ret

04108a4c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 4108a4c:	defffa04 	addi	sp,sp,-24
 4108a50:	df000515 	stw	fp,20(sp)
 4108a54:	df000504 	addi	fp,sp,20
 4108a58:	e13ffe15 	stw	r4,-8(fp)
 4108a5c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4108a60:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4108a64:	e0bffe17 	ldw	r2,-8(fp)
 4108a68:	1000021e 	bne	r2,zero,4108a74 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 4108a6c:	00801804 	movi	r2,96
 4108a70:	00002c06 	br	4108b24 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 4108a74:	e0bfff17 	ldw	r2,-4(fp)
 4108a78:	1000021e 	bne	r2,zero,4108a84 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 4108a7c:	00801844 	movi	r2,97
 4108a80:	00002806 	br	4108b24 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4108a84:	0005303a 	rdctl	r2,status
 4108a88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4108a8c:	e0fffc17 	ldw	r3,-16(fp)
 4108a90:	00bfff84 	movi	r2,-2
 4108a94:	1884703a 	and	r2,r3,r2
 4108a98:	1001703a 	wrctl	status,r2
  
  return context;
 4108a9c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4108aa0:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 4108aa4:	e0bffe17 	ldw	r2,-8(fp)
 4108aa8:	10c00017 	ldw	r3,0(r2)
 4108aac:	e0bfff17 	ldw	r2,-4(fp)
 4108ab0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 4108ab4:	e0bffe17 	ldw	r2,-8(fp)
 4108ab8:	10c00117 	ldw	r3,4(r2)
 4108abc:	e0bfff17 	ldw	r2,-4(fp)
 4108ac0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 4108ac4:	e0bffe17 	ldw	r2,-8(fp)
 4108ac8:	10c00217 	ldw	r3,8(r2)
 4108acc:	e0bfff17 	ldw	r2,-4(fp)
 4108ad0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 4108ad4:	e0bffe17 	ldw	r2,-8(fp)
 4108ad8:	10c00317 	ldw	r3,12(r2)
 4108adc:	e0bfff17 	ldw	r2,-4(fp)
 4108ae0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 4108ae4:	e0bffe17 	ldw	r2,-8(fp)
 4108ae8:	10c00417 	ldw	r3,16(r2)
 4108aec:	e0bfff17 	ldw	r2,-4(fp)
 4108af0:	10c00415 	stw	r3,16(r2)
 4108af4:	e0bffb17 	ldw	r2,-20(fp)
 4108af8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4108afc:	e0bffd17 	ldw	r2,-12(fp)
 4108b00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 4108b04:	e0bfff17 	ldw	r2,-4(fp)
 4108b08:	10c00317 	ldw	r3,12(r2)
 4108b0c:	e0bfff17 	ldw	r2,-4(fp)
 4108b10:	10800417 	ldw	r2,16(r2)
 4108b14:	1887c83a 	sub	r3,r3,r2
 4108b18:	e0bfff17 	ldw	r2,-4(fp)
 4108b1c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 4108b20:	0005883a 	mov	r2,zero
}
 4108b24:	e037883a 	mov	sp,fp
 4108b28:	df000017 	ldw	fp,0(sp)
 4108b2c:	dec00104 	addi	sp,sp,4
 4108b30:	f800283a 	ret

04108b34 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 4108b34:	defffc04 	addi	sp,sp,-16
 4108b38:	dfc00315 	stw	ra,12(sp)
 4108b3c:	df000215 	stw	fp,8(sp)
 4108b40:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 4108b44:	01430c04 	movi	r5,3120
 4108b48:	010104b4 	movhi	r4,1042
 4108b4c:	21258d04 	addi	r4,r4,-27084
 4108b50:	41064780 	call	4106478 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 4108b54:	008104b4 	movhi	r2,1042
 4108b58:	10a58d04 	addi	r2,r2,-27084
 4108b5c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4108b60:	e03fff0d 	sth	zero,-4(fp)
 4108b64:	00001306 	br	4108bb4 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 4108b68:	e0bfff0b 	ldhu	r2,-4(fp)
 4108b6c:	10800044 	addi	r2,r2,1
 4108b70:	10c00d24 	muli	r3,r2,52
 4108b74:	008104b4 	movhi	r2,1042
 4108b78:	10a58d04 	addi	r2,r2,-27084
 4108b7c:	1887883a 	add	r3,r3,r2
 4108b80:	e0bffe17 	ldw	r2,-8(fp)
 4108b84:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 4108b88:	e0bffe17 	ldw	r2,-8(fp)
 4108b8c:	00c00fc4 	movi	r3,63
 4108b90:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 4108b94:	e0bffe17 	ldw	r2,-8(fp)
 4108b98:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 4108b9c:	e0bffe17 	ldw	r2,-8(fp)
 4108ba0:	10800d04 	addi	r2,r2,52
 4108ba4:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4108ba8:	e0bfff0b 	ldhu	r2,-4(fp)
 4108bac:	10800044 	addi	r2,r2,1
 4108bb0:	e0bfff0d 	sth	r2,-4(fp)
 4108bb4:	e0bfff0b 	ldhu	r2,-4(fp)
 4108bb8:	10800ef0 	cmpltui	r2,r2,59
 4108bbc:	103fea1e 	bne	r2,zero,4108b68 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 4108bc0:	e0bffe17 	ldw	r2,-8(fp)
 4108bc4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 4108bc8:	e0bffe17 	ldw	r2,-8(fp)
 4108bcc:	00c00fc4 	movi	r3,63
 4108bd0:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 4108bd4:	e0bffe17 	ldw	r2,-8(fp)
 4108bd8:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 4108bdc:	008104b4 	movhi	r2,1042
 4108be0:	10a58d04 	addi	r2,r2,-27084
 4108be4:	d0a72c15 	stw	r2,-25424(gp)
#endif
}
 4108be8:	0001883a 	nop
 4108bec:	e037883a 	mov	sp,fp
 4108bf0:	dfc00117 	ldw	ra,4(sp)
 4108bf4:	df000017 	ldw	fp,0(sp)
 4108bf8:	dec00204 	addi	sp,sp,8
 4108bfc:	f800283a 	ret

04108c00 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 4108c00:	defff804 	addi	sp,sp,-32
 4108c04:	df000715 	stw	fp,28(sp)
 4108c08:	df000704 	addi	fp,sp,28
 4108c0c:	e13ffe15 	stw	r4,-8(fp)
 4108c10:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4108c14:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4108c18:	e0bfff17 	ldw	r2,-4(fp)
 4108c1c:	1000021e 	bne	r2,zero,4108c28 <OSQAccept+0x28>
        return ((void *)0);
 4108c20:	0005883a 	mov	r2,zero
 4108c24:	00004206 	br	4108d30 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4108c28:	e0bffe17 	ldw	r2,-8(fp)
 4108c2c:	1000051e 	bne	r2,zero,4108c44 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 4108c30:	e0bfff17 	ldw	r2,-4(fp)
 4108c34:	00c00104 	movi	r3,4
 4108c38:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4108c3c:	0005883a 	mov	r2,zero
 4108c40:	00003b06 	br	4108d30 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 4108c44:	e0bffe17 	ldw	r2,-8(fp)
 4108c48:	10800003 	ldbu	r2,0(r2)
 4108c4c:	10803fcc 	andi	r2,r2,255
 4108c50:	108000a0 	cmpeqi	r2,r2,2
 4108c54:	1000051e 	bne	r2,zero,4108c6c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 4108c58:	e0bfff17 	ldw	r2,-4(fp)
 4108c5c:	00c00044 	movi	r3,1
 4108c60:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4108c64:	0005883a 	mov	r2,zero
 4108c68:	00003106 	br	4108d30 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4108c6c:	0005303a 	rdctl	r2,status
 4108c70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4108c74:	e0fffd17 	ldw	r3,-12(fp)
 4108c78:	00bfff84 	movi	r2,-2
 4108c7c:	1884703a 	and	r2,r3,r2
 4108c80:	1001703a 	wrctl	status,r2
  
  return context;
 4108c84:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4108c88:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 4108c8c:	e0bffe17 	ldw	r2,-8(fp)
 4108c90:	10800117 	ldw	r2,4(r2)
 4108c94:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4108c98:	e0bffc17 	ldw	r2,-16(fp)
 4108c9c:	1080058b 	ldhu	r2,22(r2)
 4108ca0:	10bfffcc 	andi	r2,r2,65535
 4108ca4:	10001926 	beq	r2,zero,4108d0c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4108ca8:	e0bffc17 	ldw	r2,-16(fp)
 4108cac:	10800417 	ldw	r2,16(r2)
 4108cb0:	11000104 	addi	r4,r2,4
 4108cb4:	e0fffc17 	ldw	r3,-16(fp)
 4108cb8:	19000415 	stw	r4,16(r3)
 4108cbc:	10800017 	ldw	r2,0(r2)
 4108cc0:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4108cc4:	e0bffc17 	ldw	r2,-16(fp)
 4108cc8:	1080058b 	ldhu	r2,22(r2)
 4108ccc:	10bfffc4 	addi	r2,r2,-1
 4108cd0:	1007883a 	mov	r3,r2
 4108cd4:	e0bffc17 	ldw	r2,-16(fp)
 4108cd8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4108cdc:	e0bffc17 	ldw	r2,-16(fp)
 4108ce0:	10c00417 	ldw	r3,16(r2)
 4108ce4:	e0bffc17 	ldw	r2,-16(fp)
 4108ce8:	10800217 	ldw	r2,8(r2)
 4108cec:	1880041e 	bne	r3,r2,4108d00 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 4108cf0:	e0bffc17 	ldw	r2,-16(fp)
 4108cf4:	10c00117 	ldw	r3,4(r2)
 4108cf8:	e0bffc17 	ldw	r2,-16(fp)
 4108cfc:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 4108d00:	e0bfff17 	ldw	r2,-4(fp)
 4108d04:	10000005 	stb	zero,0(r2)
 4108d08:	00000406 	br	4108d1c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 4108d0c:	e0bfff17 	ldw	r2,-4(fp)
 4108d10:	00c007c4 	movi	r3,31
 4108d14:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 4108d18:	e03ff915 	stw	zero,-28(fp)
 4108d1c:	e0bffa17 	ldw	r2,-24(fp)
 4108d20:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4108d24:	e0bffb17 	ldw	r2,-20(fp)
 4108d28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 4108d2c:	e0bff917 	ldw	r2,-28(fp)
}
 4108d30:	e037883a 	mov	sp,fp
 4108d34:	df000017 	ldw	fp,0(sp)
 4108d38:	dec00104 	addi	sp,sp,4
 4108d3c:	f800283a 	ret

04108d40 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 4108d40:	defff404 	addi	sp,sp,-48
 4108d44:	dfc00b15 	stw	ra,44(sp)
 4108d48:	df000a15 	stw	fp,40(sp)
 4108d4c:	df000a04 	addi	fp,sp,40
 4108d50:	e13ffe15 	stw	r4,-8(fp)
 4108d54:	2805883a 	mov	r2,r5
 4108d58:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4108d5c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4108d60:	d0a73103 	ldbu	r2,-25404(gp)
 4108d64:	10803fcc 	andi	r2,r2,255
 4108d68:	10000226 	beq	r2,zero,4108d74 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 4108d6c:	0005883a 	mov	r2,zero
 4108d70:	00005906 	br	4108ed8 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4108d74:	0005303a 	rdctl	r2,status
 4108d78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4108d7c:	e0fffd17 	ldw	r3,-12(fp)
 4108d80:	00bfff84 	movi	r2,-2
 4108d84:	1884703a 	and	r2,r3,r2
 4108d88:	1001703a 	wrctl	status,r2
  
  return context;
 4108d8c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4108d90:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 4108d94:	d0a73017 	ldw	r2,-25408(gp)
 4108d98:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 4108d9c:	d0a73017 	ldw	r2,-25408(gp)
 4108da0:	10000326 	beq	r2,zero,4108db0 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4108da4:	d0a73017 	ldw	r2,-25408(gp)
 4108da8:	10800117 	ldw	r2,4(r2)
 4108dac:	d0a73015 	stw	r2,-25408(gp)
 4108db0:	e0bff717 	ldw	r2,-36(fp)
 4108db4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4108db8:	e0bff817 	ldw	r2,-32(fp)
 4108dbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 4108dc0:	e0bff617 	ldw	r2,-40(fp)
 4108dc4:	10004326 	beq	r2,zero,4108ed4 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4108dc8:	0005303a 	rdctl	r2,status
 4108dcc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4108dd0:	e0fff917 	ldw	r3,-28(fp)
 4108dd4:	00bfff84 	movi	r2,-2
 4108dd8:	1884703a 	and	r2,r3,r2
 4108ddc:	1001703a 	wrctl	status,r2
  
  return context;
 4108de0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 4108de4:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 4108de8:	d0a72e17 	ldw	r2,-25416(gp)
 4108dec:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 4108df0:	e0bffb17 	ldw	r2,-20(fp)
 4108df4:	10002d26 	beq	r2,zero,4108eac <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 4108df8:	d0a72e17 	ldw	r2,-25416(gp)
 4108dfc:	10800017 	ldw	r2,0(r2)
 4108e00:	d0a72e15 	stw	r2,-25416(gp)
 4108e04:	e0bff717 	ldw	r2,-36(fp)
 4108e08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4108e0c:	e0bffa17 	ldw	r2,-24(fp)
 4108e10:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 4108e14:	e0bffb17 	ldw	r2,-20(fp)
 4108e18:	e0fffe17 	ldw	r3,-8(fp)
 4108e1c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 4108e20:	e0bfff0b 	ldhu	r2,-4(fp)
 4108e24:	1085883a 	add	r2,r2,r2
 4108e28:	1085883a 	add	r2,r2,r2
 4108e2c:	1007883a 	mov	r3,r2
 4108e30:	e0bffe17 	ldw	r2,-8(fp)
 4108e34:	10c7883a 	add	r3,r2,r3
 4108e38:	e0bffb17 	ldw	r2,-20(fp)
 4108e3c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 4108e40:	e0bffb17 	ldw	r2,-20(fp)
 4108e44:	e0fffe17 	ldw	r3,-8(fp)
 4108e48:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 4108e4c:	e0bffb17 	ldw	r2,-20(fp)
 4108e50:	e0fffe17 	ldw	r3,-8(fp)
 4108e54:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 4108e58:	e0bffb17 	ldw	r2,-20(fp)
 4108e5c:	e0ffff0b 	ldhu	r3,-4(fp)
 4108e60:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 4108e64:	e0bffb17 	ldw	r2,-20(fp)
 4108e68:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 4108e6c:	e0bff617 	ldw	r2,-40(fp)
 4108e70:	00c00084 	movi	r3,2
 4108e74:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 4108e78:	e0bff617 	ldw	r2,-40(fp)
 4108e7c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 4108e80:	e0bff617 	ldw	r2,-40(fp)
 4108e84:	e0fffb17 	ldw	r3,-20(fp)
 4108e88:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 4108e8c:	e0bff617 	ldw	r2,-40(fp)
 4108e90:	00c00fc4 	movi	r3,63
 4108e94:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 4108e98:	e0bff617 	ldw	r2,-40(fp)
 4108e9c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 4108ea0:	e13ff617 	ldw	r4,-40(fp)
 4108ea4:	41060980 	call	4106098 <OS_EventWaitListInit>
 4108ea8:	00000a06 	br	4108ed4 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 4108eac:	d0e73017 	ldw	r3,-25408(gp)
 4108eb0:	e0bff617 	ldw	r2,-40(fp)
 4108eb4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 4108eb8:	e0bff617 	ldw	r2,-40(fp)
 4108ebc:	d0a73015 	stw	r2,-25408(gp)
 4108ec0:	e0bff717 	ldw	r2,-36(fp)
 4108ec4:	e0bffc15 	stw	r2,-16(fp)
 4108ec8:	e0bffc17 	ldw	r2,-16(fp)
 4108ecc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 4108ed0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 4108ed4:	e0bff617 	ldw	r2,-40(fp)
}
 4108ed8:	e037883a 	mov	sp,fp
 4108edc:	dfc00117 	ldw	ra,4(sp)
 4108ee0:	df000017 	ldw	fp,0(sp)
 4108ee4:	dec00204 	addi	sp,sp,8
 4108ee8:	f800283a 	ret

04108eec <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4108eec:	defff204 	addi	sp,sp,-56
 4108ef0:	dfc00d15 	stw	ra,52(sp)
 4108ef4:	df000c15 	stw	fp,48(sp)
 4108ef8:	df000c04 	addi	fp,sp,48
 4108efc:	e13ffd15 	stw	r4,-12(fp)
 4108f00:	2805883a 	mov	r2,r5
 4108f04:	e1bfff15 	stw	r6,-4(fp)
 4108f08:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4108f0c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4108f10:	e0bfff17 	ldw	r2,-4(fp)
 4108f14:	1000021e 	bne	r2,zero,4108f20 <OSQDel+0x34>
        return (pevent);
 4108f18:	e0bffd17 	ldw	r2,-12(fp)
 4108f1c:	00008e06 	br	4109158 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4108f20:	e0bffd17 	ldw	r2,-12(fp)
 4108f24:	1000051e 	bne	r2,zero,4108f3c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4108f28:	e0bfff17 	ldw	r2,-4(fp)
 4108f2c:	00c00104 	movi	r3,4
 4108f30:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4108f34:	e0bffd17 	ldw	r2,-12(fp)
 4108f38:	00008706 	br	4109158 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 4108f3c:	e0bffd17 	ldw	r2,-12(fp)
 4108f40:	10800003 	ldbu	r2,0(r2)
 4108f44:	10803fcc 	andi	r2,r2,255
 4108f48:	108000a0 	cmpeqi	r2,r2,2
 4108f4c:	1000051e 	bne	r2,zero,4108f64 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4108f50:	e0bfff17 	ldw	r2,-4(fp)
 4108f54:	00c00044 	movi	r3,1
 4108f58:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4108f5c:	e0bffd17 	ldw	r2,-12(fp)
 4108f60:	00007d06 	br	4109158 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4108f64:	d0a73103 	ldbu	r2,-25404(gp)
 4108f68:	10803fcc 	andi	r2,r2,255
 4108f6c:	10000526 	beq	r2,zero,4108f84 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 4108f70:	e0bfff17 	ldw	r2,-4(fp)
 4108f74:	00c003c4 	movi	r3,15
 4108f78:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4108f7c:	e0bffd17 	ldw	r2,-12(fp)
 4108f80:	00007506 	br	4109158 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4108f84:	0005303a 	rdctl	r2,status
 4108f88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4108f8c:	e0fffc17 	ldw	r3,-16(fp)
 4108f90:	00bfff84 	movi	r2,-2
 4108f94:	1884703a 	and	r2,r3,r2
 4108f98:	1001703a 	wrctl	status,r2
  
  return context;
 4108f9c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4108fa0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 4108fa4:	e0bffd17 	ldw	r2,-12(fp)
 4108fa8:	10800283 	ldbu	r2,10(r2)
 4108fac:	10803fcc 	andi	r2,r2,255
 4108fb0:	10000326 	beq	r2,zero,4108fc0 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4108fb4:	00800044 	movi	r2,1
 4108fb8:	e0bff405 	stb	r2,-48(fp)
 4108fbc:	00000106 	br	4108fc4 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4108fc0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 4108fc4:	e0bffe03 	ldbu	r2,-8(fp)
 4108fc8:	10000326 	beq	r2,zero,4108fd8 <OSQDel+0xec>
 4108fcc:	10800060 	cmpeqi	r2,r2,1
 4108fd0:	1000301e 	bne	r2,zero,4109094 <OSQDel+0x1a8>
 4108fd4:	00005506 	br	410912c <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 4108fd8:	e0bff403 	ldbu	r2,-48(fp)
 4108fdc:	10001e1e 	bne	r2,zero,4109058 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 4108fe0:	e0bffd17 	ldw	r2,-12(fp)
 4108fe4:	00c00fc4 	movi	r3,63
 4108fe8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4108fec:	e0bffd17 	ldw	r2,-12(fp)
 4108ff0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 4108ff4:	e0bffd17 	ldw	r2,-12(fp)
 4108ff8:	10800117 	ldw	r2,4(r2)
 4108ffc:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 4109000:	d0e72e17 	ldw	r3,-25416(gp)
 4109004:	e0bff817 	ldw	r2,-32(fp)
 4109008:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 410900c:	e0bff817 	ldw	r2,-32(fp)
 4109010:	d0a72e15 	stw	r2,-25416(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4109014:	e0bffd17 	ldw	r2,-12(fp)
 4109018:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 410901c:	d0e73017 	ldw	r3,-25408(gp)
 4109020:	e0bffd17 	ldw	r2,-12(fp)
 4109024:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 4109028:	e0bffd17 	ldw	r2,-12(fp)
 410902c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 4109030:	e0bffd17 	ldw	r2,-12(fp)
 4109034:	d0a73015 	stw	r2,-25408(gp)
 4109038:	e0bff617 	ldw	r2,-40(fp)
 410903c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4109040:	e0bff717 	ldw	r2,-36(fp)
 4109044:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4109048:	e0bfff17 	ldw	r2,-4(fp)
 410904c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 4109050:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 4109054:	00003f06 	br	4109154 <OSQDel+0x268>
 4109058:	e0bff617 	ldw	r2,-40(fp)
 410905c:	e0bff915 	stw	r2,-28(fp)
 4109060:	e0bff917 	ldw	r2,-28(fp)
 4109064:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 4109068:	e0bfff17 	ldw	r2,-4(fp)
 410906c:	00c01244 	movi	r3,73
 4109070:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 4109074:	e0bffd17 	ldw	r2,-12(fp)
 4109078:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 410907c:	00003506 	br	4109154 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 4109080:	000f883a 	mov	r7,zero
 4109084:	01800104 	movi	r6,4
 4109088:	000b883a 	mov	r5,zero
 410908c:	e13ffd17 	ldw	r4,-12(fp)
 4109090:	4105ae80 	call	4105ae8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 4109094:	e0bffd17 	ldw	r2,-12(fp)
 4109098:	10800283 	ldbu	r2,10(r2)
 410909c:	10803fcc 	andi	r2,r2,255
 41090a0:	103ff71e 	bne	r2,zero,4109080 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 41090a4:	e0bffd17 	ldw	r2,-12(fp)
 41090a8:	00c00fc4 	movi	r3,63
 41090ac:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 41090b0:	e0bffd17 	ldw	r2,-12(fp)
 41090b4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 41090b8:	e0bffd17 	ldw	r2,-12(fp)
 41090bc:	10800117 	ldw	r2,4(r2)
 41090c0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 41090c4:	d0e72e17 	ldw	r3,-25416(gp)
 41090c8:	e0bff817 	ldw	r2,-32(fp)
 41090cc:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 41090d0:	e0bff817 	ldw	r2,-32(fp)
 41090d4:	d0a72e15 	stw	r2,-25416(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 41090d8:	e0bffd17 	ldw	r2,-12(fp)
 41090dc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 41090e0:	d0e73017 	ldw	r3,-25408(gp)
 41090e4:	e0bffd17 	ldw	r2,-12(fp)
 41090e8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 41090ec:	e0bffd17 	ldw	r2,-12(fp)
 41090f0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 41090f4:	e0bffd17 	ldw	r2,-12(fp)
 41090f8:	d0a73015 	stw	r2,-25408(gp)
 41090fc:	e0bff617 	ldw	r2,-40(fp)
 4109100:	e0bffa15 	stw	r2,-24(fp)
 4109104:	e0bffa17 	ldw	r2,-24(fp)
 4109108:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 410910c:	e0bff403 	ldbu	r2,-48(fp)
 4109110:	10800058 	cmpnei	r2,r2,1
 4109114:	1000011e 	bne	r2,zero,410911c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4109118:	41065340 	call	4106534 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 410911c:	e0bfff17 	ldw	r2,-4(fp)
 4109120:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 4109124:	e03ff515 	stw	zero,-44(fp)
             break;
 4109128:	00000a06 	br	4109154 <OSQDel+0x268>
 410912c:	e0bff617 	ldw	r2,-40(fp)
 4109130:	e0bffb15 	stw	r2,-20(fp)
 4109134:	e0bffb17 	ldw	r2,-20(fp)
 4109138:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 410913c:	e0bfff17 	ldw	r2,-4(fp)
 4109140:	00c001c4 	movi	r3,7
 4109144:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 4109148:	e0bffd17 	ldw	r2,-12(fp)
 410914c:	e0bff515 	stw	r2,-44(fp)
             break;
 4109150:	0001883a 	nop
    }
    return (pevent_return);
 4109154:	e0bff517 	ldw	r2,-44(fp)
}
 4109158:	e037883a 	mov	sp,fp
 410915c:	dfc00117 	ldw	ra,4(sp)
 4109160:	df000017 	ldw	fp,0(sp)
 4109164:	dec00204 	addi	sp,sp,8
 4109168:	f800283a 	ret

0410916c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 410916c:	defffa04 	addi	sp,sp,-24
 4109170:	df000515 	stw	fp,20(sp)
 4109174:	df000504 	addi	fp,sp,20
 4109178:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 410917c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4109180:	e0bfff17 	ldw	r2,-4(fp)
 4109184:	1000021e 	bne	r2,zero,4109190 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 4109188:	00800104 	movi	r2,4
 410918c:	00002106 	br	4109214 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4109190:	e0bfff17 	ldw	r2,-4(fp)
 4109194:	10800003 	ldbu	r2,0(r2)
 4109198:	10803fcc 	andi	r2,r2,255
 410919c:	108000a0 	cmpeqi	r2,r2,2
 41091a0:	1000021e 	bne	r2,zero,41091ac <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 41091a4:	00800044 	movi	r2,1
 41091a8:	00001a06 	br	4109214 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41091ac:	0005303a 	rdctl	r2,status
 41091b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41091b4:	e0fffd17 	ldw	r3,-12(fp)
 41091b8:	00bfff84 	movi	r2,-2
 41091bc:	1884703a 	and	r2,r3,r2
 41091c0:	1001703a 	wrctl	status,r2
  
  return context;
 41091c4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 41091c8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 41091cc:	e0bfff17 	ldw	r2,-4(fp)
 41091d0:	10800117 	ldw	r2,4(r2)
 41091d4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 41091d8:	e0bffc17 	ldw	r2,-16(fp)
 41091dc:	10c00117 	ldw	r3,4(r2)
 41091e0:	e0bffc17 	ldw	r2,-16(fp)
 41091e4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 41091e8:	e0bffc17 	ldw	r2,-16(fp)
 41091ec:	10c00117 	ldw	r3,4(r2)
 41091f0:	e0bffc17 	ldw	r2,-16(fp)
 41091f4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 41091f8:	e0bffc17 	ldw	r2,-16(fp)
 41091fc:	1000058d 	sth	zero,22(r2)
 4109200:	e0bffb17 	ldw	r2,-20(fp)
 4109204:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4109208:	e0bffe17 	ldw	r2,-8(fp)
 410920c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4109210:	0005883a 	mov	r2,zero
}
 4109214:	e037883a 	mov	sp,fp
 4109218:	df000017 	ldw	fp,0(sp)
 410921c:	dec00104 	addi	sp,sp,4
 4109220:	f800283a 	ret

04109224 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4109224:	defff304 	addi	sp,sp,-52
 4109228:	dfc00c15 	stw	ra,48(sp)
 410922c:	df000b15 	stw	fp,44(sp)
 4109230:	df000b04 	addi	fp,sp,44
 4109234:	e13ffd15 	stw	r4,-12(fp)
 4109238:	2805883a 	mov	r2,r5
 410923c:	e1bfff15 	stw	r6,-4(fp)
 4109240:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4109244:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4109248:	e0bfff17 	ldw	r2,-4(fp)
 410924c:	1000021e 	bne	r2,zero,4109258 <OSQPend+0x34>
        return ((void *)0);
 4109250:	0005883a 	mov	r2,zero
 4109254:	00009106 	br	410949c <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4109258:	e0bffd17 	ldw	r2,-12(fp)
 410925c:	1000051e 	bne	r2,zero,4109274 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4109260:	e0bfff17 	ldw	r2,-4(fp)
 4109264:	00c00104 	movi	r3,4
 4109268:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 410926c:	0005883a 	mov	r2,zero
 4109270:	00008a06 	br	410949c <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 4109274:	e0bffd17 	ldw	r2,-12(fp)
 4109278:	10800003 	ldbu	r2,0(r2)
 410927c:	10803fcc 	andi	r2,r2,255
 4109280:	108000a0 	cmpeqi	r2,r2,2
 4109284:	1000051e 	bne	r2,zero,410929c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4109288:	e0bfff17 	ldw	r2,-4(fp)
 410928c:	00c00044 	movi	r3,1
 4109290:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4109294:	0005883a 	mov	r2,zero
 4109298:	00008006 	br	410949c <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 410929c:	d0a73103 	ldbu	r2,-25404(gp)
 41092a0:	10803fcc 	andi	r2,r2,255
 41092a4:	10000526 	beq	r2,zero,41092bc <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 41092a8:	e0bfff17 	ldw	r2,-4(fp)
 41092ac:	00c00084 	movi	r3,2
 41092b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 41092b4:	0005883a 	mov	r2,zero
 41092b8:	00007806 	br	410949c <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 41092bc:	d0a72303 	ldbu	r2,-25460(gp)
 41092c0:	10803fcc 	andi	r2,r2,255
 41092c4:	10000526 	beq	r2,zero,41092dc <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 41092c8:	e0bfff17 	ldw	r2,-4(fp)
 41092cc:	00c00344 	movi	r3,13
 41092d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 41092d4:	0005883a 	mov	r2,zero
 41092d8:	00007006 	br	410949c <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41092dc:	0005303a 	rdctl	r2,status
 41092e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41092e4:	e0fffc17 	ldw	r3,-16(fp)
 41092e8:	00bfff84 	movi	r2,-2
 41092ec:	1884703a 	and	r2,r3,r2
 41092f0:	1001703a 	wrctl	status,r2
  
  return context;
 41092f4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 41092f8:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 41092fc:	e0bffd17 	ldw	r2,-12(fp)
 4109300:	10800117 	ldw	r2,4(r2)
 4109304:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4109308:	e0bff817 	ldw	r2,-32(fp)
 410930c:	1080058b 	ldhu	r2,22(r2)
 4109310:	10bfffcc 	andi	r2,r2,65535
 4109314:	10001e26 	beq	r2,zero,4109390 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4109318:	e0bff817 	ldw	r2,-32(fp)
 410931c:	10800417 	ldw	r2,16(r2)
 4109320:	11000104 	addi	r4,r2,4
 4109324:	e0fff817 	ldw	r3,-32(fp)
 4109328:	19000415 	stw	r4,16(r3)
 410932c:	10800017 	ldw	r2,0(r2)
 4109330:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4109334:	e0bff817 	ldw	r2,-32(fp)
 4109338:	1080058b 	ldhu	r2,22(r2)
 410933c:	10bfffc4 	addi	r2,r2,-1
 4109340:	1007883a 	mov	r3,r2
 4109344:	e0bff817 	ldw	r2,-32(fp)
 4109348:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 410934c:	e0bff817 	ldw	r2,-32(fp)
 4109350:	10c00417 	ldw	r3,16(r2)
 4109354:	e0bff817 	ldw	r2,-32(fp)
 4109358:	10800217 	ldw	r2,8(r2)
 410935c:	1880041e 	bne	r3,r2,4109370 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 4109360:	e0bff817 	ldw	r2,-32(fp)
 4109364:	10c00117 	ldw	r3,4(r2)
 4109368:	e0bff817 	ldw	r2,-32(fp)
 410936c:	10c00415 	stw	r3,16(r2)
 4109370:	e0bff617 	ldw	r2,-40(fp)
 4109374:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4109378:	e0bff717 	ldw	r2,-36(fp)
 410937c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 4109380:	e0bfff17 	ldw	r2,-4(fp)
 4109384:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 4109388:	e0bff517 	ldw	r2,-44(fp)
 410938c:	00004306 	br	410949c <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 4109390:	d0a73217 	ldw	r2,-25400(gp)
 4109394:	d0e73217 	ldw	r3,-25400(gp)
 4109398:	18c00c03 	ldbu	r3,48(r3)
 410939c:	18c00114 	ori	r3,r3,4
 41093a0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 41093a4:	d0a73217 	ldw	r2,-25400(gp)
 41093a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 41093ac:	d0a73217 	ldw	r2,-25400(gp)
 41093b0:	e0fffe0b 	ldhu	r3,-8(fp)
 41093b4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 41093b8:	e13ffd17 	ldw	r4,-12(fp)
 41093bc:	4105c800 	call	4105c80 <OS_EventTaskWait>
 41093c0:	e0bff617 	ldw	r2,-40(fp)
 41093c4:	e0bffb15 	stw	r2,-20(fp)
 41093c8:	e0bffb17 	ldw	r2,-20(fp)
 41093cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 41093d0:	41065340 	call	4106534 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41093d4:	0005303a 	rdctl	r2,status
 41093d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41093dc:	e0fff917 	ldw	r3,-28(fp)
 41093e0:	00bfff84 	movi	r2,-2
 41093e4:	1884703a 	and	r2,r3,r2
 41093e8:	1001703a 	wrctl	status,r2
  
  return context;
 41093ec:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 41093f0:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 41093f4:	d0a73217 	ldw	r2,-25400(gp)
 41093f8:	10800c43 	ldbu	r2,49(r2)
 41093fc:	10803fcc 	andi	r2,r2,255
 4109400:	10000326 	beq	r2,zero,4109410 <OSQPend+0x1ec>
 4109404:	108000a0 	cmpeqi	r2,r2,2
 4109408:	1000071e 	bne	r2,zero,4109428 <OSQPend+0x204>
 410940c:	00000b06 	br	410943c <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 4109410:	d0a73217 	ldw	r2,-25400(gp)
 4109414:	10800917 	ldw	r2,36(r2)
 4109418:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 410941c:	e0bfff17 	ldw	r2,-4(fp)
 4109420:	10000005 	stb	zero,0(r2)
             break;
 4109424:	00000e06 	br	4109460 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 4109428:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 410942c:	e0bfff17 	ldw	r2,-4(fp)
 4109430:	00c00384 	movi	r3,14
 4109434:	10c00005 	stb	r3,0(r2)
             break;
 4109438:	00000906 	br	4109460 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 410943c:	d0a73217 	ldw	r2,-25400(gp)
 4109440:	e17ffd17 	ldw	r5,-12(fp)
 4109444:	1009883a 	mov	r4,r2
 4109448:	4105ee00 	call	4105ee0 <OS_EventTaskRemove>
             pmsg = (void *)0;
 410944c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 4109450:	e0bfff17 	ldw	r2,-4(fp)
 4109454:	00c00284 	movi	r3,10
 4109458:	10c00005 	stb	r3,0(r2)
             break;
 410945c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4109460:	d0a73217 	ldw	r2,-25400(gp)
 4109464:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4109468:	d0a73217 	ldw	r2,-25400(gp)
 410946c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4109470:	d0a73217 	ldw	r2,-25400(gp)
 4109474:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4109478:	d0a73217 	ldw	r2,-25400(gp)
 410947c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 4109480:	d0a73217 	ldw	r2,-25400(gp)
 4109484:	10000915 	stw	zero,36(r2)
 4109488:	e0bff617 	ldw	r2,-40(fp)
 410948c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4109490:	e0bffa17 	ldw	r2,-24(fp)
 4109494:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 4109498:	e0bff517 	ldw	r2,-44(fp)
}
 410949c:	e037883a 	mov	sp,fp
 41094a0:	dfc00117 	ldw	ra,4(sp)
 41094a4:	df000017 	ldw	fp,0(sp)
 41094a8:	dec00204 	addi	sp,sp,8
 41094ac:	f800283a 	ret

041094b0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 41094b0:	defff604 	addi	sp,sp,-40
 41094b4:	dfc00915 	stw	ra,36(sp)
 41094b8:	df000815 	stw	fp,32(sp)
 41094bc:	df000804 	addi	fp,sp,32
 41094c0:	e13ffd15 	stw	r4,-12(fp)
 41094c4:	2805883a 	mov	r2,r5
 41094c8:	e1bfff15 	stw	r6,-4(fp)
 41094cc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 41094d0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 41094d4:	e0bfff17 	ldw	r2,-4(fp)
 41094d8:	1000021e 	bne	r2,zero,41094e4 <OSQPendAbort+0x34>
        return (0);
 41094dc:	0005883a 	mov	r2,zero
 41094e0:	00004906 	br	4109608 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 41094e4:	e0bffd17 	ldw	r2,-12(fp)
 41094e8:	1000051e 	bne	r2,zero,4109500 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 41094ec:	e0bfff17 	ldw	r2,-4(fp)
 41094f0:	00c00104 	movi	r3,4
 41094f4:	10c00005 	stb	r3,0(r2)
        return (0);
 41094f8:	0005883a 	mov	r2,zero
 41094fc:	00004206 	br	4109608 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 4109500:	e0bffd17 	ldw	r2,-12(fp)
 4109504:	10800003 	ldbu	r2,0(r2)
 4109508:	10803fcc 	andi	r2,r2,255
 410950c:	108000a0 	cmpeqi	r2,r2,2
 4109510:	1000051e 	bne	r2,zero,4109528 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4109514:	e0bfff17 	ldw	r2,-4(fp)
 4109518:	00c00044 	movi	r3,1
 410951c:	10c00005 	stb	r3,0(r2)
        return (0);
 4109520:	0005883a 	mov	r2,zero
 4109524:	00003806 	br	4109608 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4109528:	0005303a 	rdctl	r2,status
 410952c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4109530:	e0fffc17 	ldw	r3,-16(fp)
 4109534:	00bfff84 	movi	r2,-2
 4109538:	1884703a 	and	r2,r3,r2
 410953c:	1001703a 	wrctl	status,r2
  
  return context;
 4109540:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4109544:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 4109548:	e0bffd17 	ldw	r2,-12(fp)
 410954c:	10800283 	ldbu	r2,10(r2)
 4109550:	10803fcc 	andi	r2,r2,255
 4109554:	10002526 	beq	r2,zero,41095ec <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 4109558:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 410955c:	e0bffe03 	ldbu	r2,-8(fp)
 4109560:	10800060 	cmpeqi	r2,r2,1
 4109564:	10000e26 	beq	r2,zero,41095a0 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 4109568:	00000806 	br	410958c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 410956c:	01c00084 	movi	r7,2
 4109570:	01800104 	movi	r6,4
 4109574:	000b883a 	mov	r5,zero
 4109578:	e13ffd17 	ldw	r4,-12(fp)
 410957c:	4105ae80 	call	4105ae8 <OS_EventTaskRdy>
                     nbr_tasks++;
 4109580:	e0bff803 	ldbu	r2,-32(fp)
 4109584:	10800044 	addi	r2,r2,1
 4109588:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 410958c:	e0bffd17 	ldw	r2,-12(fp)
 4109590:	10800283 	ldbu	r2,10(r2)
 4109594:	10803fcc 	andi	r2,r2,255
 4109598:	103ff41e 	bne	r2,zero,410956c <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 410959c:	00000906 	br	41095c4 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 41095a0:	01c00084 	movi	r7,2
 41095a4:	01800104 	movi	r6,4
 41095a8:	000b883a 	mov	r5,zero
 41095ac:	e13ffd17 	ldw	r4,-12(fp)
 41095b0:	4105ae80 	call	4105ae8 <OS_EventTaskRdy>
                 nbr_tasks++;
 41095b4:	e0bff803 	ldbu	r2,-32(fp)
 41095b8:	10800044 	addi	r2,r2,1
 41095bc:	e0bff805 	stb	r2,-32(fp)
                 break;
 41095c0:	0001883a 	nop
 41095c4:	e0bff917 	ldw	r2,-28(fp)
 41095c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41095cc:	e0bffa17 	ldw	r2,-24(fp)
 41095d0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 41095d4:	41065340 	call	4106534 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 41095d8:	e0bfff17 	ldw	r2,-4(fp)
 41095dc:	00c00384 	movi	r3,14
 41095e0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 41095e4:	e0bff803 	ldbu	r2,-32(fp)
 41095e8:	00000706 	br	4109608 <OSQPendAbort+0x158>
 41095ec:	e0bff917 	ldw	r2,-28(fp)
 41095f0:	e0bffb15 	stw	r2,-20(fp)
 41095f4:	e0bffb17 	ldw	r2,-20(fp)
 41095f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 41095fc:	e0bfff17 	ldw	r2,-4(fp)
 4109600:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 4109604:	0005883a 	mov	r2,zero
}
 4109608:	e037883a 	mov	sp,fp
 410960c:	dfc00117 	ldw	ra,4(sp)
 4109610:	df000017 	ldw	fp,0(sp)
 4109614:	dec00204 	addi	sp,sp,8
 4109618:	f800283a 	ret

0410961c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 410961c:	defff604 	addi	sp,sp,-40
 4109620:	dfc00915 	stw	ra,36(sp)
 4109624:	df000815 	stw	fp,32(sp)
 4109628:	df000804 	addi	fp,sp,32
 410962c:	e13ffe15 	stw	r4,-8(fp)
 4109630:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4109634:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4109638:	e0bffe17 	ldw	r2,-8(fp)
 410963c:	1000021e 	bne	r2,zero,4109648 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 4109640:	00800104 	movi	r2,4
 4109644:	00004a06 	br	4109770 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4109648:	e0bffe17 	ldw	r2,-8(fp)
 410964c:	10800003 	ldbu	r2,0(r2)
 4109650:	10803fcc 	andi	r2,r2,255
 4109654:	108000a0 	cmpeqi	r2,r2,2
 4109658:	1000021e 	bne	r2,zero,4109664 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 410965c:	00800044 	movi	r2,1
 4109660:	00004306 	br	4109770 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4109664:	0005303a 	rdctl	r2,status
 4109668:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410966c:	e0fffd17 	ldw	r3,-12(fp)
 4109670:	00bfff84 	movi	r2,-2
 4109674:	1884703a 	and	r2,r3,r2
 4109678:	1001703a 	wrctl	status,r2
  
  return context;
 410967c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4109680:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 4109684:	e0bffe17 	ldw	r2,-8(fp)
 4109688:	10800283 	ldbu	r2,10(r2)
 410968c:	10803fcc 	andi	r2,r2,255
 4109690:	10000c26 	beq	r2,zero,41096c4 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4109694:	000f883a 	mov	r7,zero
 4109698:	01800104 	movi	r6,4
 410969c:	e17fff17 	ldw	r5,-4(fp)
 41096a0:	e13ffe17 	ldw	r4,-8(fp)
 41096a4:	4105ae80 	call	4105ae8 <OS_EventTaskRdy>
 41096a8:	e0bff817 	ldw	r2,-32(fp)
 41096ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41096b0:	e0bff917 	ldw	r2,-28(fp)
 41096b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 41096b8:	41065340 	call	4106534 <OS_Sched>
        return (OS_ERR_NONE);
 41096bc:	0005883a 	mov	r2,zero
 41096c0:	00002b06 	br	4109770 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 41096c4:	e0bffe17 	ldw	r2,-8(fp)
 41096c8:	10800117 	ldw	r2,4(r2)
 41096cc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 41096d0:	e0bffb17 	ldw	r2,-20(fp)
 41096d4:	10c0058b 	ldhu	r3,22(r2)
 41096d8:	e0bffb17 	ldw	r2,-20(fp)
 41096dc:	1080050b 	ldhu	r2,20(r2)
 41096e0:	18ffffcc 	andi	r3,r3,65535
 41096e4:	10bfffcc 	andi	r2,r2,65535
 41096e8:	18800636 	bltu	r3,r2,4109704 <OSQPost+0xe8>
 41096ec:	e0bff817 	ldw	r2,-32(fp)
 41096f0:	e0bffa15 	stw	r2,-24(fp)
 41096f4:	e0bffa17 	ldw	r2,-24(fp)
 41096f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 41096fc:	00800784 	movi	r2,30
 4109700:	00001b06 	br	4109770 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 4109704:	e0bffb17 	ldw	r2,-20(fp)
 4109708:	10800317 	ldw	r2,12(r2)
 410970c:	11000104 	addi	r4,r2,4
 4109710:	e0fffb17 	ldw	r3,-20(fp)
 4109714:	19000315 	stw	r4,12(r3)
 4109718:	e0ffff17 	ldw	r3,-4(fp)
 410971c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 4109720:	e0bffb17 	ldw	r2,-20(fp)
 4109724:	1080058b 	ldhu	r2,22(r2)
 4109728:	10800044 	addi	r2,r2,1
 410972c:	1007883a 	mov	r3,r2
 4109730:	e0bffb17 	ldw	r2,-20(fp)
 4109734:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 4109738:	e0bffb17 	ldw	r2,-20(fp)
 410973c:	10c00317 	ldw	r3,12(r2)
 4109740:	e0bffb17 	ldw	r2,-20(fp)
 4109744:	10800217 	ldw	r2,8(r2)
 4109748:	1880041e 	bne	r3,r2,410975c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 410974c:	e0bffb17 	ldw	r2,-20(fp)
 4109750:	10c00117 	ldw	r3,4(r2)
 4109754:	e0bffb17 	ldw	r2,-20(fp)
 4109758:	10c00315 	stw	r3,12(r2)
 410975c:	e0bff817 	ldw	r2,-32(fp)
 4109760:	e0bffc15 	stw	r2,-16(fp)
 4109764:	e0bffc17 	ldw	r2,-16(fp)
 4109768:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 410976c:	0005883a 	mov	r2,zero
}
 4109770:	e037883a 	mov	sp,fp
 4109774:	dfc00117 	ldw	ra,4(sp)
 4109778:	df000017 	ldw	fp,0(sp)
 410977c:	dec00204 	addi	sp,sp,8
 4109780:	f800283a 	ret

04109784 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 4109784:	defff604 	addi	sp,sp,-40
 4109788:	dfc00915 	stw	ra,36(sp)
 410978c:	df000815 	stw	fp,32(sp)
 4109790:	df000804 	addi	fp,sp,32
 4109794:	e13ffe15 	stw	r4,-8(fp)
 4109798:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 410979c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 41097a0:	e0bffe17 	ldw	r2,-8(fp)
 41097a4:	1000021e 	bne	r2,zero,41097b0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 41097a8:	00800104 	movi	r2,4
 41097ac:	00004c06 	br	41098e0 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 41097b0:	e0bffe17 	ldw	r2,-8(fp)
 41097b4:	10800003 	ldbu	r2,0(r2)
 41097b8:	10803fcc 	andi	r2,r2,255
 41097bc:	108000a0 	cmpeqi	r2,r2,2
 41097c0:	1000021e 	bne	r2,zero,41097cc <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 41097c4:	00800044 	movi	r2,1
 41097c8:	00004506 	br	41098e0 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 41097cc:	0005303a 	rdctl	r2,status
 41097d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 41097d4:	e0fffd17 	ldw	r3,-12(fp)
 41097d8:	00bfff84 	movi	r2,-2
 41097dc:	1884703a 	and	r2,r3,r2
 41097e0:	1001703a 	wrctl	status,r2
  
  return context;
 41097e4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 41097e8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 41097ec:	e0bffe17 	ldw	r2,-8(fp)
 41097f0:	10800283 	ldbu	r2,10(r2)
 41097f4:	10803fcc 	andi	r2,r2,255
 41097f8:	10000c26 	beq	r2,zero,410982c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 41097fc:	000f883a 	mov	r7,zero
 4109800:	01800104 	movi	r6,4
 4109804:	e17fff17 	ldw	r5,-4(fp)
 4109808:	e13ffe17 	ldw	r4,-8(fp)
 410980c:	4105ae80 	call	4105ae8 <OS_EventTaskRdy>
 4109810:	e0bff817 	ldw	r2,-32(fp)
 4109814:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4109818:	e0bff917 	ldw	r2,-28(fp)
 410981c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 4109820:	41065340 	call	4106534 <OS_Sched>
        return (OS_ERR_NONE);
 4109824:	0005883a 	mov	r2,zero
 4109828:	00002d06 	br	41098e0 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 410982c:	e0bffe17 	ldw	r2,-8(fp)
 4109830:	10800117 	ldw	r2,4(r2)
 4109834:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4109838:	e0bffb17 	ldw	r2,-20(fp)
 410983c:	10c0058b 	ldhu	r3,22(r2)
 4109840:	e0bffb17 	ldw	r2,-20(fp)
 4109844:	1080050b 	ldhu	r2,20(r2)
 4109848:	18ffffcc 	andi	r3,r3,65535
 410984c:	10bfffcc 	andi	r2,r2,65535
 4109850:	18800636 	bltu	r3,r2,410986c <OSQPostFront+0xe8>
 4109854:	e0bff817 	ldw	r2,-32(fp)
 4109858:	e0bffa15 	stw	r2,-24(fp)
 410985c:	e0bffa17 	ldw	r2,-24(fp)
 4109860:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4109864:	00800784 	movi	r2,30
 4109868:	00001d06 	br	41098e0 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 410986c:	e0bffb17 	ldw	r2,-20(fp)
 4109870:	10c00417 	ldw	r3,16(r2)
 4109874:	e0bffb17 	ldw	r2,-20(fp)
 4109878:	10800117 	ldw	r2,4(r2)
 410987c:	1880041e 	bne	r3,r2,4109890 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 4109880:	e0bffb17 	ldw	r2,-20(fp)
 4109884:	10c00217 	ldw	r3,8(r2)
 4109888:	e0bffb17 	ldw	r2,-20(fp)
 410988c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 4109890:	e0bffb17 	ldw	r2,-20(fp)
 4109894:	10800417 	ldw	r2,16(r2)
 4109898:	10ffff04 	addi	r3,r2,-4
 410989c:	e0bffb17 	ldw	r2,-20(fp)
 41098a0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 41098a4:	e0bffb17 	ldw	r2,-20(fp)
 41098a8:	10800417 	ldw	r2,16(r2)
 41098ac:	e0ffff17 	ldw	r3,-4(fp)
 41098b0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 41098b4:	e0bffb17 	ldw	r2,-20(fp)
 41098b8:	1080058b 	ldhu	r2,22(r2)
 41098bc:	10800044 	addi	r2,r2,1
 41098c0:	1007883a 	mov	r3,r2
 41098c4:	e0bffb17 	ldw	r2,-20(fp)
 41098c8:	10c0058d 	sth	r3,22(r2)
 41098cc:	e0bff817 	ldw	r2,-32(fp)
 41098d0:	e0bffc15 	stw	r2,-16(fp)
 41098d4:	e0bffc17 	ldw	r2,-16(fp)
 41098d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 41098dc:	0005883a 	mov	r2,zero
}
 41098e0:	e037883a 	mov	sp,fp
 41098e4:	dfc00117 	ldw	ra,4(sp)
 41098e8:	df000017 	ldw	fp,0(sp)
 41098ec:	dec00204 	addi	sp,sp,8
 41098f0:	f800283a 	ret

041098f4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 41098f4:	defff504 	addi	sp,sp,-44
 41098f8:	dfc00a15 	stw	ra,40(sp)
 41098fc:	df000915 	stw	fp,36(sp)
 4109900:	df000904 	addi	fp,sp,36
 4109904:	e13ffd15 	stw	r4,-12(fp)
 4109908:	e17ffe15 	stw	r5,-8(fp)
 410990c:	3005883a 	mov	r2,r6
 4109910:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4109914:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4109918:	e0bffd17 	ldw	r2,-12(fp)
 410991c:	1000021e 	bne	r2,zero,4109928 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 4109920:	00800104 	movi	r2,4
 4109924:	00007106 	br	4109aec <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4109928:	e0bffd17 	ldw	r2,-12(fp)
 410992c:	10800003 	ldbu	r2,0(r2)
 4109930:	10803fcc 	andi	r2,r2,255
 4109934:	108000a0 	cmpeqi	r2,r2,2
 4109938:	1000021e 	bne	r2,zero,4109944 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 410993c:	00800044 	movi	r2,1
 4109940:	00006a06 	br	4109aec <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4109944:	0005303a 	rdctl	r2,status
 4109948:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410994c:	e0fffc17 	ldw	r3,-16(fp)
 4109950:	00bfff84 	movi	r2,-2
 4109954:	1884703a 	and	r2,r3,r2
 4109958:	1001703a 	wrctl	status,r2
  
  return context;
 410995c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4109960:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 4109964:	e0bffd17 	ldw	r2,-12(fp)
 4109968:	10800283 	ldbu	r2,10(r2)
 410996c:	10803fcc 	andi	r2,r2,255
 4109970:	10001d26 	beq	r2,zero,41099e8 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 4109974:	e0bfff03 	ldbu	r2,-4(fp)
 4109978:	1080004c 	andi	r2,r2,1
 410997c:	10000b26 	beq	r2,zero,41099ac <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4109980:	00000506 	br	4109998 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4109984:	000f883a 	mov	r7,zero
 4109988:	01800104 	movi	r6,4
 410998c:	e17ffe17 	ldw	r5,-8(fp)
 4109990:	e13ffd17 	ldw	r4,-12(fp)
 4109994:	4105ae80 	call	4105ae8 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4109998:	e0bffd17 	ldw	r2,-12(fp)
 410999c:	10800283 	ldbu	r2,10(r2)
 41099a0:	10803fcc 	andi	r2,r2,255
 41099a4:	103ff71e 	bne	r2,zero,4109984 <OSQPostOpt+0x90>
 41099a8:	00000506 	br	41099c0 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 41099ac:	000f883a 	mov	r7,zero
 41099b0:	01800104 	movi	r6,4
 41099b4:	e17ffe17 	ldw	r5,-8(fp)
 41099b8:	e13ffd17 	ldw	r4,-12(fp)
 41099bc:	4105ae80 	call	4105ae8 <OS_EventTaskRdy>
 41099c0:	e0bff717 	ldw	r2,-36(fp)
 41099c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 41099c8:	e0bff817 	ldw	r2,-32(fp)
 41099cc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 41099d0:	e0bfff03 	ldbu	r2,-4(fp)
 41099d4:	1080010c 	andi	r2,r2,4
 41099d8:	1000011e 	bne	r2,zero,41099e0 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 41099dc:	41065340 	call	4106534 <OS_Sched>
        }
        return (OS_ERR_NONE);
 41099e0:	0005883a 	mov	r2,zero
 41099e4:	00004106 	br	4109aec <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 41099e8:	e0bffd17 	ldw	r2,-12(fp)
 41099ec:	10800117 	ldw	r2,4(r2)
 41099f0:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 41099f4:	e0bffa17 	ldw	r2,-24(fp)
 41099f8:	10c0058b 	ldhu	r3,22(r2)
 41099fc:	e0bffa17 	ldw	r2,-24(fp)
 4109a00:	1080050b 	ldhu	r2,20(r2)
 4109a04:	18ffffcc 	andi	r3,r3,65535
 4109a08:	10bfffcc 	andi	r2,r2,65535
 4109a0c:	18800636 	bltu	r3,r2,4109a28 <OSQPostOpt+0x134>
 4109a10:	e0bff717 	ldw	r2,-36(fp)
 4109a14:	e0bff915 	stw	r2,-28(fp)
 4109a18:	e0bff917 	ldw	r2,-28(fp)
 4109a1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4109a20:	00800784 	movi	r2,30
 4109a24:	00003106 	br	4109aec <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 4109a28:	e0bfff03 	ldbu	r2,-4(fp)
 4109a2c:	1080008c 	andi	r2,r2,2
 4109a30:	10001326 	beq	r2,zero,4109a80 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 4109a34:	e0bffa17 	ldw	r2,-24(fp)
 4109a38:	10c00417 	ldw	r3,16(r2)
 4109a3c:	e0bffa17 	ldw	r2,-24(fp)
 4109a40:	10800117 	ldw	r2,4(r2)
 4109a44:	1880041e 	bne	r3,r2,4109a58 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 4109a48:	e0bffa17 	ldw	r2,-24(fp)
 4109a4c:	10c00217 	ldw	r3,8(r2)
 4109a50:	e0bffa17 	ldw	r2,-24(fp)
 4109a54:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 4109a58:	e0bffa17 	ldw	r2,-24(fp)
 4109a5c:	10800417 	ldw	r2,16(r2)
 4109a60:	10ffff04 	addi	r3,r2,-4
 4109a64:	e0bffa17 	ldw	r2,-24(fp)
 4109a68:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 4109a6c:	e0bffa17 	ldw	r2,-24(fp)
 4109a70:	10800417 	ldw	r2,16(r2)
 4109a74:	e0fffe17 	ldw	r3,-8(fp)
 4109a78:	10c00015 	stw	r3,0(r2)
 4109a7c:	00001006 	br	4109ac0 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 4109a80:	e0bffa17 	ldw	r2,-24(fp)
 4109a84:	10800317 	ldw	r2,12(r2)
 4109a88:	11000104 	addi	r4,r2,4
 4109a8c:	e0fffa17 	ldw	r3,-24(fp)
 4109a90:	19000315 	stw	r4,12(r3)
 4109a94:	e0fffe17 	ldw	r3,-8(fp)
 4109a98:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 4109a9c:	e0bffa17 	ldw	r2,-24(fp)
 4109aa0:	10c00317 	ldw	r3,12(r2)
 4109aa4:	e0bffa17 	ldw	r2,-24(fp)
 4109aa8:	10800217 	ldw	r2,8(r2)
 4109aac:	1880041e 	bne	r3,r2,4109ac0 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 4109ab0:	e0bffa17 	ldw	r2,-24(fp)
 4109ab4:	10c00117 	ldw	r3,4(r2)
 4109ab8:	e0bffa17 	ldw	r2,-24(fp)
 4109abc:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 4109ac0:	e0bffa17 	ldw	r2,-24(fp)
 4109ac4:	1080058b 	ldhu	r2,22(r2)
 4109ac8:	10800044 	addi	r2,r2,1
 4109acc:	1007883a 	mov	r3,r2
 4109ad0:	e0bffa17 	ldw	r2,-24(fp)
 4109ad4:	10c0058d 	sth	r3,22(r2)
 4109ad8:	e0bff717 	ldw	r2,-36(fp)
 4109adc:	e0bffb15 	stw	r2,-20(fp)
 4109ae0:	e0bffb17 	ldw	r2,-20(fp)
 4109ae4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4109ae8:	0005883a 	mov	r2,zero
}
 4109aec:	e037883a 	mov	sp,fp
 4109af0:	dfc00117 	ldw	ra,4(sp)
 4109af4:	df000017 	ldw	fp,0(sp)
 4109af8:	dec00204 	addi	sp,sp,8
 4109afc:	f800283a 	ret

04109b00 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 4109b00:	defff604 	addi	sp,sp,-40
 4109b04:	df000915 	stw	fp,36(sp)
 4109b08:	df000904 	addi	fp,sp,36
 4109b0c:	e13ffe15 	stw	r4,-8(fp)
 4109b10:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4109b14:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4109b18:	e0bffe17 	ldw	r2,-8(fp)
 4109b1c:	1000021e 	bne	r2,zero,4109b28 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 4109b20:	00800104 	movi	r2,4
 4109b24:	00004906 	br	4109c4c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 4109b28:	e0bfff17 	ldw	r2,-4(fp)
 4109b2c:	1000021e 	bne	r2,zero,4109b38 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 4109b30:	00800244 	movi	r2,9
 4109b34:	00004506 	br	4109c4c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4109b38:	e0bffe17 	ldw	r2,-8(fp)
 4109b3c:	10800003 	ldbu	r2,0(r2)
 4109b40:	10803fcc 	andi	r2,r2,255
 4109b44:	108000a0 	cmpeqi	r2,r2,2
 4109b48:	1000021e 	bne	r2,zero,4109b54 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 4109b4c:	00800044 	movi	r2,1
 4109b50:	00003e06 	br	4109c4c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4109b54:	0005303a 	rdctl	r2,status
 4109b58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4109b5c:	e0fffd17 	ldw	r3,-12(fp)
 4109b60:	00bfff84 	movi	r2,-2
 4109b64:	1884703a 	and	r2,r3,r2
 4109b68:	1001703a 	wrctl	status,r2
  
  return context;
 4109b6c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4109b70:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 4109b74:	e0bffe17 	ldw	r2,-8(fp)
 4109b78:	10c00283 	ldbu	r3,10(r2)
 4109b7c:	e0bfff17 	ldw	r2,-4(fp)
 4109b80:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 4109b84:	e0bffe17 	ldw	r2,-8(fp)
 4109b88:	108002c4 	addi	r2,r2,11
 4109b8c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 4109b90:	e0bfff17 	ldw	r2,-4(fp)
 4109b94:	10800204 	addi	r2,r2,8
 4109b98:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4109b9c:	e03ff705 	stb	zero,-36(fp)
 4109ba0:	00000b06 	br	4109bd0 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 4109ba4:	e0bff917 	ldw	r2,-28(fp)
 4109ba8:	10c00044 	addi	r3,r2,1
 4109bac:	e0fff915 	stw	r3,-28(fp)
 4109bb0:	e0fff817 	ldw	r3,-32(fp)
 4109bb4:	19000044 	addi	r4,r3,1
 4109bb8:	e13ff815 	stw	r4,-32(fp)
 4109bbc:	18c00003 	ldbu	r3,0(r3)
 4109bc0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4109bc4:	e0bff703 	ldbu	r2,-36(fp)
 4109bc8:	10800044 	addi	r2,r2,1
 4109bcc:	e0bff705 	stb	r2,-36(fp)
 4109bd0:	e0bff703 	ldbu	r2,-36(fp)
 4109bd4:	108000f0 	cmpltui	r2,r2,3
 4109bd8:	103ff21e 	bne	r2,zero,4109ba4 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 4109bdc:	e0bffe17 	ldw	r2,-8(fp)
 4109be0:	10800117 	ldw	r2,4(r2)
 4109be4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 4109be8:	e0bffc17 	ldw	r2,-16(fp)
 4109bec:	1080058b 	ldhu	r2,22(r2)
 4109bf0:	10bfffcc 	andi	r2,r2,65535
 4109bf4:	10000626 	beq	r2,zero,4109c10 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 4109bf8:	e0bffc17 	ldw	r2,-16(fp)
 4109bfc:	10800417 	ldw	r2,16(r2)
 4109c00:	10c00017 	ldw	r3,0(r2)
 4109c04:	e0bfff17 	ldw	r2,-4(fp)
 4109c08:	10c00015 	stw	r3,0(r2)
 4109c0c:	00000206 	br	4109c18 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 4109c10:	e0bfff17 	ldw	r2,-4(fp)
 4109c14:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4109c18:	e0bffc17 	ldw	r2,-16(fp)
 4109c1c:	10c0058b 	ldhu	r3,22(r2)
 4109c20:	e0bfff17 	ldw	r2,-4(fp)
 4109c24:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 4109c28:	e0bffc17 	ldw	r2,-16(fp)
 4109c2c:	10c0050b 	ldhu	r3,20(r2)
 4109c30:	e0bfff17 	ldw	r2,-4(fp)
 4109c34:	10c0018d 	sth	r3,6(r2)
 4109c38:	e0bffa17 	ldw	r2,-24(fp)
 4109c3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4109c40:	e0bffb17 	ldw	r2,-20(fp)
 4109c44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4109c48:	0005883a 	mov	r2,zero
}
 4109c4c:	e037883a 	mov	sp,fp
 4109c50:	df000017 	ldw	fp,0(sp)
 4109c54:	dec00104 	addi	sp,sp,4
 4109c58:	f800283a 	ret

04109c5c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 4109c5c:	defffb04 	addi	sp,sp,-20
 4109c60:	dfc00415 	stw	ra,16(sp)
 4109c64:	df000315 	stw	fp,12(sp)
 4109c68:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 4109c6c:	01407804 	movi	r5,480
 4109c70:	010104b4 	movhi	r4,1042
 4109c74:	212a9904 	addi	r4,r4,-21916
 4109c78:	41064780 	call	4106478 <OS_MemClr>
    pq1 = &OSQTbl[0];
 4109c7c:	008104b4 	movhi	r2,1042
 4109c80:	10aa9904 	addi	r2,r2,-21916
 4109c84:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 4109c88:	008104b4 	movhi	r2,1042
 4109c8c:	10aa9f04 	addi	r2,r2,-21892
 4109c90:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4109c94:	e03ffd0d 	sth	zero,-12(fp)
 4109c98:	00000c06 	br	4109ccc <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 4109c9c:	e0bffe17 	ldw	r2,-8(fp)
 4109ca0:	e0ffff17 	ldw	r3,-4(fp)
 4109ca4:	10c00015 	stw	r3,0(r2)
        pq1++;
 4109ca8:	e0bffe17 	ldw	r2,-8(fp)
 4109cac:	10800604 	addi	r2,r2,24
 4109cb0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 4109cb4:	e0bfff17 	ldw	r2,-4(fp)
 4109cb8:	10800604 	addi	r2,r2,24
 4109cbc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4109cc0:	e0bffd0b 	ldhu	r2,-12(fp)
 4109cc4:	10800044 	addi	r2,r2,1
 4109cc8:	e0bffd0d 	sth	r2,-12(fp)
 4109ccc:	e0bffd0b 	ldhu	r2,-12(fp)
 4109cd0:	108004f0 	cmpltui	r2,r2,19
 4109cd4:	103ff11e 	bne	r2,zero,4109c9c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 4109cd8:	e0bffe17 	ldw	r2,-8(fp)
 4109cdc:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 4109ce0:	008104b4 	movhi	r2,1042
 4109ce4:	10aa9904 	addi	r2,r2,-21916
 4109ce8:	d0a72e15 	stw	r2,-25416(gp)
#endif
}
 4109cec:	0001883a 	nop
 4109cf0:	e037883a 	mov	sp,fp
 4109cf4:	dfc00117 	ldw	ra,4(sp)
 4109cf8:	df000017 	ldw	fp,0(sp)
 4109cfc:	dec00204 	addi	sp,sp,8
 4109d00:	f800283a 	ret

04109d04 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 4109d04:	defffa04 	addi	sp,sp,-24
 4109d08:	df000515 	stw	fp,20(sp)
 4109d0c:	df000504 	addi	fp,sp,20
 4109d10:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4109d14:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4109d18:	e0bfff17 	ldw	r2,-4(fp)
 4109d1c:	1000021e 	bne	r2,zero,4109d28 <OSSemAccept+0x24>
        return (0);
 4109d20:	0005883a 	mov	r2,zero
 4109d24:	00001f06 	br	4109da4 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4109d28:	e0bfff17 	ldw	r2,-4(fp)
 4109d2c:	10800003 	ldbu	r2,0(r2)
 4109d30:	10803fcc 	andi	r2,r2,255
 4109d34:	108000e0 	cmpeqi	r2,r2,3
 4109d38:	1000021e 	bne	r2,zero,4109d44 <OSSemAccept+0x40>
        return (0);
 4109d3c:	0005883a 	mov	r2,zero
 4109d40:	00001806 	br	4109da4 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4109d44:	0005303a 	rdctl	r2,status
 4109d48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4109d4c:	e0fffe17 	ldw	r3,-8(fp)
 4109d50:	00bfff84 	movi	r2,-2
 4109d54:	1884703a 	and	r2,r3,r2
 4109d58:	1001703a 	wrctl	status,r2
  
  return context;
 4109d5c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4109d60:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 4109d64:	e0bfff17 	ldw	r2,-4(fp)
 4109d68:	1080020b 	ldhu	r2,8(r2)
 4109d6c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 4109d70:	e0bffd0b 	ldhu	r2,-12(fp)
 4109d74:	10000626 	beq	r2,zero,4109d90 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 4109d78:	e0bfff17 	ldw	r2,-4(fp)
 4109d7c:	1080020b 	ldhu	r2,8(r2)
 4109d80:	10bfffc4 	addi	r2,r2,-1
 4109d84:	1007883a 	mov	r3,r2
 4109d88:	e0bfff17 	ldw	r2,-4(fp)
 4109d8c:	10c0020d 	sth	r3,8(r2)
 4109d90:	e0bffb17 	ldw	r2,-20(fp)
 4109d94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4109d98:	e0bffc17 	ldw	r2,-16(fp)
 4109d9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 4109da0:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4109da4:	e037883a 	mov	sp,fp
 4109da8:	df000017 	ldw	fp,0(sp)
 4109dac:	dec00104 	addi	sp,sp,4
 4109db0:	f800283a 	ret

04109db4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 4109db4:	defff904 	addi	sp,sp,-28
 4109db8:	dfc00615 	stw	ra,24(sp)
 4109dbc:	df000515 	stw	fp,20(sp)
 4109dc0:	df000504 	addi	fp,sp,20
 4109dc4:	2005883a 	mov	r2,r4
 4109dc8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4109dcc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4109dd0:	d0a73103 	ldbu	r2,-25404(gp)
 4109dd4:	10803fcc 	andi	r2,r2,255
 4109dd8:	10000226 	beq	r2,zero,4109de4 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 4109ddc:	0005883a 	mov	r2,zero
 4109de0:	00002506 	br	4109e78 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4109de4:	0005303a 	rdctl	r2,status
 4109de8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4109dec:	e0fffe17 	ldw	r3,-8(fp)
 4109df0:	00bfff84 	movi	r2,-2
 4109df4:	1884703a 	and	r2,r3,r2
 4109df8:	1001703a 	wrctl	status,r2
  
  return context;
 4109dfc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4109e00:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 4109e04:	d0a73017 	ldw	r2,-25408(gp)
 4109e08:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 4109e0c:	d0a73017 	ldw	r2,-25408(gp)
 4109e10:	10000326 	beq	r2,zero,4109e20 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4109e14:	d0a73017 	ldw	r2,-25408(gp)
 4109e18:	10800117 	ldw	r2,4(r2)
 4109e1c:	d0a73015 	stw	r2,-25408(gp)
 4109e20:	e0bffb17 	ldw	r2,-20(fp)
 4109e24:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4109e28:	e0bffc17 	ldw	r2,-16(fp)
 4109e2c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 4109e30:	e0bffd17 	ldw	r2,-12(fp)
 4109e34:	10000f26 	beq	r2,zero,4109e74 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 4109e38:	e0bffd17 	ldw	r2,-12(fp)
 4109e3c:	00c000c4 	movi	r3,3
 4109e40:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 4109e44:	e0bffd17 	ldw	r2,-12(fp)
 4109e48:	e0ffff0b 	ldhu	r3,-4(fp)
 4109e4c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 4109e50:	e0bffd17 	ldw	r2,-12(fp)
 4109e54:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 4109e58:	e0bffd17 	ldw	r2,-12(fp)
 4109e5c:	00c00fc4 	movi	r3,63
 4109e60:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 4109e64:	e0bffd17 	ldw	r2,-12(fp)
 4109e68:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 4109e6c:	e13ffd17 	ldw	r4,-12(fp)
 4109e70:	41060980 	call	4106098 <OS_EventWaitListInit>
    }
    return (pevent);
 4109e74:	e0bffd17 	ldw	r2,-12(fp)
}
 4109e78:	e037883a 	mov	sp,fp
 4109e7c:	dfc00117 	ldw	ra,4(sp)
 4109e80:	df000017 	ldw	fp,0(sp)
 4109e84:	dec00204 	addi	sp,sp,8
 4109e88:	f800283a 	ret

04109e8c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4109e8c:	defff304 	addi	sp,sp,-52
 4109e90:	dfc00c15 	stw	ra,48(sp)
 4109e94:	df000b15 	stw	fp,44(sp)
 4109e98:	df000b04 	addi	fp,sp,44
 4109e9c:	e13ffd15 	stw	r4,-12(fp)
 4109ea0:	2805883a 	mov	r2,r5
 4109ea4:	e1bfff15 	stw	r6,-4(fp)
 4109ea8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4109eac:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4109eb0:	e0bfff17 	ldw	r2,-4(fp)
 4109eb4:	1000021e 	bne	r2,zero,4109ec0 <OSSemDel+0x34>
        return (pevent);
 4109eb8:	e0bffd17 	ldw	r2,-12(fp)
 4109ebc:	00007e06 	br	410a0b8 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4109ec0:	e0bffd17 	ldw	r2,-12(fp)
 4109ec4:	1000051e 	bne	r2,zero,4109edc <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4109ec8:	e0bfff17 	ldw	r2,-4(fp)
 4109ecc:	00c00104 	movi	r3,4
 4109ed0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4109ed4:	e0bffd17 	ldw	r2,-12(fp)
 4109ed8:	00007706 	br	410a0b8 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4109edc:	e0bffd17 	ldw	r2,-12(fp)
 4109ee0:	10800003 	ldbu	r2,0(r2)
 4109ee4:	10803fcc 	andi	r2,r2,255
 4109ee8:	108000e0 	cmpeqi	r2,r2,3
 4109eec:	1000051e 	bne	r2,zero,4109f04 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4109ef0:	e0bfff17 	ldw	r2,-4(fp)
 4109ef4:	00c00044 	movi	r3,1
 4109ef8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4109efc:	e0bffd17 	ldw	r2,-12(fp)
 4109f00:	00006d06 	br	410a0b8 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4109f04:	d0a73103 	ldbu	r2,-25404(gp)
 4109f08:	10803fcc 	andi	r2,r2,255
 4109f0c:	10000526 	beq	r2,zero,4109f24 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 4109f10:	e0bfff17 	ldw	r2,-4(fp)
 4109f14:	00c003c4 	movi	r3,15
 4109f18:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4109f1c:	e0bffd17 	ldw	r2,-12(fp)
 4109f20:	00006506 	br	410a0b8 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4109f24:	0005303a 	rdctl	r2,status
 4109f28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4109f2c:	e0fffc17 	ldw	r3,-16(fp)
 4109f30:	00bfff84 	movi	r2,-2
 4109f34:	1884703a 	and	r2,r3,r2
 4109f38:	1001703a 	wrctl	status,r2
  
  return context;
 4109f3c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4109f40:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 4109f44:	e0bffd17 	ldw	r2,-12(fp)
 4109f48:	10800283 	ldbu	r2,10(r2)
 4109f4c:	10803fcc 	andi	r2,r2,255
 4109f50:	10000326 	beq	r2,zero,4109f60 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4109f54:	00800044 	movi	r2,1
 4109f58:	e0bff505 	stb	r2,-44(fp)
 4109f5c:	00000106 	br	4109f64 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4109f60:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 4109f64:	e0bffe03 	ldbu	r2,-8(fp)
 4109f68:	10000326 	beq	r2,zero,4109f78 <OSSemDel+0xec>
 4109f6c:	10800060 	cmpeqi	r2,r2,1
 4109f70:	1000281e 	bne	r2,zero,410a014 <OSSemDel+0x188>
 4109f74:	00004506 	br	410a08c <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 4109f78:	e0bff503 	ldbu	r2,-44(fp)
 4109f7c:	1000161e 	bne	r2,zero,4109fd8 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 4109f80:	e0bffd17 	ldw	r2,-12(fp)
 4109f84:	00c00fc4 	movi	r3,63
 4109f88:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4109f8c:	e0bffd17 	ldw	r2,-12(fp)
 4109f90:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4109f94:	e0bffd17 	ldw	r2,-12(fp)
 4109f98:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4109f9c:	d0e73017 	ldw	r3,-25408(gp)
 4109fa0:	e0bffd17 	ldw	r2,-12(fp)
 4109fa4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 4109fa8:	e0bffd17 	ldw	r2,-12(fp)
 4109fac:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 4109fb0:	e0bffd17 	ldw	r2,-12(fp)
 4109fb4:	d0a73015 	stw	r2,-25408(gp)
 4109fb8:	e0bff717 	ldw	r2,-36(fp)
 4109fbc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4109fc0:	e0bff817 	ldw	r2,-32(fp)
 4109fc4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4109fc8:	e0bfff17 	ldw	r2,-4(fp)
 4109fcc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 4109fd0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 4109fd4:	00003706 	br	410a0b4 <OSSemDel+0x228>
 4109fd8:	e0bff717 	ldw	r2,-36(fp)
 4109fdc:	e0bff915 	stw	r2,-28(fp)
 4109fe0:	e0bff917 	ldw	r2,-28(fp)
 4109fe4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 4109fe8:	e0bfff17 	ldw	r2,-4(fp)
 4109fec:	00c01244 	movi	r3,73
 4109ff0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 4109ff4:	e0bffd17 	ldw	r2,-12(fp)
 4109ff8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 4109ffc:	00002d06 	br	410a0b4 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 410a000:	000f883a 	mov	r7,zero
 410a004:	01800044 	movi	r6,1
 410a008:	000b883a 	mov	r5,zero
 410a00c:	e13ffd17 	ldw	r4,-12(fp)
 410a010:	4105ae80 	call	4105ae8 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 410a014:	e0bffd17 	ldw	r2,-12(fp)
 410a018:	10800283 	ldbu	r2,10(r2)
 410a01c:	10803fcc 	andi	r2,r2,255
 410a020:	103ff71e 	bne	r2,zero,410a000 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 410a024:	e0bffd17 	ldw	r2,-12(fp)
 410a028:	00c00fc4 	movi	r3,63
 410a02c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 410a030:	e0bffd17 	ldw	r2,-12(fp)
 410a034:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 410a038:	e0bffd17 	ldw	r2,-12(fp)
 410a03c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 410a040:	d0e73017 	ldw	r3,-25408(gp)
 410a044:	e0bffd17 	ldw	r2,-12(fp)
 410a048:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 410a04c:	e0bffd17 	ldw	r2,-12(fp)
 410a050:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 410a054:	e0bffd17 	ldw	r2,-12(fp)
 410a058:	d0a73015 	stw	r2,-25408(gp)
 410a05c:	e0bff717 	ldw	r2,-36(fp)
 410a060:	e0bffa15 	stw	r2,-24(fp)
 410a064:	e0bffa17 	ldw	r2,-24(fp)
 410a068:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 410a06c:	e0bff503 	ldbu	r2,-44(fp)
 410a070:	10800058 	cmpnei	r2,r2,1
 410a074:	1000011e 	bne	r2,zero,410a07c <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 410a078:	41065340 	call	4106534 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 410a07c:	e0bfff17 	ldw	r2,-4(fp)
 410a080:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 410a084:	e03ff615 	stw	zero,-40(fp)
             break;
 410a088:	00000a06 	br	410a0b4 <OSSemDel+0x228>
 410a08c:	e0bff717 	ldw	r2,-36(fp)
 410a090:	e0bffb15 	stw	r2,-20(fp)
 410a094:	e0bffb17 	ldw	r2,-20(fp)
 410a098:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 410a09c:	e0bfff17 	ldw	r2,-4(fp)
 410a0a0:	00c001c4 	movi	r3,7
 410a0a4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 410a0a8:	e0bffd17 	ldw	r2,-12(fp)
 410a0ac:	e0bff615 	stw	r2,-40(fp)
             break;
 410a0b0:	0001883a 	nop
    }
    return (pevent_return);
 410a0b4:	e0bff617 	ldw	r2,-40(fp)
}
 410a0b8:	e037883a 	mov	sp,fp
 410a0bc:	dfc00117 	ldw	ra,4(sp)
 410a0c0:	df000017 	ldw	fp,0(sp)
 410a0c4:	dec00204 	addi	sp,sp,8
 410a0c8:	f800283a 	ret

0410a0cc <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 410a0cc:	defff504 	addi	sp,sp,-44
 410a0d0:	dfc00a15 	stw	ra,40(sp)
 410a0d4:	df000915 	stw	fp,36(sp)
 410a0d8:	df000904 	addi	fp,sp,36
 410a0dc:	e13ffd15 	stw	r4,-12(fp)
 410a0e0:	2805883a 	mov	r2,r5
 410a0e4:	e1bfff15 	stw	r6,-4(fp)
 410a0e8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 410a0ec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 410a0f0:	e0bfff17 	ldw	r2,-4(fp)
 410a0f4:	10007226 	beq	r2,zero,410a2c0 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 410a0f8:	e0bffd17 	ldw	r2,-12(fp)
 410a0fc:	1000041e 	bne	r2,zero,410a110 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 410a100:	e0bfff17 	ldw	r2,-4(fp)
 410a104:	00c00104 	movi	r3,4
 410a108:	10c00005 	stb	r3,0(r2)
        return;
 410a10c:	00006d06 	br	410a2c4 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 410a110:	e0bffd17 	ldw	r2,-12(fp)
 410a114:	10800003 	ldbu	r2,0(r2)
 410a118:	10803fcc 	andi	r2,r2,255
 410a11c:	108000e0 	cmpeqi	r2,r2,3
 410a120:	1000041e 	bne	r2,zero,410a134 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 410a124:	e0bfff17 	ldw	r2,-4(fp)
 410a128:	00c00044 	movi	r3,1
 410a12c:	10c00005 	stb	r3,0(r2)
        return;
 410a130:	00006406 	br	410a2c4 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 410a134:	d0a73103 	ldbu	r2,-25404(gp)
 410a138:	10803fcc 	andi	r2,r2,255
 410a13c:	10000426 	beq	r2,zero,410a150 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 410a140:	e0bfff17 	ldw	r2,-4(fp)
 410a144:	00c00084 	movi	r3,2
 410a148:	10c00005 	stb	r3,0(r2)
        return;
 410a14c:	00005d06 	br	410a2c4 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 410a150:	d0a72303 	ldbu	r2,-25460(gp)
 410a154:	10803fcc 	andi	r2,r2,255
 410a158:	10000426 	beq	r2,zero,410a16c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 410a15c:	e0bfff17 	ldw	r2,-4(fp)
 410a160:	00c00344 	movi	r3,13
 410a164:	10c00005 	stb	r3,0(r2)
        return;
 410a168:	00005606 	br	410a2c4 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410a16c:	0005303a 	rdctl	r2,status
 410a170:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410a174:	e0fffc17 	ldw	r3,-16(fp)
 410a178:	00bfff84 	movi	r2,-2
 410a17c:	1884703a 	and	r2,r3,r2
 410a180:	1001703a 	wrctl	status,r2
  
  return context;
 410a184:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 410a188:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 410a18c:	e0bffd17 	ldw	r2,-12(fp)
 410a190:	1080020b 	ldhu	r2,8(r2)
 410a194:	10bfffcc 	andi	r2,r2,65535
 410a198:	10000d26 	beq	r2,zero,410a1d0 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 410a19c:	e0bffd17 	ldw	r2,-12(fp)
 410a1a0:	1080020b 	ldhu	r2,8(r2)
 410a1a4:	10bfffc4 	addi	r2,r2,-1
 410a1a8:	1007883a 	mov	r3,r2
 410a1ac:	e0bffd17 	ldw	r2,-12(fp)
 410a1b0:	10c0020d 	sth	r3,8(r2)
 410a1b4:	e0bff717 	ldw	r2,-36(fp)
 410a1b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410a1bc:	e0bff817 	ldw	r2,-32(fp)
 410a1c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 410a1c4:	e0bfff17 	ldw	r2,-4(fp)
 410a1c8:	10000005 	stb	zero,0(r2)
        return;
 410a1cc:	00003d06 	br	410a2c4 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 410a1d0:	d0a73217 	ldw	r2,-25400(gp)
 410a1d4:	d0e73217 	ldw	r3,-25400(gp)
 410a1d8:	18c00c03 	ldbu	r3,48(r3)
 410a1dc:	18c00054 	ori	r3,r3,1
 410a1e0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 410a1e4:	d0a73217 	ldw	r2,-25400(gp)
 410a1e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 410a1ec:	d0a73217 	ldw	r2,-25400(gp)
 410a1f0:	e0fffe0b 	ldhu	r3,-8(fp)
 410a1f4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 410a1f8:	e13ffd17 	ldw	r4,-12(fp)
 410a1fc:	4105c800 	call	4105c80 <OS_EventTaskWait>
 410a200:	e0bff717 	ldw	r2,-36(fp)
 410a204:	e0bffb15 	stw	r2,-20(fp)
 410a208:	e0bffb17 	ldw	r2,-20(fp)
 410a20c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 410a210:	41065340 	call	4106534 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410a214:	0005303a 	rdctl	r2,status
 410a218:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410a21c:	e0fff917 	ldw	r3,-28(fp)
 410a220:	00bfff84 	movi	r2,-2
 410a224:	1884703a 	and	r2,r3,r2
 410a228:	1001703a 	wrctl	status,r2
  
  return context;
 410a22c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 410a230:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 410a234:	d0a73217 	ldw	r2,-25400(gp)
 410a238:	10800c43 	ldbu	r2,49(r2)
 410a23c:	10803fcc 	andi	r2,r2,255
 410a240:	10000326 	beq	r2,zero,410a250 <OSSemPend+0x184>
 410a244:	108000a0 	cmpeqi	r2,r2,2
 410a248:	1000041e 	bne	r2,zero,410a25c <OSSemPend+0x190>
 410a24c:	00000706 	br	410a26c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 410a250:	e0bfff17 	ldw	r2,-4(fp)
 410a254:	10000005 	stb	zero,0(r2)
             break;
 410a258:	00000c06 	br	410a28c <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 410a25c:	e0bfff17 	ldw	r2,-4(fp)
 410a260:	00c00384 	movi	r3,14
 410a264:	10c00005 	stb	r3,0(r2)
             break;
 410a268:	00000806 	br	410a28c <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 410a26c:	d0a73217 	ldw	r2,-25400(gp)
 410a270:	e17ffd17 	ldw	r5,-12(fp)
 410a274:	1009883a 	mov	r4,r2
 410a278:	4105ee00 	call	4105ee0 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 410a27c:	e0bfff17 	ldw	r2,-4(fp)
 410a280:	00c00284 	movi	r3,10
 410a284:	10c00005 	stb	r3,0(r2)
             break;
 410a288:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 410a28c:	d0a73217 	ldw	r2,-25400(gp)
 410a290:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 410a294:	d0a73217 	ldw	r2,-25400(gp)
 410a298:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 410a29c:	d0a73217 	ldw	r2,-25400(gp)
 410a2a0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 410a2a4:	d0a73217 	ldw	r2,-25400(gp)
 410a2a8:	10000815 	stw	zero,32(r2)
 410a2ac:	e0bff717 	ldw	r2,-36(fp)
 410a2b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410a2b4:	e0bffa17 	ldw	r2,-24(fp)
 410a2b8:	1001703a 	wrctl	status,r2
 410a2bc:	00000106 	br	410a2c4 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 410a2c0:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 410a2c4:	e037883a 	mov	sp,fp
 410a2c8:	dfc00117 	ldw	ra,4(sp)
 410a2cc:	df000017 	ldw	fp,0(sp)
 410a2d0:	dec00204 	addi	sp,sp,8
 410a2d4:	f800283a 	ret

0410a2d8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 410a2d8:	defff604 	addi	sp,sp,-40
 410a2dc:	dfc00915 	stw	ra,36(sp)
 410a2e0:	df000815 	stw	fp,32(sp)
 410a2e4:	df000804 	addi	fp,sp,32
 410a2e8:	e13ffd15 	stw	r4,-12(fp)
 410a2ec:	2805883a 	mov	r2,r5
 410a2f0:	e1bfff15 	stw	r6,-4(fp)
 410a2f4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 410a2f8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 410a2fc:	e0bfff17 	ldw	r2,-4(fp)
 410a300:	1000021e 	bne	r2,zero,410a30c <OSSemPendAbort+0x34>
        return (0);
 410a304:	0005883a 	mov	r2,zero
 410a308:	00004906 	br	410a430 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 410a30c:	e0bffd17 	ldw	r2,-12(fp)
 410a310:	1000051e 	bne	r2,zero,410a328 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 410a314:	e0bfff17 	ldw	r2,-4(fp)
 410a318:	00c00104 	movi	r3,4
 410a31c:	10c00005 	stb	r3,0(r2)
        return (0);
 410a320:	0005883a 	mov	r2,zero
 410a324:	00004206 	br	410a430 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 410a328:	e0bffd17 	ldw	r2,-12(fp)
 410a32c:	10800003 	ldbu	r2,0(r2)
 410a330:	10803fcc 	andi	r2,r2,255
 410a334:	108000e0 	cmpeqi	r2,r2,3
 410a338:	1000051e 	bne	r2,zero,410a350 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 410a33c:	e0bfff17 	ldw	r2,-4(fp)
 410a340:	00c00044 	movi	r3,1
 410a344:	10c00005 	stb	r3,0(r2)
        return (0);
 410a348:	0005883a 	mov	r2,zero
 410a34c:	00003806 	br	410a430 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410a350:	0005303a 	rdctl	r2,status
 410a354:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410a358:	e0fffc17 	ldw	r3,-16(fp)
 410a35c:	00bfff84 	movi	r2,-2
 410a360:	1884703a 	and	r2,r3,r2
 410a364:	1001703a 	wrctl	status,r2
  
  return context;
 410a368:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 410a36c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 410a370:	e0bffd17 	ldw	r2,-12(fp)
 410a374:	10800283 	ldbu	r2,10(r2)
 410a378:	10803fcc 	andi	r2,r2,255
 410a37c:	10002526 	beq	r2,zero,410a414 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 410a380:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 410a384:	e0bffe03 	ldbu	r2,-8(fp)
 410a388:	10800060 	cmpeqi	r2,r2,1
 410a38c:	10000e26 	beq	r2,zero,410a3c8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 410a390:	00000806 	br	410a3b4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 410a394:	01c00084 	movi	r7,2
 410a398:	01800044 	movi	r6,1
 410a39c:	000b883a 	mov	r5,zero
 410a3a0:	e13ffd17 	ldw	r4,-12(fp)
 410a3a4:	4105ae80 	call	4105ae8 <OS_EventTaskRdy>
                     nbr_tasks++;
 410a3a8:	e0bff803 	ldbu	r2,-32(fp)
 410a3ac:	10800044 	addi	r2,r2,1
 410a3b0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 410a3b4:	e0bffd17 	ldw	r2,-12(fp)
 410a3b8:	10800283 	ldbu	r2,10(r2)
 410a3bc:	10803fcc 	andi	r2,r2,255
 410a3c0:	103ff41e 	bne	r2,zero,410a394 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 410a3c4:	00000906 	br	410a3ec <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 410a3c8:	01c00084 	movi	r7,2
 410a3cc:	01800044 	movi	r6,1
 410a3d0:	000b883a 	mov	r5,zero
 410a3d4:	e13ffd17 	ldw	r4,-12(fp)
 410a3d8:	4105ae80 	call	4105ae8 <OS_EventTaskRdy>
                 nbr_tasks++;
 410a3dc:	e0bff803 	ldbu	r2,-32(fp)
 410a3e0:	10800044 	addi	r2,r2,1
 410a3e4:	e0bff805 	stb	r2,-32(fp)
                 break;
 410a3e8:	0001883a 	nop
 410a3ec:	e0bff917 	ldw	r2,-28(fp)
 410a3f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410a3f4:	e0bffa17 	ldw	r2,-24(fp)
 410a3f8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 410a3fc:	41065340 	call	4106534 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 410a400:	e0bfff17 	ldw	r2,-4(fp)
 410a404:	00c00384 	movi	r3,14
 410a408:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 410a40c:	e0bff803 	ldbu	r2,-32(fp)
 410a410:	00000706 	br	410a430 <OSSemPendAbort+0x158>
 410a414:	e0bff917 	ldw	r2,-28(fp)
 410a418:	e0bffb15 	stw	r2,-20(fp)
 410a41c:	e0bffb17 	ldw	r2,-20(fp)
 410a420:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 410a424:	e0bfff17 	ldw	r2,-4(fp)
 410a428:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 410a42c:	0005883a 	mov	r2,zero
}
 410a430:	e037883a 	mov	sp,fp
 410a434:	dfc00117 	ldw	ra,4(sp)
 410a438:	df000017 	ldw	fp,0(sp)
 410a43c:	dec00204 	addi	sp,sp,8
 410a440:	f800283a 	ret

0410a444 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 410a444:	defff804 	addi	sp,sp,-32
 410a448:	dfc00715 	stw	ra,28(sp)
 410a44c:	df000615 	stw	fp,24(sp)
 410a450:	df000604 	addi	fp,sp,24
 410a454:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 410a458:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 410a45c:	e0bfff17 	ldw	r2,-4(fp)
 410a460:	1000021e 	bne	r2,zero,410a46c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 410a464:	00800104 	movi	r2,4
 410a468:	00003506 	br	410a540 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 410a46c:	e0bfff17 	ldw	r2,-4(fp)
 410a470:	10800003 	ldbu	r2,0(r2)
 410a474:	10803fcc 	andi	r2,r2,255
 410a478:	108000e0 	cmpeqi	r2,r2,3
 410a47c:	1000021e 	bne	r2,zero,410a488 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 410a480:	00800044 	movi	r2,1
 410a484:	00002e06 	br	410a540 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410a488:	0005303a 	rdctl	r2,status
 410a48c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410a490:	e0fffe17 	ldw	r3,-8(fp)
 410a494:	00bfff84 	movi	r2,-2
 410a498:	1884703a 	and	r2,r3,r2
 410a49c:	1001703a 	wrctl	status,r2
  
  return context;
 410a4a0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 410a4a4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 410a4a8:	e0bfff17 	ldw	r2,-4(fp)
 410a4ac:	10800283 	ldbu	r2,10(r2)
 410a4b0:	10803fcc 	andi	r2,r2,255
 410a4b4:	10000c26 	beq	r2,zero,410a4e8 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 410a4b8:	000f883a 	mov	r7,zero
 410a4bc:	01800044 	movi	r6,1
 410a4c0:	000b883a 	mov	r5,zero
 410a4c4:	e13fff17 	ldw	r4,-4(fp)
 410a4c8:	4105ae80 	call	4105ae8 <OS_EventTaskRdy>
 410a4cc:	e0bffa17 	ldw	r2,-24(fp)
 410a4d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410a4d4:	e0bffb17 	ldw	r2,-20(fp)
 410a4d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 410a4dc:	41065340 	call	4106534 <OS_Sched>
        return (OS_ERR_NONE);
 410a4e0:	0005883a 	mov	r2,zero
 410a4e4:	00001606 	br	410a540 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 410a4e8:	e0bfff17 	ldw	r2,-4(fp)
 410a4ec:	1080020b 	ldhu	r2,8(r2)
 410a4f0:	10ffffcc 	andi	r3,r2,65535
 410a4f4:	00bfffd4 	movui	r2,65535
 410a4f8:	18800c26 	beq	r3,r2,410a52c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 410a4fc:	e0bfff17 	ldw	r2,-4(fp)
 410a500:	1080020b 	ldhu	r2,8(r2)
 410a504:	10800044 	addi	r2,r2,1
 410a508:	1007883a 	mov	r3,r2
 410a50c:	e0bfff17 	ldw	r2,-4(fp)
 410a510:	10c0020d 	sth	r3,8(r2)
 410a514:	e0bffa17 	ldw	r2,-24(fp)
 410a518:	e0bffc15 	stw	r2,-16(fp)
 410a51c:	e0bffc17 	ldw	r2,-16(fp)
 410a520:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 410a524:	0005883a 	mov	r2,zero
 410a528:	00000506 	br	410a540 <OSSemPost+0xfc>
 410a52c:	e0bffa17 	ldw	r2,-24(fp)
 410a530:	e0bffd15 	stw	r2,-12(fp)
 410a534:	e0bffd17 	ldw	r2,-12(fp)
 410a538:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 410a53c:	00800c84 	movi	r2,50
}
 410a540:	e037883a 	mov	sp,fp
 410a544:	dfc00117 	ldw	ra,4(sp)
 410a548:	df000017 	ldw	fp,0(sp)
 410a54c:	dec00204 	addi	sp,sp,8
 410a550:	f800283a 	ret

0410a554 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 410a554:	defff704 	addi	sp,sp,-36
 410a558:	df000815 	stw	fp,32(sp)
 410a55c:	df000804 	addi	fp,sp,32
 410a560:	e13ffe15 	stw	r4,-8(fp)
 410a564:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 410a568:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 410a56c:	e0bffe17 	ldw	r2,-8(fp)
 410a570:	1000021e 	bne	r2,zero,410a57c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 410a574:	00800104 	movi	r2,4
 410a578:	00003606 	br	410a654 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 410a57c:	e0bfff17 	ldw	r2,-4(fp)
 410a580:	1000021e 	bne	r2,zero,410a58c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 410a584:	00800244 	movi	r2,9
 410a588:	00003206 	br	410a654 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 410a58c:	e0bffe17 	ldw	r2,-8(fp)
 410a590:	10800003 	ldbu	r2,0(r2)
 410a594:	10803fcc 	andi	r2,r2,255
 410a598:	108000e0 	cmpeqi	r2,r2,3
 410a59c:	1000021e 	bne	r2,zero,410a5a8 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 410a5a0:	00800044 	movi	r2,1
 410a5a4:	00002b06 	br	410a654 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410a5a8:	0005303a 	rdctl	r2,status
 410a5ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410a5b0:	e0fffd17 	ldw	r3,-12(fp)
 410a5b4:	00bfff84 	movi	r2,-2
 410a5b8:	1884703a 	and	r2,r3,r2
 410a5bc:	1001703a 	wrctl	status,r2
  
  return context;
 410a5c0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 410a5c4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 410a5c8:	e0bffe17 	ldw	r2,-8(fp)
 410a5cc:	10c00283 	ldbu	r3,10(r2)
 410a5d0:	e0bfff17 	ldw	r2,-4(fp)
 410a5d4:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 410a5d8:	e0bffe17 	ldw	r2,-8(fp)
 410a5dc:	108002c4 	addi	r2,r2,11
 410a5e0:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 410a5e4:	e0bfff17 	ldw	r2,-4(fp)
 410a5e8:	10800084 	addi	r2,r2,2
 410a5ec:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 410a5f0:	e03ffa05 	stb	zero,-24(fp)
 410a5f4:	00000b06 	br	410a624 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 410a5f8:	e0bff917 	ldw	r2,-28(fp)
 410a5fc:	10c00044 	addi	r3,r2,1
 410a600:	e0fff915 	stw	r3,-28(fp)
 410a604:	e0fff817 	ldw	r3,-32(fp)
 410a608:	19000044 	addi	r4,r3,1
 410a60c:	e13ff815 	stw	r4,-32(fp)
 410a610:	18c00003 	ldbu	r3,0(r3)
 410a614:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 410a618:	e0bffa03 	ldbu	r2,-24(fp)
 410a61c:	10800044 	addi	r2,r2,1
 410a620:	e0bffa05 	stb	r2,-24(fp)
 410a624:	e0bffa03 	ldbu	r2,-24(fp)
 410a628:	108000f0 	cmpltui	r2,r2,3
 410a62c:	103ff21e 	bne	r2,zero,410a5f8 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 410a630:	e0bffe17 	ldw	r2,-8(fp)
 410a634:	10c0020b 	ldhu	r3,8(r2)
 410a638:	e0bfff17 	ldw	r2,-4(fp)
 410a63c:	10c0000d 	sth	r3,0(r2)
 410a640:	e0bffb17 	ldw	r2,-20(fp)
 410a644:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410a648:	e0bffc17 	ldw	r2,-16(fp)
 410a64c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 410a650:	0005883a 	mov	r2,zero
}
 410a654:	e037883a 	mov	sp,fp
 410a658:	df000017 	ldw	fp,0(sp)
 410a65c:	dec00104 	addi	sp,sp,4
 410a660:	f800283a 	ret

0410a664 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 410a664:	defff904 	addi	sp,sp,-28
 410a668:	df000615 	stw	fp,24(sp)
 410a66c:	df000604 	addi	fp,sp,24
 410a670:	e13ffd15 	stw	r4,-12(fp)
 410a674:	2805883a 	mov	r2,r5
 410a678:	e1bfff15 	stw	r6,-4(fp)
 410a67c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 410a680:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 410a684:	e0bfff17 	ldw	r2,-4(fp)
 410a688:	10003126 	beq	r2,zero,410a750 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 410a68c:	e0bffd17 	ldw	r2,-12(fp)
 410a690:	1000041e 	bne	r2,zero,410a6a4 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 410a694:	e0bfff17 	ldw	r2,-4(fp)
 410a698:	00c00104 	movi	r3,4
 410a69c:	10c00005 	stb	r3,0(r2)
        return;
 410a6a0:	00002c06 	br	410a754 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 410a6a4:	e0bffd17 	ldw	r2,-12(fp)
 410a6a8:	10800003 	ldbu	r2,0(r2)
 410a6ac:	10803fcc 	andi	r2,r2,255
 410a6b0:	108000e0 	cmpeqi	r2,r2,3
 410a6b4:	1000041e 	bne	r2,zero,410a6c8 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 410a6b8:	e0bfff17 	ldw	r2,-4(fp)
 410a6bc:	00c00044 	movi	r3,1
 410a6c0:	10c00005 	stb	r3,0(r2)
        return;
 410a6c4:	00002306 	br	410a754 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410a6c8:	0005303a 	rdctl	r2,status
 410a6cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410a6d0:	e0fffc17 	ldw	r3,-16(fp)
 410a6d4:	00bfff84 	movi	r2,-2
 410a6d8:	1884703a 	and	r2,r3,r2
 410a6dc:	1001703a 	wrctl	status,r2
  
  return context;
 410a6e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 410a6e4:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 410a6e8:	e0bfff17 	ldw	r2,-4(fp)
 410a6ec:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 410a6f0:	e0bffd17 	ldw	r2,-12(fp)
 410a6f4:	1080020b 	ldhu	r2,8(r2)
 410a6f8:	10bfffcc 	andi	r2,r2,65535
 410a6fc:	10000426 	beq	r2,zero,410a710 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 410a700:	e0bffd17 	ldw	r2,-12(fp)
 410a704:	e0fffe0b 	ldhu	r3,-8(fp)
 410a708:	10c0020d 	sth	r3,8(r2)
 410a70c:	00000b06 	br	410a73c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 410a710:	e0bffd17 	ldw	r2,-12(fp)
 410a714:	10800283 	ldbu	r2,10(r2)
 410a718:	10803fcc 	andi	r2,r2,255
 410a71c:	1000041e 	bne	r2,zero,410a730 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 410a720:	e0bffd17 	ldw	r2,-12(fp)
 410a724:	e0fffe0b 	ldhu	r3,-8(fp)
 410a728:	10c0020d 	sth	r3,8(r2)
 410a72c:	00000306 	br	410a73c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 410a730:	e0bfff17 	ldw	r2,-4(fp)
 410a734:	00c01244 	movi	r3,73
 410a738:	10c00005 	stb	r3,0(r2)
 410a73c:	e0bffa17 	ldw	r2,-24(fp)
 410a740:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410a744:	e0bffb17 	ldw	r2,-20(fp)
 410a748:	1001703a 	wrctl	status,r2
 410a74c:	00000106 	br	410a754 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 410a750:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 410a754:	e037883a 	mov	sp,fp
 410a758:	df000017 	ldw	fp,0(sp)
 410a75c:	dec00104 	addi	sp,sp,4
 410a760:	f800283a 	ret

0410a764 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 410a764:	defff104 	addi	sp,sp,-60
 410a768:	dfc00e15 	stw	ra,56(sp)
 410a76c:	df000d15 	stw	fp,52(sp)
 410a770:	df000d04 	addi	fp,sp,52
 410a774:	2007883a 	mov	r3,r4
 410a778:	2805883a 	mov	r2,r5
 410a77c:	e0fffe05 	stb	r3,-8(fp)
 410a780:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 410a784:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 410a788:	e0bffe03 	ldbu	r2,-8(fp)
 410a78c:	10800530 	cmpltui	r2,r2,20
 410a790:	1000051e 	bne	r2,zero,410a7a8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 410a794:	e0bffe03 	ldbu	r2,-8(fp)
 410a798:	10803fe0 	cmpeqi	r2,r2,255
 410a79c:	1000021e 	bne	r2,zero,410a7a8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 410a7a0:	00800a84 	movi	r2,42
 410a7a4:	00012606 	br	410ac40 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 410a7a8:	e0bfff03 	ldbu	r2,-4(fp)
 410a7ac:	10800530 	cmpltui	r2,r2,20
 410a7b0:	1000021e 	bne	r2,zero,410a7bc <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 410a7b4:	00800a84 	movi	r2,42
 410a7b8:	00012106 	br	410ac40 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410a7bc:	0005303a 	rdctl	r2,status
 410a7c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410a7c4:	e0fffd17 	ldw	r3,-12(fp)
 410a7c8:	00bfff84 	movi	r2,-2
 410a7cc:	1884703a 	and	r2,r3,r2
 410a7d0:	1001703a 	wrctl	status,r2
  
  return context;
 410a7d4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 410a7d8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 410a7dc:	e0ffff03 	ldbu	r3,-4(fp)
 410a7e0:	008104b4 	movhi	r2,1042
 410a7e4:	10b12504 	addi	r2,r2,-15212
 410a7e8:	18c7883a 	add	r3,r3,r3
 410a7ec:	18c7883a 	add	r3,r3,r3
 410a7f0:	10c5883a 	add	r2,r2,r3
 410a7f4:	10800017 	ldw	r2,0(r2)
 410a7f8:	10000626 	beq	r2,zero,410a814 <OSTaskChangePrio+0xb0>
 410a7fc:	e0bff517 	ldw	r2,-44(fp)
 410a800:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410a804:	e0bff617 	ldw	r2,-40(fp)
 410a808:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 410a80c:	00800a04 	movi	r2,40
 410a810:	00010b06 	br	410ac40 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 410a814:	e0bffe03 	ldbu	r2,-8(fp)
 410a818:	10803fd8 	cmpnei	r2,r2,255
 410a81c:	1000031e 	bne	r2,zero,410a82c <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 410a820:	d0a73217 	ldw	r2,-25400(gp)
 410a824:	10800c83 	ldbu	r2,50(r2)
 410a828:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 410a82c:	e0fffe03 	ldbu	r3,-8(fp)
 410a830:	008104b4 	movhi	r2,1042
 410a834:	10b12504 	addi	r2,r2,-15212
 410a838:	18c7883a 	add	r3,r3,r3
 410a83c:	18c7883a 	add	r3,r3,r3
 410a840:	10c5883a 	add	r2,r2,r3
 410a844:	10800017 	ldw	r2,0(r2)
 410a848:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 410a84c:	e0bff817 	ldw	r2,-32(fp)
 410a850:	1000061e 	bne	r2,zero,410a86c <OSTaskChangePrio+0x108>
 410a854:	e0bff517 	ldw	r2,-44(fp)
 410a858:	e0bff715 	stw	r2,-36(fp)
 410a85c:	e0bff717 	ldw	r2,-36(fp)
 410a860:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 410a864:	00800a44 	movi	r2,41
 410a868:	0000f506 	br	410ac40 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 410a86c:	e0bff817 	ldw	r2,-32(fp)
 410a870:	10800058 	cmpnei	r2,r2,1
 410a874:	1000061e 	bne	r2,zero,410a890 <OSTaskChangePrio+0x12c>
 410a878:	e0bff517 	ldw	r2,-44(fp)
 410a87c:	e0bff915 	stw	r2,-28(fp)
 410a880:	e0bff917 	ldw	r2,-28(fp)
 410a884:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 410a888:	008010c4 	movi	r2,67
 410a88c:	0000ec06 	br	410ac40 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 410a890:	e0bfff03 	ldbu	r2,-4(fp)
 410a894:	1004d0fa 	srli	r2,r2,3
 410a898:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 410a89c:	e0bfff03 	ldbu	r2,-4(fp)
 410a8a0:	108001cc 	andi	r2,r2,7
 410a8a4:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 410a8a8:	e0bffb03 	ldbu	r2,-20(fp)
 410a8ac:	00c00044 	movi	r3,1
 410a8b0:	1884983a 	sll	r2,r3,r2
 410a8b4:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 410a8b8:	e0bffb43 	ldbu	r2,-19(fp)
 410a8bc:	00c00044 	movi	r3,1
 410a8c0:	1884983a 	sll	r2,r3,r2
 410a8c4:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 410a8c8:	e0fffe03 	ldbu	r3,-8(fp)
 410a8cc:	008104b4 	movhi	r2,1042
 410a8d0:	10b12504 	addi	r2,r2,-15212
 410a8d4:	18c7883a 	add	r3,r3,r3
 410a8d8:	18c7883a 	add	r3,r3,r3
 410a8dc:	10c5883a 	add	r2,r2,r3
 410a8e0:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 410a8e4:	e0ffff03 	ldbu	r3,-4(fp)
 410a8e8:	008104b4 	movhi	r2,1042
 410a8ec:	10b12504 	addi	r2,r2,-15212
 410a8f0:	18c7883a 	add	r3,r3,r3
 410a8f4:	18c7883a 	add	r3,r3,r3
 410a8f8:	10c5883a 	add	r2,r2,r3
 410a8fc:	e0fff817 	ldw	r3,-32(fp)
 410a900:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 410a904:	e0bff817 	ldw	r2,-32(fp)
 410a908:	10800d03 	ldbu	r2,52(r2)
 410a90c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 410a910:	e0bff817 	ldw	r2,-32(fp)
 410a914:	10800d83 	ldbu	r2,54(r2)
 410a918:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 410a91c:	e0bff817 	ldw	r2,-32(fp)
 410a920:	10800d43 	ldbu	r2,53(r2)
 410a924:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 410a928:	e0fffc03 	ldbu	r3,-16(fp)
 410a92c:	d0a72f44 	addi	r2,gp,-25411
 410a930:	1885883a 	add	r2,r3,r2
 410a934:	10c00003 	ldbu	r3,0(r2)
 410a938:	e0bffc83 	ldbu	r2,-14(fp)
 410a93c:	1884703a 	and	r2,r3,r2
 410a940:	10803fcc 	andi	r2,r2,255
 410a944:	10002826 	beq	r2,zero,410a9e8 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 410a948:	e0fffc03 	ldbu	r3,-16(fp)
 410a94c:	e13ffc03 	ldbu	r4,-16(fp)
 410a950:	d0a72f44 	addi	r2,gp,-25411
 410a954:	2085883a 	add	r2,r4,r2
 410a958:	10800003 	ldbu	r2,0(r2)
 410a95c:	1009883a 	mov	r4,r2
 410a960:	e0bffc83 	ldbu	r2,-14(fp)
 410a964:	0084303a 	nor	r2,zero,r2
 410a968:	2084703a 	and	r2,r4,r2
 410a96c:	1009883a 	mov	r4,r2
 410a970:	d0a72f44 	addi	r2,gp,-25411
 410a974:	1885883a 	add	r2,r3,r2
 410a978:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 410a97c:	e0fffc03 	ldbu	r3,-16(fp)
 410a980:	d0a72f44 	addi	r2,gp,-25411
 410a984:	1885883a 	add	r2,r3,r2
 410a988:	10800003 	ldbu	r2,0(r2)
 410a98c:	10803fcc 	andi	r2,r2,255
 410a990:	1000061e 	bne	r2,zero,410a9ac <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 410a994:	e0bffc43 	ldbu	r2,-15(fp)
 410a998:	0084303a 	nor	r2,zero,r2
 410a99c:	1007883a 	mov	r3,r2
 410a9a0:	d0a72f03 	ldbu	r2,-25412(gp)
 410a9a4:	1884703a 	and	r2,r3,r2
 410a9a8:	d0a72f05 	stb	r2,-25412(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 410a9ac:	d0e72f03 	ldbu	r3,-25412(gp)
 410a9b0:	e0bffb83 	ldbu	r2,-18(fp)
 410a9b4:	1884b03a 	or	r2,r3,r2
 410a9b8:	d0a72f05 	stb	r2,-25412(gp)
         OSRdyTbl[y_new] |= bitx_new;
 410a9bc:	e0fffb03 	ldbu	r3,-20(fp)
 410a9c0:	e13ffb03 	ldbu	r4,-20(fp)
 410a9c4:	d0a72f44 	addi	r2,gp,-25411
 410a9c8:	2085883a 	add	r2,r4,r2
 410a9cc:	11000003 	ldbu	r4,0(r2)
 410a9d0:	e0bffbc3 	ldbu	r2,-17(fp)
 410a9d4:	2084b03a 	or	r2,r4,r2
 410a9d8:	1009883a 	mov	r4,r2
 410a9dc:	d0a72f44 	addi	r2,gp,-25411
 410a9e0:	1885883a 	add	r2,r3,r2
 410a9e4:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 410a9e8:	e0bff817 	ldw	r2,-32(fp)
 410a9ec:	10800717 	ldw	r2,28(r2)
 410a9f0:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 410a9f4:	e0bff317 	ldw	r2,-52(fp)
 410a9f8:	10003326 	beq	r2,zero,410aac8 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 410a9fc:	e0bffc03 	ldbu	r2,-16(fp)
 410aa00:	e0fffc03 	ldbu	r3,-16(fp)
 410aa04:	e13ff317 	ldw	r4,-52(fp)
 410aa08:	20c7883a 	add	r3,r4,r3
 410aa0c:	18c002c4 	addi	r3,r3,11
 410aa10:	18c00003 	ldbu	r3,0(r3)
 410aa14:	1809883a 	mov	r4,r3
 410aa18:	e0fffc83 	ldbu	r3,-14(fp)
 410aa1c:	00c6303a 	nor	r3,zero,r3
 410aa20:	20c6703a 	and	r3,r4,r3
 410aa24:	1809883a 	mov	r4,r3
 410aa28:	e0fff317 	ldw	r3,-52(fp)
 410aa2c:	1885883a 	add	r2,r3,r2
 410aa30:	108002c4 	addi	r2,r2,11
 410aa34:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 410aa38:	e0bffc03 	ldbu	r2,-16(fp)
 410aa3c:	e0fff317 	ldw	r3,-52(fp)
 410aa40:	1885883a 	add	r2,r3,r2
 410aa44:	108002c4 	addi	r2,r2,11
 410aa48:	10800003 	ldbu	r2,0(r2)
 410aa4c:	10803fcc 	andi	r2,r2,255
 410aa50:	1000091e 	bne	r2,zero,410aa78 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 410aa54:	e0bff317 	ldw	r2,-52(fp)
 410aa58:	10800283 	ldbu	r2,10(r2)
 410aa5c:	1007883a 	mov	r3,r2
 410aa60:	e0bffc43 	ldbu	r2,-15(fp)
 410aa64:	0084303a 	nor	r2,zero,r2
 410aa68:	1884703a 	and	r2,r3,r2
 410aa6c:	1007883a 	mov	r3,r2
 410aa70:	e0bff317 	ldw	r2,-52(fp)
 410aa74:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 410aa78:	e0bff317 	ldw	r2,-52(fp)
 410aa7c:	10c00283 	ldbu	r3,10(r2)
 410aa80:	e0bffb83 	ldbu	r2,-18(fp)
 410aa84:	1884b03a 	or	r2,r3,r2
 410aa88:	1007883a 	mov	r3,r2
 410aa8c:	e0bff317 	ldw	r2,-52(fp)
 410aa90:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 410aa94:	e0bffb03 	ldbu	r2,-20(fp)
 410aa98:	e0fffb03 	ldbu	r3,-20(fp)
 410aa9c:	e13ff317 	ldw	r4,-52(fp)
 410aaa0:	20c7883a 	add	r3,r4,r3
 410aaa4:	18c002c4 	addi	r3,r3,11
 410aaa8:	19000003 	ldbu	r4,0(r3)
 410aaac:	e0fffbc3 	ldbu	r3,-17(fp)
 410aab0:	20c6b03a 	or	r3,r4,r3
 410aab4:	1809883a 	mov	r4,r3
 410aab8:	e0fff317 	ldw	r3,-52(fp)
 410aabc:	1885883a 	add	r2,r3,r2
 410aac0:	108002c4 	addi	r2,r2,11
 410aac4:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 410aac8:	e0bff817 	ldw	r2,-32(fp)
 410aacc:	10800817 	ldw	r2,32(r2)
 410aad0:	10004226 	beq	r2,zero,410abdc <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 410aad4:	e0bff817 	ldw	r2,-32(fp)
 410aad8:	10800817 	ldw	r2,32(r2)
 410aadc:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 410aae0:	e0bff417 	ldw	r2,-48(fp)
 410aae4:	10800017 	ldw	r2,0(r2)
 410aae8:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 410aaec:	00003906 	br	410abd4 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 410aaf0:	e0bffc03 	ldbu	r2,-16(fp)
 410aaf4:	e0fffc03 	ldbu	r3,-16(fp)
 410aaf8:	e13ff317 	ldw	r4,-52(fp)
 410aafc:	20c7883a 	add	r3,r4,r3
 410ab00:	18c002c4 	addi	r3,r3,11
 410ab04:	18c00003 	ldbu	r3,0(r3)
 410ab08:	1809883a 	mov	r4,r3
 410ab0c:	e0fffc83 	ldbu	r3,-14(fp)
 410ab10:	00c6303a 	nor	r3,zero,r3
 410ab14:	20c6703a 	and	r3,r4,r3
 410ab18:	1809883a 	mov	r4,r3
 410ab1c:	e0fff317 	ldw	r3,-52(fp)
 410ab20:	1885883a 	add	r2,r3,r2
 410ab24:	108002c4 	addi	r2,r2,11
 410ab28:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 410ab2c:	e0bffc03 	ldbu	r2,-16(fp)
 410ab30:	e0fff317 	ldw	r3,-52(fp)
 410ab34:	1885883a 	add	r2,r3,r2
 410ab38:	108002c4 	addi	r2,r2,11
 410ab3c:	10800003 	ldbu	r2,0(r2)
 410ab40:	10803fcc 	andi	r2,r2,255
 410ab44:	1000091e 	bne	r2,zero,410ab6c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 410ab48:	e0bff317 	ldw	r2,-52(fp)
 410ab4c:	10800283 	ldbu	r2,10(r2)
 410ab50:	1007883a 	mov	r3,r2
 410ab54:	e0bffc43 	ldbu	r2,-15(fp)
 410ab58:	0084303a 	nor	r2,zero,r2
 410ab5c:	1884703a 	and	r2,r3,r2
 410ab60:	1007883a 	mov	r3,r2
 410ab64:	e0bff317 	ldw	r2,-52(fp)
 410ab68:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 410ab6c:	e0bff317 	ldw	r2,-52(fp)
 410ab70:	10c00283 	ldbu	r3,10(r2)
 410ab74:	e0bffb83 	ldbu	r2,-18(fp)
 410ab78:	1884b03a 	or	r2,r3,r2
 410ab7c:	1007883a 	mov	r3,r2
 410ab80:	e0bff317 	ldw	r2,-52(fp)
 410ab84:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 410ab88:	e0bffb03 	ldbu	r2,-20(fp)
 410ab8c:	e0fffb03 	ldbu	r3,-20(fp)
 410ab90:	e13ff317 	ldw	r4,-52(fp)
 410ab94:	20c7883a 	add	r3,r4,r3
 410ab98:	18c002c4 	addi	r3,r3,11
 410ab9c:	19000003 	ldbu	r4,0(r3)
 410aba0:	e0fffbc3 	ldbu	r3,-17(fp)
 410aba4:	20c6b03a 	or	r3,r4,r3
 410aba8:	1809883a 	mov	r4,r3
 410abac:	e0fff317 	ldw	r3,-52(fp)
 410abb0:	1885883a 	add	r2,r3,r2
 410abb4:	108002c4 	addi	r2,r2,11
 410abb8:	11000005 	stb	r4,0(r2)
            pevents++;
 410abbc:	e0bff417 	ldw	r2,-48(fp)
 410abc0:	10800104 	addi	r2,r2,4
 410abc4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 410abc8:	e0bff417 	ldw	r2,-48(fp)
 410abcc:	10800017 	ldw	r2,0(r2)
 410abd0:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 410abd4:	e0bff317 	ldw	r2,-52(fp)
 410abd8:	103fc51e 	bne	r2,zero,410aaf0 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 410abdc:	e0bff817 	ldw	r2,-32(fp)
 410abe0:	e0ffff03 	ldbu	r3,-4(fp)
 410abe4:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 410abe8:	e0bff817 	ldw	r2,-32(fp)
 410abec:	e0fffb03 	ldbu	r3,-20(fp)
 410abf0:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 410abf4:	e0bff817 	ldw	r2,-32(fp)
 410abf8:	e0fffb43 	ldbu	r3,-19(fp)
 410abfc:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 410ac00:	e0bff817 	ldw	r2,-32(fp)
 410ac04:	e0fffb83 	ldbu	r3,-18(fp)
 410ac08:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 410ac0c:	e0bff817 	ldw	r2,-32(fp)
 410ac10:	e0fffbc3 	ldbu	r3,-17(fp)
 410ac14:	10c00d45 	stb	r3,53(r2)
 410ac18:	e0bff517 	ldw	r2,-44(fp)
 410ac1c:	e0bffa15 	stw	r2,-24(fp)
 410ac20:	e0bffa17 	ldw	r2,-24(fp)
 410ac24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 410ac28:	d0a72343 	ldbu	r2,-25459(gp)
 410ac2c:	10803fcc 	andi	r2,r2,255
 410ac30:	10800058 	cmpnei	r2,r2,1
 410ac34:	1000011e 	bne	r2,zero,410ac3c <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 410ac38:	41065340 	call	4106534 <OS_Sched>
    }
    return (OS_ERR_NONE);
 410ac3c:	0005883a 	mov	r2,zero
}
 410ac40:	e037883a 	mov	sp,fp
 410ac44:	dfc00117 	ldw	ra,4(sp)
 410ac48:	df000017 	ldw	fp,0(sp)
 410ac4c:	dec00204 	addi	sp,sp,8
 410ac50:	f800283a 	ret

0410ac54 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 410ac54:	deffee04 	addi	sp,sp,-72
 410ac58:	dfc01115 	stw	ra,68(sp)
 410ac5c:	df001015 	stw	fp,64(sp)
 410ac60:	df001004 	addi	fp,sp,64
 410ac64:	e13ffc15 	stw	r4,-16(fp)
 410ac68:	e17ffd15 	stw	r5,-12(fp)
 410ac6c:	e1bffe15 	stw	r6,-8(fp)
 410ac70:	3805883a 	mov	r2,r7
 410ac74:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 410ac78:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 410ac7c:	e0bfff03 	ldbu	r2,-4(fp)
 410ac80:	10800570 	cmpltui	r2,r2,21
 410ac84:	1000021e 	bne	r2,zero,410ac90 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 410ac88:	00800a84 	movi	r2,42
 410ac8c:	00005706 	br	410adec <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410ac90:	0005303a 	rdctl	r2,status
 410ac94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410ac98:	e0fffb17 	ldw	r3,-20(fp)
 410ac9c:	00bfff84 	movi	r2,-2
 410aca0:	1884703a 	and	r2,r3,r2
 410aca4:	1001703a 	wrctl	status,r2
  
  return context;
 410aca8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 410acac:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 410acb0:	d0a73103 	ldbu	r2,-25404(gp)
 410acb4:	10803fcc 	andi	r2,r2,255
 410acb8:	10000626 	beq	r2,zero,410acd4 <OSTaskCreate+0x80>
 410acbc:	e0bff317 	ldw	r2,-52(fp)
 410acc0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410acc4:	e0bff417 	ldw	r2,-48(fp)
 410acc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 410accc:	00800f04 	movi	r2,60
 410acd0:	00004606 	br	410adec <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 410acd4:	e0ffff03 	ldbu	r3,-4(fp)
 410acd8:	008104b4 	movhi	r2,1042
 410acdc:	10b12504 	addi	r2,r2,-15212
 410ace0:	18c7883a 	add	r3,r3,r3
 410ace4:	18c7883a 	add	r3,r3,r3
 410ace8:	10c5883a 	add	r2,r2,r3
 410acec:	10800017 	ldw	r2,0(r2)
 410acf0:	1000391e 	bne	r2,zero,410add8 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 410acf4:	e0ffff03 	ldbu	r3,-4(fp)
 410acf8:	008104b4 	movhi	r2,1042
 410acfc:	10b12504 	addi	r2,r2,-15212
 410ad00:	18c7883a 	add	r3,r3,r3
 410ad04:	18c7883a 	add	r3,r3,r3
 410ad08:	10c5883a 	add	r2,r2,r3
 410ad0c:	00c00044 	movi	r3,1
 410ad10:	10c00015 	stw	r3,0(r2)
 410ad14:	e0bff317 	ldw	r2,-52(fp)
 410ad18:	e0bff515 	stw	r2,-44(fp)
 410ad1c:	e0bff517 	ldw	r2,-44(fp)
 410ad20:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 410ad24:	000f883a 	mov	r7,zero
 410ad28:	e1bffe17 	ldw	r6,-8(fp)
 410ad2c:	e17ffd17 	ldw	r5,-12(fp)
 410ad30:	e13ffc17 	ldw	r4,-16(fp)
 410ad34:	410e9b00 	call	410e9b0 <OSTaskStkInit>
 410ad38:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 410ad3c:	e0bfff03 	ldbu	r2,-4(fp)
 410ad40:	d8000215 	stw	zero,8(sp)
 410ad44:	d8000115 	stw	zero,4(sp)
 410ad48:	d8000015 	stw	zero,0(sp)
 410ad4c:	000f883a 	mov	r7,zero
 410ad50:	000d883a 	mov	r6,zero
 410ad54:	e17ff717 	ldw	r5,-36(fp)
 410ad58:	1009883a 	mov	r4,r2
 410ad5c:	41069340 	call	4106934 <OS_TCBInit>
 410ad60:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 410ad64:	e0bff803 	ldbu	r2,-32(fp)
 410ad68:	1000061e 	bne	r2,zero,410ad84 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 410ad6c:	d0a72343 	ldbu	r2,-25459(gp)
 410ad70:	10803fcc 	andi	r2,r2,255
 410ad74:	10800058 	cmpnei	r2,r2,1
 410ad78:	1000151e 	bne	r2,zero,410add0 <OSTaskCreate+0x17c>
                OS_Sched();
 410ad7c:	41065340 	call	4106534 <OS_Sched>
 410ad80:	00001306 	br	410add0 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410ad84:	0005303a 	rdctl	r2,status
 410ad88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410ad8c:	e0fffa17 	ldw	r3,-24(fp)
 410ad90:	00bfff84 	movi	r2,-2
 410ad94:	1884703a 	and	r2,r3,r2
 410ad98:	1001703a 	wrctl	status,r2
  
  return context;
 410ad9c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 410ada0:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 410ada4:	e0ffff03 	ldbu	r3,-4(fp)
 410ada8:	008104b4 	movhi	r2,1042
 410adac:	10b12504 	addi	r2,r2,-15212
 410adb0:	18c7883a 	add	r3,r3,r3
 410adb4:	18c7883a 	add	r3,r3,r3
 410adb8:	10c5883a 	add	r2,r2,r3
 410adbc:	10000015 	stw	zero,0(r2)
 410adc0:	e0bff317 	ldw	r2,-52(fp)
 410adc4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410adc8:	e0bff617 	ldw	r2,-40(fp)
 410adcc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 410add0:	e0bff803 	ldbu	r2,-32(fp)
 410add4:	00000506 	br	410adec <OSTaskCreate+0x198>
 410add8:	e0bff317 	ldw	r2,-52(fp)
 410addc:	e0bff915 	stw	r2,-28(fp)
 410ade0:	e0bff917 	ldw	r2,-28(fp)
 410ade4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 410ade8:	00800a04 	movi	r2,40
}
 410adec:	e037883a 	mov	sp,fp
 410adf0:	dfc00117 	ldw	ra,4(sp)
 410adf4:	df000017 	ldw	fp,0(sp)
 410adf8:	dec00204 	addi	sp,sp,8
 410adfc:	f800283a 	ret

0410ae00 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 410ae00:	deffec04 	addi	sp,sp,-80
 410ae04:	dfc01315 	stw	ra,76(sp)
 410ae08:	df001215 	stw	fp,72(sp)
 410ae0c:	df001204 	addi	fp,sp,72
 410ae10:	e13ffa15 	stw	r4,-24(fp)
 410ae14:	e17ffb15 	stw	r5,-20(fp)
 410ae18:	e1bffc15 	stw	r6,-16(fp)
 410ae1c:	3809883a 	mov	r4,r7
 410ae20:	e0c00217 	ldw	r3,8(fp)
 410ae24:	e0800617 	ldw	r2,24(fp)
 410ae28:	e13ffd05 	stb	r4,-12(fp)
 410ae2c:	e0fffe0d 	sth	r3,-8(fp)
 410ae30:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 410ae34:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 410ae38:	e0bffd03 	ldbu	r2,-12(fp)
 410ae3c:	10800570 	cmpltui	r2,r2,21
 410ae40:	1000021e 	bne	r2,zero,410ae4c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 410ae44:	00800a84 	movi	r2,42
 410ae48:	00006106 	br	410afd0 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410ae4c:	0005303a 	rdctl	r2,status
 410ae50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410ae54:	e0fff917 	ldw	r3,-28(fp)
 410ae58:	00bfff84 	movi	r2,-2
 410ae5c:	1884703a 	and	r2,r3,r2
 410ae60:	1001703a 	wrctl	status,r2
  
  return context;
 410ae64:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 410ae68:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 410ae6c:	d0a73103 	ldbu	r2,-25404(gp)
 410ae70:	10803fcc 	andi	r2,r2,255
 410ae74:	10000626 	beq	r2,zero,410ae90 <OSTaskCreateExt+0x90>
 410ae78:	e0bff117 	ldw	r2,-60(fp)
 410ae7c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410ae80:	e0bff217 	ldw	r2,-56(fp)
 410ae84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 410ae88:	00800f04 	movi	r2,60
 410ae8c:	00005006 	br	410afd0 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 410ae90:	e0fffd03 	ldbu	r3,-12(fp)
 410ae94:	008104b4 	movhi	r2,1042
 410ae98:	10b12504 	addi	r2,r2,-15212
 410ae9c:	18c7883a 	add	r3,r3,r3
 410aea0:	18c7883a 	add	r3,r3,r3
 410aea4:	10c5883a 	add	r2,r2,r3
 410aea8:	10800017 	ldw	r2,0(r2)
 410aeac:	1000431e 	bne	r2,zero,410afbc <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 410aeb0:	e0fffd03 	ldbu	r3,-12(fp)
 410aeb4:	008104b4 	movhi	r2,1042
 410aeb8:	10b12504 	addi	r2,r2,-15212
 410aebc:	18c7883a 	add	r3,r3,r3
 410aec0:	18c7883a 	add	r3,r3,r3
 410aec4:	10c5883a 	add	r2,r2,r3
 410aec8:	00c00044 	movi	r3,1
 410aecc:	10c00015 	stw	r3,0(r2)
 410aed0:	e0bff117 	ldw	r2,-60(fp)
 410aed4:	e0bff315 	stw	r2,-52(fp)
 410aed8:	e0bff317 	ldw	r2,-52(fp)
 410aedc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 410aee0:	e0bfff0b 	ldhu	r2,-4(fp)
 410aee4:	100d883a 	mov	r6,r2
 410aee8:	e1400417 	ldw	r5,16(fp)
 410aeec:	e1000317 	ldw	r4,12(fp)
 410aef0:	410be600 	call	410be60 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 410aef4:	e0bfff0b 	ldhu	r2,-4(fp)
 410aef8:	100f883a 	mov	r7,r2
 410aefc:	e1bffc17 	ldw	r6,-16(fp)
 410af00:	e17ffb17 	ldw	r5,-20(fp)
 410af04:	e13ffa17 	ldw	r4,-24(fp)
 410af08:	410e9b00 	call	410e9b0 <OSTaskStkInit>
 410af0c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 410af10:	e0fffd03 	ldbu	r3,-12(fp)
 410af14:	e13ffe0b 	ldhu	r4,-8(fp)
 410af18:	e0bfff0b 	ldhu	r2,-4(fp)
 410af1c:	d8800215 	stw	r2,8(sp)
 410af20:	e0800517 	ldw	r2,20(fp)
 410af24:	d8800115 	stw	r2,4(sp)
 410af28:	e0800417 	ldw	r2,16(fp)
 410af2c:	d8800015 	stw	r2,0(sp)
 410af30:	200f883a 	mov	r7,r4
 410af34:	e1800317 	ldw	r6,12(fp)
 410af38:	e17ff517 	ldw	r5,-44(fp)
 410af3c:	1809883a 	mov	r4,r3
 410af40:	41069340 	call	4106934 <OS_TCBInit>
 410af44:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 410af48:	e0bff603 	ldbu	r2,-40(fp)
 410af4c:	1000061e 	bne	r2,zero,410af68 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 410af50:	d0a72343 	ldbu	r2,-25459(gp)
 410af54:	10803fcc 	andi	r2,r2,255
 410af58:	10800058 	cmpnei	r2,r2,1
 410af5c:	1000151e 	bne	r2,zero,410afb4 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 410af60:	41065340 	call	4106534 <OS_Sched>
 410af64:	00001306 	br	410afb4 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410af68:	0005303a 	rdctl	r2,status
 410af6c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410af70:	e0fff817 	ldw	r3,-32(fp)
 410af74:	00bfff84 	movi	r2,-2
 410af78:	1884703a 	and	r2,r3,r2
 410af7c:	1001703a 	wrctl	status,r2
  
  return context;
 410af80:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 410af84:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 410af88:	e0fffd03 	ldbu	r3,-12(fp)
 410af8c:	008104b4 	movhi	r2,1042
 410af90:	10b12504 	addi	r2,r2,-15212
 410af94:	18c7883a 	add	r3,r3,r3
 410af98:	18c7883a 	add	r3,r3,r3
 410af9c:	10c5883a 	add	r2,r2,r3
 410afa0:	10000015 	stw	zero,0(r2)
 410afa4:	e0bff117 	ldw	r2,-60(fp)
 410afa8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410afac:	e0bff417 	ldw	r2,-48(fp)
 410afb0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 410afb4:	e0bff603 	ldbu	r2,-40(fp)
 410afb8:	00000506 	br	410afd0 <OSTaskCreateExt+0x1d0>
 410afbc:	e0bff117 	ldw	r2,-60(fp)
 410afc0:	e0bff715 	stw	r2,-36(fp)
 410afc4:	e0bff717 	ldw	r2,-36(fp)
 410afc8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 410afcc:	00800a04 	movi	r2,40
}
 410afd0:	e037883a 	mov	sp,fp
 410afd4:	dfc00117 	ldw	ra,4(sp)
 410afd8:	df000017 	ldw	fp,0(sp)
 410afdc:	dec00204 	addi	sp,sp,8
 410afe0:	f800283a 	ret

0410afe4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 410afe4:	defff404 	addi	sp,sp,-48
 410afe8:	dfc00b15 	stw	ra,44(sp)
 410afec:	df000a15 	stw	fp,40(sp)
 410aff0:	df000a04 	addi	fp,sp,40
 410aff4:	2005883a 	mov	r2,r4
 410aff8:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 410affc:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 410b000:	d0a73103 	ldbu	r2,-25404(gp)
 410b004:	10803fcc 	andi	r2,r2,255
 410b008:	10000226 	beq	r2,zero,410b014 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 410b00c:	00801004 	movi	r2,64
 410b010:	0000c006 	br	410b314 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 410b014:	e0bfff03 	ldbu	r2,-4(fp)
 410b018:	10800518 	cmpnei	r2,r2,20
 410b01c:	1000021e 	bne	r2,zero,410b028 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 410b020:	00800f84 	movi	r2,62
 410b024:	0000bb06 	br	410b314 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 410b028:	e0bfff03 	ldbu	r2,-4(fp)
 410b02c:	10800530 	cmpltui	r2,r2,20
 410b030:	1000051e 	bne	r2,zero,410b048 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 410b034:	e0bfff03 	ldbu	r2,-4(fp)
 410b038:	10803fe0 	cmpeqi	r2,r2,255
 410b03c:	1000021e 	bne	r2,zero,410b048 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 410b040:	00800a84 	movi	r2,42
 410b044:	0000b306 	br	410b314 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410b048:	0005303a 	rdctl	r2,status
 410b04c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410b050:	e0fffe17 	ldw	r3,-8(fp)
 410b054:	00bfff84 	movi	r2,-2
 410b058:	1884703a 	and	r2,r3,r2
 410b05c:	1001703a 	wrctl	status,r2
  
  return context;
 410b060:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 410b064:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 410b068:	e0bfff03 	ldbu	r2,-4(fp)
 410b06c:	10803fd8 	cmpnei	r2,r2,255
 410b070:	1000031e 	bne	r2,zero,410b080 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 410b074:	d0a73217 	ldw	r2,-25400(gp)
 410b078:	10800c83 	ldbu	r2,50(r2)
 410b07c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 410b080:	e0ffff03 	ldbu	r3,-4(fp)
 410b084:	008104b4 	movhi	r2,1042
 410b088:	10b12504 	addi	r2,r2,-15212
 410b08c:	18c7883a 	add	r3,r3,r3
 410b090:	18c7883a 	add	r3,r3,r3
 410b094:	10c5883a 	add	r2,r2,r3
 410b098:	10800017 	ldw	r2,0(r2)
 410b09c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 410b0a0:	e0bff817 	ldw	r2,-32(fp)
 410b0a4:	1000061e 	bne	r2,zero,410b0c0 <OSTaskDel+0xdc>
 410b0a8:	e0bff617 	ldw	r2,-40(fp)
 410b0ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410b0b0:	e0bff717 	ldw	r2,-36(fp)
 410b0b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 410b0b8:	008010c4 	movi	r2,67
 410b0bc:	00009506 	br	410b314 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 410b0c0:	e0bff817 	ldw	r2,-32(fp)
 410b0c4:	10800058 	cmpnei	r2,r2,1
 410b0c8:	1000061e 	bne	r2,zero,410b0e4 <OSTaskDel+0x100>
 410b0cc:	e0bff617 	ldw	r2,-40(fp)
 410b0d0:	e0bff915 	stw	r2,-28(fp)
 410b0d4:	e0bff917 	ldw	r2,-28(fp)
 410b0d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 410b0dc:	00800f44 	movi	r2,61
 410b0e0:	00008c06 	br	410b314 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 410b0e4:	e0bff817 	ldw	r2,-32(fp)
 410b0e8:	10800d03 	ldbu	r2,52(r2)
 410b0ec:	10c03fcc 	andi	r3,r2,255
 410b0f0:	e0bff817 	ldw	r2,-32(fp)
 410b0f4:	10800d03 	ldbu	r2,52(r2)
 410b0f8:	11003fcc 	andi	r4,r2,255
 410b0fc:	d0a72f44 	addi	r2,gp,-25411
 410b100:	2085883a 	add	r2,r4,r2
 410b104:	10800003 	ldbu	r2,0(r2)
 410b108:	1009883a 	mov	r4,r2
 410b10c:	e0bff817 	ldw	r2,-32(fp)
 410b110:	10800d43 	ldbu	r2,53(r2)
 410b114:	0084303a 	nor	r2,zero,r2
 410b118:	2084703a 	and	r2,r4,r2
 410b11c:	1009883a 	mov	r4,r2
 410b120:	d0a72f44 	addi	r2,gp,-25411
 410b124:	1885883a 	add	r2,r3,r2
 410b128:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 410b12c:	e0bff817 	ldw	r2,-32(fp)
 410b130:	10800d03 	ldbu	r2,52(r2)
 410b134:	10c03fcc 	andi	r3,r2,255
 410b138:	d0a72f44 	addi	r2,gp,-25411
 410b13c:	1885883a 	add	r2,r3,r2
 410b140:	10800003 	ldbu	r2,0(r2)
 410b144:	10803fcc 	andi	r2,r2,255
 410b148:	1000071e 	bne	r2,zero,410b168 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 410b14c:	e0bff817 	ldw	r2,-32(fp)
 410b150:	10800d83 	ldbu	r2,54(r2)
 410b154:	0084303a 	nor	r2,zero,r2
 410b158:	1007883a 	mov	r3,r2
 410b15c:	d0a72f03 	ldbu	r2,-25412(gp)
 410b160:	1884703a 	and	r2,r3,r2
 410b164:	d0a72f05 	stb	r2,-25412(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 410b168:	e0bff817 	ldw	r2,-32(fp)
 410b16c:	10800717 	ldw	r2,28(r2)
 410b170:	10000526 	beq	r2,zero,410b188 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 410b174:	e0bff817 	ldw	r2,-32(fp)
 410b178:	10800717 	ldw	r2,28(r2)
 410b17c:	100b883a 	mov	r5,r2
 410b180:	e13ff817 	ldw	r4,-32(fp)
 410b184:	4105ee00 	call	4105ee0 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 410b188:	e0bff817 	ldw	r2,-32(fp)
 410b18c:	10800817 	ldw	r2,32(r2)
 410b190:	10000526 	beq	r2,zero,410b1a8 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 410b194:	e0bff817 	ldw	r2,-32(fp)
 410b198:	10800817 	ldw	r2,32(r2)
 410b19c:	100b883a 	mov	r5,r2
 410b1a0:	e13ff817 	ldw	r4,-32(fp)
 410b1a4:	4105f980 	call	4105f98 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 410b1a8:	e0bff817 	ldw	r2,-32(fp)
 410b1ac:	10800a17 	ldw	r2,40(r2)
 410b1b0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 410b1b4:	e0bffb17 	ldw	r2,-20(fp)
 410b1b8:	10000226 	beq	r2,zero,410b1c4 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 410b1bc:	e13ffb17 	ldw	r4,-20(fp)
 410b1c0:	41084080 	call	4108408 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 410b1c4:	e0bff817 	ldw	r2,-32(fp)
 410b1c8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 410b1cc:	e0bff817 	ldw	r2,-32(fp)
 410b1d0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 410b1d4:	e0bff817 	ldw	r2,-32(fp)
 410b1d8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 410b1dc:	d0a72303 	ldbu	r2,-25460(gp)
 410b1e0:	10803fcc 	andi	r2,r2,255
 410b1e4:	10803fe0 	cmpeqi	r2,r2,255
 410b1e8:	1000031e 	bne	r2,zero,410b1f8 <OSTaskDel+0x214>
        OSLockNesting++;
 410b1ec:	d0a72303 	ldbu	r2,-25460(gp)
 410b1f0:	10800044 	addi	r2,r2,1
 410b1f4:	d0a72305 	stb	r2,-25460(gp)
 410b1f8:	e0bff617 	ldw	r2,-40(fp)
 410b1fc:	e0bffd15 	stw	r2,-12(fp)
 410b200:	e0bffd17 	ldw	r2,-12(fp)
 410b204:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 410b208:	4105ac80 	call	4105ac8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410b20c:	0005303a 	rdctl	r2,status
 410b210:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410b214:	e0fffa17 	ldw	r3,-24(fp)
 410b218:	00bfff84 	movi	r2,-2
 410b21c:	1884703a 	and	r2,r3,r2
 410b220:	1001703a 	wrctl	status,r2
  
  return context;
 410b224:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 410b228:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 410b22c:	d0a72303 	ldbu	r2,-25460(gp)
 410b230:	10803fcc 	andi	r2,r2,255
 410b234:	10000326 	beq	r2,zero,410b244 <OSTaskDel+0x260>
        OSLockNesting--;
 410b238:	d0a72303 	ldbu	r2,-25460(gp)
 410b23c:	10bfffc4 	addi	r2,r2,-1
 410b240:	d0a72305 	stb	r2,-25460(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 410b244:	e13ff817 	ldw	r4,-32(fp)
 410b248:	410eb300 	call	410eb30 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 410b24c:	d0a72b43 	ldbu	r2,-25427(gp)
 410b250:	10bfffc4 	addi	r2,r2,-1
 410b254:	d0a72b45 	stb	r2,-25427(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 410b258:	e0ffff03 	ldbu	r3,-4(fp)
 410b25c:	008104b4 	movhi	r2,1042
 410b260:	10b12504 	addi	r2,r2,-15212
 410b264:	18c7883a 	add	r3,r3,r3
 410b268:	18c7883a 	add	r3,r3,r3
 410b26c:	10c5883a 	add	r2,r2,r3
 410b270:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 410b274:	e0bff817 	ldw	r2,-32(fp)
 410b278:	10800617 	ldw	r2,24(r2)
 410b27c:	1000071e 	bne	r2,zero,410b29c <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 410b280:	e0bff817 	ldw	r2,-32(fp)
 410b284:	10800517 	ldw	r2,20(r2)
 410b288:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 410b28c:	e0bff817 	ldw	r2,-32(fp)
 410b290:	10800517 	ldw	r2,20(r2)
 410b294:	d0a72615 	stw	r2,-25448(gp)
 410b298:	00000a06 	br	410b2c4 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 410b29c:	e0bff817 	ldw	r2,-32(fp)
 410b2a0:	10800617 	ldw	r2,24(r2)
 410b2a4:	e0fff817 	ldw	r3,-32(fp)
 410b2a8:	18c00517 	ldw	r3,20(r3)
 410b2ac:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 410b2b0:	e0bff817 	ldw	r2,-32(fp)
 410b2b4:	10800517 	ldw	r2,20(r2)
 410b2b8:	e0fff817 	ldw	r3,-32(fp)
 410b2bc:	18c00617 	ldw	r3,24(r3)
 410b2c0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 410b2c4:	d0e72a17 	ldw	r3,-25432(gp)
 410b2c8:	e0bff817 	ldw	r2,-32(fp)
 410b2cc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 410b2d0:	e0bff817 	ldw	r2,-32(fp)
 410b2d4:	d0a72a15 	stw	r2,-25432(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 410b2d8:	e0bff817 	ldw	r2,-32(fp)
 410b2dc:	00c00fc4 	movi	r3,63
 410b2e0:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 410b2e4:	e0bff817 	ldw	r2,-32(fp)
 410b2e8:	10001345 	stb	zero,77(r2)
 410b2ec:	e0bff617 	ldw	r2,-40(fp)
 410b2f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410b2f4:	e0bffc17 	ldw	r2,-16(fp)
 410b2f8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 410b2fc:	d0a72343 	ldbu	r2,-25459(gp)
 410b300:	10803fcc 	andi	r2,r2,255
 410b304:	10800058 	cmpnei	r2,r2,1
 410b308:	1000011e 	bne	r2,zero,410b310 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 410b30c:	41065340 	call	4106534 <OS_Sched>
    }
    return (OS_ERR_NONE);
 410b310:	0005883a 	mov	r2,zero
}
 410b314:	e037883a 	mov	sp,fp
 410b318:	dfc00117 	ldw	ra,4(sp)
 410b31c:	df000017 	ldw	fp,0(sp)
 410b320:	dec00204 	addi	sp,sp,8
 410b324:	f800283a 	ret

0410b328 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 410b328:	defff504 	addi	sp,sp,-44
 410b32c:	df000a15 	stw	fp,40(sp)
 410b330:	df000a04 	addi	fp,sp,40
 410b334:	2005883a 	mov	r2,r4
 410b338:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 410b33c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 410b340:	e0bfff03 	ldbu	r2,-4(fp)
 410b344:	10800518 	cmpnei	r2,r2,20
 410b348:	1000021e 	bne	r2,zero,410b354 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 410b34c:	00800f84 	movi	r2,62
 410b350:	00004506 	br	410b468 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 410b354:	e0bfff03 	ldbu	r2,-4(fp)
 410b358:	10800530 	cmpltui	r2,r2,20
 410b35c:	1000051e 	bne	r2,zero,410b374 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 410b360:	e0bfff03 	ldbu	r2,-4(fp)
 410b364:	10803fe0 	cmpeqi	r2,r2,255
 410b368:	1000021e 	bne	r2,zero,410b374 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 410b36c:	00800a84 	movi	r2,42
 410b370:	00003d06 	br	410b468 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 410b374:	e0bfff03 	ldbu	r2,-4(fp)
 410b378:	10803fd8 	cmpnei	r2,r2,255
 410b37c:	1000111e 	bne	r2,zero,410b3c4 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410b380:	0005303a 	rdctl	r2,status
 410b384:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410b388:	e0fff917 	ldw	r3,-28(fp)
 410b38c:	00bfff84 	movi	r2,-2
 410b390:	1884703a 	and	r2,r3,r2
 410b394:	1001703a 	wrctl	status,r2
  
  return context;
 410b398:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 410b39c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 410b3a0:	d0a73217 	ldw	r2,-25400(gp)
 410b3a4:	10800dc3 	ldbu	r2,55(r2)
 410b3a8:	e0bff805 	stb	r2,-32(fp)
 410b3ac:	e0bff617 	ldw	r2,-40(fp)
 410b3b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410b3b4:	e0bffe17 	ldw	r2,-8(fp)
 410b3b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 410b3bc:	e0bff803 	ldbu	r2,-32(fp)
 410b3c0:	00002906 	br	410b468 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410b3c4:	0005303a 	rdctl	r2,status
 410b3c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410b3cc:	e0fff717 	ldw	r3,-36(fp)
 410b3d0:	00bfff84 	movi	r2,-2
 410b3d4:	1884703a 	and	r2,r3,r2
 410b3d8:	1001703a 	wrctl	status,r2
  
  return context;
 410b3dc:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 410b3e0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 410b3e4:	e0ffff03 	ldbu	r3,-4(fp)
 410b3e8:	008104b4 	movhi	r2,1042
 410b3ec:	10b12504 	addi	r2,r2,-15212
 410b3f0:	18c7883a 	add	r3,r3,r3
 410b3f4:	18c7883a 	add	r3,r3,r3
 410b3f8:	10c5883a 	add	r2,r2,r3
 410b3fc:	10800017 	ldw	r2,0(r2)
 410b400:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 410b404:	e0bffb17 	ldw	r2,-20(fp)
 410b408:	1000061e 	bne	r2,zero,410b424 <OSTaskDelReq+0xfc>
 410b40c:	e0bff617 	ldw	r2,-40(fp)
 410b410:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410b414:	e0bffa17 	ldw	r2,-24(fp)
 410b418:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 410b41c:	008010c4 	movi	r2,67
 410b420:	00001106 	br	410b468 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 410b424:	e0bffb17 	ldw	r2,-20(fp)
 410b428:	10800058 	cmpnei	r2,r2,1
 410b42c:	1000061e 	bne	r2,zero,410b448 <OSTaskDelReq+0x120>
 410b430:	e0bff617 	ldw	r2,-40(fp)
 410b434:	e0bffc15 	stw	r2,-16(fp)
 410b438:	e0bffc17 	ldw	r2,-16(fp)
 410b43c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 410b440:	00800f44 	movi	r2,61
 410b444:	00000806 	br	410b468 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 410b448:	e0bffb17 	ldw	r2,-20(fp)
 410b44c:	00c00fc4 	movi	r3,63
 410b450:	10c00dc5 	stb	r3,55(r2)
 410b454:	e0bff617 	ldw	r2,-40(fp)
 410b458:	e0bffd15 	stw	r2,-12(fp)
 410b45c:	e0bffd17 	ldw	r2,-12(fp)
 410b460:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 410b464:	0005883a 	mov	r2,zero
}
 410b468:	e037883a 	mov	sp,fp
 410b46c:	df000017 	ldw	fp,0(sp)
 410b470:	dec00104 	addi	sp,sp,4
 410b474:	f800283a 	ret

0410b478 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 410b478:	defff404 	addi	sp,sp,-48
 410b47c:	dfc00b15 	stw	ra,44(sp)
 410b480:	df000a15 	stw	fp,40(sp)
 410b484:	df000a04 	addi	fp,sp,40
 410b488:	2005883a 	mov	r2,r4
 410b48c:	e17ffe15 	stw	r5,-8(fp)
 410b490:	e1bfff15 	stw	r6,-4(fp)
 410b494:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 410b498:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 410b49c:	e0bfff17 	ldw	r2,-4(fp)
 410b4a0:	1000021e 	bne	r2,zero,410b4ac <OSTaskNameGet+0x34>
        return (0);
 410b4a4:	0005883a 	mov	r2,zero
 410b4a8:	00005406 	br	410b5fc <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 410b4ac:	e0bffd03 	ldbu	r2,-12(fp)
 410b4b0:	10800570 	cmpltui	r2,r2,21
 410b4b4:	1000081e 	bne	r2,zero,410b4d8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 410b4b8:	e0bffd03 	ldbu	r2,-12(fp)
 410b4bc:	10803fe0 	cmpeqi	r2,r2,255
 410b4c0:	1000051e 	bne	r2,zero,410b4d8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 410b4c4:	e0bfff17 	ldw	r2,-4(fp)
 410b4c8:	00c00a84 	movi	r3,42
 410b4cc:	10c00005 	stb	r3,0(r2)
            return (0);
 410b4d0:	0005883a 	mov	r2,zero
 410b4d4:	00004906 	br	410b5fc <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 410b4d8:	e0bffe17 	ldw	r2,-8(fp)
 410b4dc:	1000051e 	bne	r2,zero,410b4f4 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 410b4e0:	e0bfff17 	ldw	r2,-4(fp)
 410b4e4:	00c00304 	movi	r3,12
 410b4e8:	10c00005 	stb	r3,0(r2)
        return (0);
 410b4ec:	0005883a 	mov	r2,zero
 410b4f0:	00004206 	br	410b5fc <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 410b4f4:	d0a73103 	ldbu	r2,-25404(gp)
 410b4f8:	10803fcc 	andi	r2,r2,255
 410b4fc:	10000526 	beq	r2,zero,410b514 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 410b500:	e0bfff17 	ldw	r2,-4(fp)
 410b504:	00c00444 	movi	r3,17
 410b508:	10c00005 	stb	r3,0(r2)
        return (0);
 410b50c:	0005883a 	mov	r2,zero
 410b510:	00003a06 	br	410b5fc <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410b514:	0005303a 	rdctl	r2,status
 410b518:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410b51c:	e0fffc17 	ldw	r3,-16(fp)
 410b520:	00bfff84 	movi	r2,-2
 410b524:	1884703a 	and	r2,r3,r2
 410b528:	1001703a 	wrctl	status,r2
  
  return context;
 410b52c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 410b530:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 410b534:	e0bffd03 	ldbu	r2,-12(fp)
 410b538:	10803fd8 	cmpnei	r2,r2,255
 410b53c:	1000031e 	bne	r2,zero,410b54c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 410b540:	d0a73217 	ldw	r2,-25400(gp)
 410b544:	10800c83 	ldbu	r2,50(r2)
 410b548:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 410b54c:	e0fffd03 	ldbu	r3,-12(fp)
 410b550:	008104b4 	movhi	r2,1042
 410b554:	10b12504 	addi	r2,r2,-15212
 410b558:	18c7883a 	add	r3,r3,r3
 410b55c:	18c7883a 	add	r3,r3,r3
 410b560:	10c5883a 	add	r2,r2,r3
 410b564:	10800017 	ldw	r2,0(r2)
 410b568:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 410b56c:	e0bff817 	ldw	r2,-32(fp)
 410b570:	1000091e 	bne	r2,zero,410b598 <OSTaskNameGet+0x120>
 410b574:	e0bff617 	ldw	r2,-40(fp)
 410b578:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410b57c:	e0bff717 	ldw	r2,-36(fp)
 410b580:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 410b584:	e0bfff17 	ldw	r2,-4(fp)
 410b588:	00c010c4 	movi	r3,67
 410b58c:	10c00005 	stb	r3,0(r2)
        return (0);
 410b590:	0005883a 	mov	r2,zero
 410b594:	00001906 	br	410b5fc <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 410b598:	e0bff817 	ldw	r2,-32(fp)
 410b59c:	10800058 	cmpnei	r2,r2,1
 410b5a0:	1000091e 	bne	r2,zero,410b5c8 <OSTaskNameGet+0x150>
 410b5a4:	e0bff617 	ldw	r2,-40(fp)
 410b5a8:	e0bff915 	stw	r2,-28(fp)
 410b5ac:	e0bff917 	ldw	r2,-28(fp)
 410b5b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 410b5b4:	e0bfff17 	ldw	r2,-4(fp)
 410b5b8:	00c010c4 	movi	r3,67
 410b5bc:	10c00005 	stb	r3,0(r2)
        return (0);
 410b5c0:	0005883a 	mov	r2,zero
 410b5c4:	00000d06 	br	410b5fc <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 410b5c8:	e0bff817 	ldw	r2,-32(fp)
 410b5cc:	10801304 	addi	r2,r2,76
 410b5d0:	100b883a 	mov	r5,r2
 410b5d4:	e13ffe17 	ldw	r4,-8(fp)
 410b5d8:	41066780 	call	4106678 <OS_StrCopy>
 410b5dc:	e0bffb05 	stb	r2,-20(fp)
 410b5e0:	e0bff617 	ldw	r2,-40(fp)
 410b5e4:	e0bffa15 	stw	r2,-24(fp)
 410b5e8:	e0bffa17 	ldw	r2,-24(fp)
 410b5ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 410b5f0:	e0bfff17 	ldw	r2,-4(fp)
 410b5f4:	10000005 	stb	zero,0(r2)
    return (len);
 410b5f8:	e0bffb03 	ldbu	r2,-20(fp)
}
 410b5fc:	e037883a 	mov	sp,fp
 410b600:	dfc00117 	ldw	ra,4(sp)
 410b604:	df000017 	ldw	fp,0(sp)
 410b608:	dec00204 	addi	sp,sp,8
 410b60c:	f800283a 	ret

0410b610 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 410b610:	defff304 	addi	sp,sp,-52
 410b614:	dfc00c15 	stw	ra,48(sp)
 410b618:	df000b15 	stw	fp,44(sp)
 410b61c:	df000b04 	addi	fp,sp,44
 410b620:	2005883a 	mov	r2,r4
 410b624:	e17ffe15 	stw	r5,-8(fp)
 410b628:	e1bfff15 	stw	r6,-4(fp)
 410b62c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 410b630:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 410b634:	e0bfff17 	ldw	r2,-4(fp)
 410b638:	10005c26 	beq	r2,zero,410b7ac <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 410b63c:	e0bffd03 	ldbu	r2,-12(fp)
 410b640:	10800570 	cmpltui	r2,r2,21
 410b644:	1000071e 	bne	r2,zero,410b664 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 410b648:	e0bffd03 	ldbu	r2,-12(fp)
 410b64c:	10803fe0 	cmpeqi	r2,r2,255
 410b650:	1000041e 	bne	r2,zero,410b664 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 410b654:	e0bfff17 	ldw	r2,-4(fp)
 410b658:	00c00a84 	movi	r3,42
 410b65c:	10c00005 	stb	r3,0(r2)
            return;
 410b660:	00005306 	br	410b7b0 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 410b664:	e0bffe17 	ldw	r2,-8(fp)
 410b668:	1000041e 	bne	r2,zero,410b67c <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 410b66c:	e0bfff17 	ldw	r2,-4(fp)
 410b670:	00c00304 	movi	r3,12
 410b674:	10c00005 	stb	r3,0(r2)
        return;
 410b678:	00004d06 	br	410b7b0 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 410b67c:	d0a73103 	ldbu	r2,-25404(gp)
 410b680:	10803fcc 	andi	r2,r2,255
 410b684:	10000426 	beq	r2,zero,410b698 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 410b688:	e0bfff17 	ldw	r2,-4(fp)
 410b68c:	00c00484 	movi	r3,18
 410b690:	10c00005 	stb	r3,0(r2)
        return;
 410b694:	00004606 	br	410b7b0 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410b698:	0005303a 	rdctl	r2,status
 410b69c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410b6a0:	e0fffc17 	ldw	r3,-16(fp)
 410b6a4:	00bfff84 	movi	r2,-2
 410b6a8:	1884703a 	and	r2,r3,r2
 410b6ac:	1001703a 	wrctl	status,r2
  
  return context;
 410b6b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 410b6b4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 410b6b8:	e0bffd03 	ldbu	r2,-12(fp)
 410b6bc:	10803fd8 	cmpnei	r2,r2,255
 410b6c0:	1000031e 	bne	r2,zero,410b6d0 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 410b6c4:	d0a73217 	ldw	r2,-25400(gp)
 410b6c8:	10800c83 	ldbu	r2,50(r2)
 410b6cc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 410b6d0:	e0fffd03 	ldbu	r3,-12(fp)
 410b6d4:	008104b4 	movhi	r2,1042
 410b6d8:	10b12504 	addi	r2,r2,-15212
 410b6dc:	18c7883a 	add	r3,r3,r3
 410b6e0:	18c7883a 	add	r3,r3,r3
 410b6e4:	10c5883a 	add	r2,r2,r3
 410b6e8:	10800017 	ldw	r2,0(r2)
 410b6ec:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 410b6f0:	e0bff717 	ldw	r2,-36(fp)
 410b6f4:	1000081e 	bne	r2,zero,410b718 <OSTaskNameSet+0x108>
 410b6f8:	e0bff517 	ldw	r2,-44(fp)
 410b6fc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410b700:	e0bff617 	ldw	r2,-40(fp)
 410b704:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 410b708:	e0bfff17 	ldw	r2,-4(fp)
 410b70c:	00c010c4 	movi	r3,67
 410b710:	10c00005 	stb	r3,0(r2)
        return;
 410b714:	00002606 	br	410b7b0 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 410b718:	e0bff717 	ldw	r2,-36(fp)
 410b71c:	10800058 	cmpnei	r2,r2,1
 410b720:	1000081e 	bne	r2,zero,410b744 <OSTaskNameSet+0x134>
 410b724:	e0bff517 	ldw	r2,-44(fp)
 410b728:	e0bff815 	stw	r2,-32(fp)
 410b72c:	e0bff817 	ldw	r2,-32(fp)
 410b730:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 410b734:	e0bfff17 	ldw	r2,-4(fp)
 410b738:	00c010c4 	movi	r3,67
 410b73c:	10c00005 	stb	r3,0(r2)
        return;
 410b740:	00001b06 	br	410b7b0 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 410b744:	e13ffe17 	ldw	r4,-8(fp)
 410b748:	41066ec0 	call	41066ec <OS_StrLen>
 410b74c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 410b750:	e0bffa03 	ldbu	r2,-24(fp)
 410b754:	10800830 	cmpltui	r2,r2,32
 410b758:	1000081e 	bne	r2,zero,410b77c <OSTaskNameSet+0x16c>
 410b75c:	e0bff517 	ldw	r2,-44(fp)
 410b760:	e0bff915 	stw	r2,-28(fp)
 410b764:	e0bff917 	ldw	r2,-28(fp)
 410b768:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 410b76c:	e0bfff17 	ldw	r2,-4(fp)
 410b770:	00c01044 	movi	r3,65
 410b774:	10c00005 	stb	r3,0(r2)
        return;
 410b778:	00000d06 	br	410b7b0 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 410b77c:	e0bff717 	ldw	r2,-36(fp)
 410b780:	10801304 	addi	r2,r2,76
 410b784:	e17ffe17 	ldw	r5,-8(fp)
 410b788:	1009883a 	mov	r4,r2
 410b78c:	41066780 	call	4106678 <OS_StrCopy>
 410b790:	e0bff517 	ldw	r2,-44(fp)
 410b794:	e0bffb15 	stw	r2,-20(fp)
 410b798:	e0bffb17 	ldw	r2,-20(fp)
 410b79c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 410b7a0:	e0bfff17 	ldw	r2,-4(fp)
 410b7a4:	10000005 	stb	zero,0(r2)
 410b7a8:	00000106 	br	410b7b0 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 410b7ac:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 410b7b0:	e037883a 	mov	sp,fp
 410b7b4:	dfc00117 	ldw	ra,4(sp)
 410b7b8:	df000017 	ldw	fp,0(sp)
 410b7bc:	dec00204 	addi	sp,sp,8
 410b7c0:	f800283a 	ret

0410b7c4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 410b7c4:	defff404 	addi	sp,sp,-48
 410b7c8:	dfc00b15 	stw	ra,44(sp)
 410b7cc:	df000a15 	stw	fp,40(sp)
 410b7d0:	df000a04 	addi	fp,sp,40
 410b7d4:	2005883a 	mov	r2,r4
 410b7d8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 410b7dc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 410b7e0:	e0bfff03 	ldbu	r2,-4(fp)
 410b7e4:	10800530 	cmpltui	r2,r2,20
 410b7e8:	1000021e 	bne	r2,zero,410b7f4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 410b7ec:	00800a84 	movi	r2,42
 410b7f0:	00006406 	br	410b984 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410b7f4:	0005303a 	rdctl	r2,status
 410b7f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410b7fc:	e0fffe17 	ldw	r3,-8(fp)
 410b800:	00bfff84 	movi	r2,-2
 410b804:	1884703a 	and	r2,r3,r2
 410b808:	1001703a 	wrctl	status,r2
  
  return context;
 410b80c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 410b810:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 410b814:	e0ffff03 	ldbu	r3,-4(fp)
 410b818:	008104b4 	movhi	r2,1042
 410b81c:	10b12504 	addi	r2,r2,-15212
 410b820:	18c7883a 	add	r3,r3,r3
 410b824:	18c7883a 	add	r3,r3,r3
 410b828:	10c5883a 	add	r2,r2,r3
 410b82c:	10800017 	ldw	r2,0(r2)
 410b830:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 410b834:	e0bff817 	ldw	r2,-32(fp)
 410b838:	1000061e 	bne	r2,zero,410b854 <OSTaskResume+0x90>
 410b83c:	e0bff617 	ldw	r2,-40(fp)
 410b840:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410b844:	e0bff717 	ldw	r2,-36(fp)
 410b848:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 410b84c:	00801184 	movi	r2,70
 410b850:	00004c06 	br	410b984 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 410b854:	e0bff817 	ldw	r2,-32(fp)
 410b858:	10800058 	cmpnei	r2,r2,1
 410b85c:	1000061e 	bne	r2,zero,410b878 <OSTaskResume+0xb4>
 410b860:	e0bff617 	ldw	r2,-40(fp)
 410b864:	e0bff915 	stw	r2,-28(fp)
 410b868:	e0bff917 	ldw	r2,-28(fp)
 410b86c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 410b870:	008010c4 	movi	r2,67
 410b874:	00004306 	br	410b984 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 410b878:	e0bff817 	ldw	r2,-32(fp)
 410b87c:	10800c03 	ldbu	r2,48(r2)
 410b880:	10803fcc 	andi	r2,r2,255
 410b884:	1080020c 	andi	r2,r2,8
 410b888:	10003926 	beq	r2,zero,410b970 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 410b88c:	e0bff817 	ldw	r2,-32(fp)
 410b890:	10c00c03 	ldbu	r3,48(r2)
 410b894:	00bffdc4 	movi	r2,-9
 410b898:	1884703a 	and	r2,r3,r2
 410b89c:	1007883a 	mov	r3,r2
 410b8a0:	e0bff817 	ldw	r2,-32(fp)
 410b8a4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 410b8a8:	e0bff817 	ldw	r2,-32(fp)
 410b8ac:	10800c03 	ldbu	r2,48(r2)
 410b8b0:	10803fcc 	andi	r2,r2,255
 410b8b4:	1000281e 	bne	r2,zero,410b958 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 410b8b8:	e0bff817 	ldw	r2,-32(fp)
 410b8bc:	10800b8b 	ldhu	r2,46(r2)
 410b8c0:	10bfffcc 	andi	r2,r2,65535
 410b8c4:	10001f1e 	bne	r2,zero,410b944 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 410b8c8:	e0bff817 	ldw	r2,-32(fp)
 410b8cc:	10c00d83 	ldbu	r3,54(r2)
 410b8d0:	d0a72f03 	ldbu	r2,-25412(gp)
 410b8d4:	1884b03a 	or	r2,r3,r2
 410b8d8:	d0a72f05 	stb	r2,-25412(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 410b8dc:	e0bff817 	ldw	r2,-32(fp)
 410b8e0:	10800d03 	ldbu	r2,52(r2)
 410b8e4:	10c03fcc 	andi	r3,r2,255
 410b8e8:	e0bff817 	ldw	r2,-32(fp)
 410b8ec:	10800d03 	ldbu	r2,52(r2)
 410b8f0:	11003fcc 	andi	r4,r2,255
 410b8f4:	d0a72f44 	addi	r2,gp,-25411
 410b8f8:	2085883a 	add	r2,r4,r2
 410b8fc:	11000003 	ldbu	r4,0(r2)
 410b900:	e0bff817 	ldw	r2,-32(fp)
 410b904:	10800d43 	ldbu	r2,53(r2)
 410b908:	2084b03a 	or	r2,r4,r2
 410b90c:	1009883a 	mov	r4,r2
 410b910:	d0a72f44 	addi	r2,gp,-25411
 410b914:	1885883a 	add	r2,r3,r2
 410b918:	11000005 	stb	r4,0(r2)
 410b91c:	e0bff617 	ldw	r2,-40(fp)
 410b920:	e0bffa15 	stw	r2,-24(fp)
 410b924:	e0bffa17 	ldw	r2,-24(fp)
 410b928:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 410b92c:	d0a72343 	ldbu	r2,-25459(gp)
 410b930:	10803fcc 	andi	r2,r2,255
 410b934:	10800058 	cmpnei	r2,r2,1
 410b938:	10000b1e 	bne	r2,zero,410b968 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 410b93c:	41065340 	call	4106534 <OS_Sched>
 410b940:	00000906 	br	410b968 <OSTaskResume+0x1a4>
 410b944:	e0bff617 	ldw	r2,-40(fp)
 410b948:	e0bffb15 	stw	r2,-20(fp)
 410b94c:	e0bffb17 	ldw	r2,-20(fp)
 410b950:	1001703a 	wrctl	status,r2
 410b954:	00000406 	br	410b968 <OSTaskResume+0x1a4>
 410b958:	e0bff617 	ldw	r2,-40(fp)
 410b95c:	e0bffc15 	stw	r2,-16(fp)
 410b960:	e0bffc17 	ldw	r2,-16(fp)
 410b964:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 410b968:	0005883a 	mov	r2,zero
 410b96c:	00000506 	br	410b984 <OSTaskResume+0x1c0>
 410b970:	e0bff617 	ldw	r2,-40(fp)
 410b974:	e0bffd15 	stw	r2,-12(fp)
 410b978:	e0bffd17 	ldw	r2,-12(fp)
 410b97c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 410b980:	00801104 	movi	r2,68
}
 410b984:	e037883a 	mov	sp,fp
 410b988:	dfc00117 	ldw	ra,4(sp)
 410b98c:	df000017 	ldw	fp,0(sp)
 410b990:	dec00204 	addi	sp,sp,8
 410b994:	f800283a 	ret

0410b998 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 410b998:	defff304 	addi	sp,sp,-52
 410b99c:	df000c15 	stw	fp,48(sp)
 410b9a0:	df000c04 	addi	fp,sp,48
 410b9a4:	2005883a 	mov	r2,r4
 410b9a8:	e17fff15 	stw	r5,-4(fp)
 410b9ac:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 410b9b0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 410b9b4:	e0bffe03 	ldbu	r2,-8(fp)
 410b9b8:	10800570 	cmpltui	r2,r2,21
 410b9bc:	1000051e 	bne	r2,zero,410b9d4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 410b9c0:	e0bffe03 	ldbu	r2,-8(fp)
 410b9c4:	10803fe0 	cmpeqi	r2,r2,255
 410b9c8:	1000021e 	bne	r2,zero,410b9d4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 410b9cc:	00800a84 	movi	r2,42
 410b9d0:	00005d06 	br	410bb48 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 410b9d4:	e0bfff17 	ldw	r2,-4(fp)
 410b9d8:	1000021e 	bne	r2,zero,410b9e4 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 410b9dc:	00800244 	movi	r2,9
 410b9e0:	00005906 	br	410bb48 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 410b9e4:	e0bfff17 	ldw	r2,-4(fp)
 410b9e8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 410b9ec:	e0bfff17 	ldw	r2,-4(fp)
 410b9f0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410b9f4:	0005303a 	rdctl	r2,status
 410b9f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410b9fc:	e0fffd17 	ldw	r3,-12(fp)
 410ba00:	00bfff84 	movi	r2,-2
 410ba04:	1884703a 	and	r2,r3,r2
 410ba08:	1001703a 	wrctl	status,r2
  
  return context;
 410ba0c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 410ba10:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 410ba14:	e0bffe03 	ldbu	r2,-8(fp)
 410ba18:	10803fd8 	cmpnei	r2,r2,255
 410ba1c:	1000031e 	bne	r2,zero,410ba2c <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 410ba20:	d0a73217 	ldw	r2,-25400(gp)
 410ba24:	10800c83 	ldbu	r2,50(r2)
 410ba28:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 410ba2c:	e0fffe03 	ldbu	r3,-8(fp)
 410ba30:	008104b4 	movhi	r2,1042
 410ba34:	10b12504 	addi	r2,r2,-15212
 410ba38:	18c7883a 	add	r3,r3,r3
 410ba3c:	18c7883a 	add	r3,r3,r3
 410ba40:	10c5883a 	add	r2,r2,r3
 410ba44:	10800017 	ldw	r2,0(r2)
 410ba48:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 410ba4c:	e0bff817 	ldw	r2,-32(fp)
 410ba50:	1000061e 	bne	r2,zero,410ba6c <OSTaskStkChk+0xd4>
 410ba54:	e0bff617 	ldw	r2,-40(fp)
 410ba58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410ba5c:	e0bff717 	ldw	r2,-36(fp)
 410ba60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 410ba64:	008010c4 	movi	r2,67
 410ba68:	00003706 	br	410bb48 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 410ba6c:	e0bff817 	ldw	r2,-32(fp)
 410ba70:	10800058 	cmpnei	r2,r2,1
 410ba74:	1000061e 	bne	r2,zero,410ba90 <OSTaskStkChk+0xf8>
 410ba78:	e0bff617 	ldw	r2,-40(fp)
 410ba7c:	e0bff915 	stw	r2,-28(fp)
 410ba80:	e0bff917 	ldw	r2,-28(fp)
 410ba84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 410ba88:	008010c4 	movi	r2,67
 410ba8c:	00002e06 	br	410bb48 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 410ba90:	e0bff817 	ldw	r2,-32(fp)
 410ba94:	1080040b 	ldhu	r2,16(r2)
 410ba98:	10bfffcc 	andi	r2,r2,65535
 410ba9c:	1080004c 	andi	r2,r2,1
 410baa0:	1000061e 	bne	r2,zero,410babc <OSTaskStkChk+0x124>
 410baa4:	e0bff617 	ldw	r2,-40(fp)
 410baa8:	e0bffa15 	stw	r2,-24(fp)
 410baac:	e0bffa17 	ldw	r2,-24(fp)
 410bab0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 410bab4:	00801144 	movi	r2,69
 410bab8:	00002306 	br	410bb48 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 410babc:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 410bac0:	e0bff817 	ldw	r2,-32(fp)
 410bac4:	10800317 	ldw	r2,12(r2)
 410bac8:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 410bacc:	e0bff817 	ldw	r2,-32(fp)
 410bad0:	10800217 	ldw	r2,8(r2)
 410bad4:	e0bff415 	stw	r2,-48(fp)
 410bad8:	e0bff617 	ldw	r2,-40(fp)
 410badc:	e0bffb15 	stw	r2,-20(fp)
 410bae0:	e0bffb17 	ldw	r2,-20(fp)
 410bae4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 410bae8:	00000306 	br	410baf8 <OSTaskStkChk+0x160>
        nfree++;
 410baec:	e0bff517 	ldw	r2,-44(fp)
 410baf0:	10800044 	addi	r2,r2,1
 410baf4:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 410baf8:	e0bff417 	ldw	r2,-48(fp)
 410bafc:	10c00104 	addi	r3,r2,4
 410bb00:	e0fff415 	stw	r3,-48(fp)
 410bb04:	10800017 	ldw	r2,0(r2)
 410bb08:	103ff826 	beq	r2,zero,410baec <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 410bb0c:	e0bff517 	ldw	r2,-44(fp)
 410bb10:	1085883a 	add	r2,r2,r2
 410bb14:	1085883a 	add	r2,r2,r2
 410bb18:	1007883a 	mov	r3,r2
 410bb1c:	e0bfff17 	ldw	r2,-4(fp)
 410bb20:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 410bb24:	e0fffc17 	ldw	r3,-16(fp)
 410bb28:	e0bff517 	ldw	r2,-44(fp)
 410bb2c:	1885c83a 	sub	r2,r3,r2
 410bb30:	1085883a 	add	r2,r2,r2
 410bb34:	1085883a 	add	r2,r2,r2
 410bb38:	1007883a 	mov	r3,r2
 410bb3c:	e0bfff17 	ldw	r2,-4(fp)
 410bb40:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 410bb44:	0005883a 	mov	r2,zero
}
 410bb48:	e037883a 	mov	sp,fp
 410bb4c:	df000017 	ldw	fp,0(sp)
 410bb50:	dec00104 	addi	sp,sp,4
 410bb54:	f800283a 	ret

0410bb58 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 410bb58:	defff504 	addi	sp,sp,-44
 410bb5c:	dfc00a15 	stw	ra,40(sp)
 410bb60:	df000915 	stw	fp,36(sp)
 410bb64:	df000904 	addi	fp,sp,36
 410bb68:	2005883a 	mov	r2,r4
 410bb6c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 410bb70:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 410bb74:	e0bfff03 	ldbu	r2,-4(fp)
 410bb78:	10800518 	cmpnei	r2,r2,20
 410bb7c:	1000021e 	bne	r2,zero,410bb88 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 410bb80:	008011c4 	movi	r2,71
 410bb84:	00006806 	br	410bd28 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 410bb88:	e0bfff03 	ldbu	r2,-4(fp)
 410bb8c:	10800530 	cmpltui	r2,r2,20
 410bb90:	1000051e 	bne	r2,zero,410bba8 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 410bb94:	e0bfff03 	ldbu	r2,-4(fp)
 410bb98:	10803fe0 	cmpeqi	r2,r2,255
 410bb9c:	1000021e 	bne	r2,zero,410bba8 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 410bba0:	00800a84 	movi	r2,42
 410bba4:	00006006 	br	410bd28 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410bba8:	0005303a 	rdctl	r2,status
 410bbac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410bbb0:	e0fffe17 	ldw	r3,-8(fp)
 410bbb4:	00bfff84 	movi	r2,-2
 410bbb8:	1884703a 	and	r2,r3,r2
 410bbbc:	1001703a 	wrctl	status,r2
  
  return context;
 410bbc0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 410bbc4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 410bbc8:	e0bfff03 	ldbu	r2,-4(fp)
 410bbcc:	10803fd8 	cmpnei	r2,r2,255
 410bbd0:	1000061e 	bne	r2,zero,410bbec <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 410bbd4:	d0a73217 	ldw	r2,-25400(gp)
 410bbd8:	10800c83 	ldbu	r2,50(r2)
 410bbdc:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 410bbe0:	00800044 	movi	r2,1
 410bbe4:	e0bff705 	stb	r2,-36(fp)
 410bbe8:	00000906 	br	410bc10 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 410bbec:	d0a73217 	ldw	r2,-25400(gp)
 410bbf0:	10800c83 	ldbu	r2,50(r2)
 410bbf4:	10c03fcc 	andi	r3,r2,255
 410bbf8:	e0bfff03 	ldbu	r2,-4(fp)
 410bbfc:	1880031e 	bne	r3,r2,410bc0c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 410bc00:	00800044 	movi	r2,1
 410bc04:	e0bff705 	stb	r2,-36(fp)
 410bc08:	00000106 	br	410bc10 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 410bc0c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 410bc10:	e0ffff03 	ldbu	r3,-4(fp)
 410bc14:	008104b4 	movhi	r2,1042
 410bc18:	10b12504 	addi	r2,r2,-15212
 410bc1c:	18c7883a 	add	r3,r3,r3
 410bc20:	18c7883a 	add	r3,r3,r3
 410bc24:	10c5883a 	add	r2,r2,r3
 410bc28:	10800017 	ldw	r2,0(r2)
 410bc2c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 410bc30:	e0bffa17 	ldw	r2,-24(fp)
 410bc34:	1000061e 	bne	r2,zero,410bc50 <OSTaskSuspend+0xf8>
 410bc38:	e0bff817 	ldw	r2,-32(fp)
 410bc3c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410bc40:	e0bff917 	ldw	r2,-28(fp)
 410bc44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 410bc48:	00801204 	movi	r2,72
 410bc4c:	00003606 	br	410bd28 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 410bc50:	e0bffa17 	ldw	r2,-24(fp)
 410bc54:	10800058 	cmpnei	r2,r2,1
 410bc58:	1000061e 	bne	r2,zero,410bc74 <OSTaskSuspend+0x11c>
 410bc5c:	e0bff817 	ldw	r2,-32(fp)
 410bc60:	e0bffb15 	stw	r2,-20(fp)
 410bc64:	e0bffb17 	ldw	r2,-20(fp)
 410bc68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 410bc6c:	008010c4 	movi	r2,67
 410bc70:	00002d06 	br	410bd28 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 410bc74:	e0bffa17 	ldw	r2,-24(fp)
 410bc78:	10800d03 	ldbu	r2,52(r2)
 410bc7c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 410bc80:	e0fffd03 	ldbu	r3,-12(fp)
 410bc84:	e13ffd03 	ldbu	r4,-12(fp)
 410bc88:	d0a72f44 	addi	r2,gp,-25411
 410bc8c:	2085883a 	add	r2,r4,r2
 410bc90:	10800003 	ldbu	r2,0(r2)
 410bc94:	1009883a 	mov	r4,r2
 410bc98:	e0bffa17 	ldw	r2,-24(fp)
 410bc9c:	10800d43 	ldbu	r2,53(r2)
 410bca0:	0084303a 	nor	r2,zero,r2
 410bca4:	2084703a 	and	r2,r4,r2
 410bca8:	1009883a 	mov	r4,r2
 410bcac:	d0a72f44 	addi	r2,gp,-25411
 410bcb0:	1885883a 	add	r2,r3,r2
 410bcb4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 410bcb8:	e0fffd03 	ldbu	r3,-12(fp)
 410bcbc:	d0a72f44 	addi	r2,gp,-25411
 410bcc0:	1885883a 	add	r2,r3,r2
 410bcc4:	10800003 	ldbu	r2,0(r2)
 410bcc8:	10803fcc 	andi	r2,r2,255
 410bccc:	1000071e 	bne	r2,zero,410bcec <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 410bcd0:	e0bffa17 	ldw	r2,-24(fp)
 410bcd4:	10800d83 	ldbu	r2,54(r2)
 410bcd8:	0084303a 	nor	r2,zero,r2
 410bcdc:	1007883a 	mov	r3,r2
 410bce0:	d0a72f03 	ldbu	r2,-25412(gp)
 410bce4:	1884703a 	and	r2,r3,r2
 410bce8:	d0a72f05 	stb	r2,-25412(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 410bcec:	e0bffa17 	ldw	r2,-24(fp)
 410bcf0:	10800c03 	ldbu	r2,48(r2)
 410bcf4:	10800214 	ori	r2,r2,8
 410bcf8:	1007883a 	mov	r3,r2
 410bcfc:	e0bffa17 	ldw	r2,-24(fp)
 410bd00:	10c00c05 	stb	r3,48(r2)
 410bd04:	e0bff817 	ldw	r2,-32(fp)
 410bd08:	e0bffc15 	stw	r2,-16(fp)
 410bd0c:	e0bffc17 	ldw	r2,-16(fp)
 410bd10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 410bd14:	e0bff703 	ldbu	r2,-36(fp)
 410bd18:	10800058 	cmpnei	r2,r2,1
 410bd1c:	1000011e 	bne	r2,zero,410bd24 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 410bd20:	41065340 	call	4106534 <OS_Sched>
    }
    return (OS_ERR_NONE);
 410bd24:	0005883a 	mov	r2,zero
}
 410bd28:	e037883a 	mov	sp,fp
 410bd2c:	dfc00117 	ldw	ra,4(sp)
 410bd30:	df000017 	ldw	fp,0(sp)
 410bd34:	dec00204 	addi	sp,sp,8
 410bd38:	f800283a 	ret

0410bd3c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 410bd3c:	defff604 	addi	sp,sp,-40
 410bd40:	dfc00915 	stw	ra,36(sp)
 410bd44:	df000815 	stw	fp,32(sp)
 410bd48:	df000804 	addi	fp,sp,32
 410bd4c:	2005883a 	mov	r2,r4
 410bd50:	e17fff15 	stw	r5,-4(fp)
 410bd54:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 410bd58:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 410bd5c:	e0bffe03 	ldbu	r2,-8(fp)
 410bd60:	10800570 	cmpltui	r2,r2,21
 410bd64:	1000051e 	bne	r2,zero,410bd7c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 410bd68:	e0bffe03 	ldbu	r2,-8(fp)
 410bd6c:	10803fe0 	cmpeqi	r2,r2,255
 410bd70:	1000021e 	bne	r2,zero,410bd7c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 410bd74:	00800a84 	movi	r2,42
 410bd78:	00003406 	br	410be4c <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 410bd7c:	e0bfff17 	ldw	r2,-4(fp)
 410bd80:	1000021e 	bne	r2,zero,410bd8c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 410bd84:	00800244 	movi	r2,9
 410bd88:	00003006 	br	410be4c <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410bd8c:	0005303a 	rdctl	r2,status
 410bd90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410bd94:	e0fffd17 	ldw	r3,-12(fp)
 410bd98:	00bfff84 	movi	r2,-2
 410bd9c:	1884703a 	and	r2,r3,r2
 410bda0:	1001703a 	wrctl	status,r2
  
  return context;
 410bda4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 410bda8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 410bdac:	e0bffe03 	ldbu	r2,-8(fp)
 410bdb0:	10803fd8 	cmpnei	r2,r2,255
 410bdb4:	1000031e 	bne	r2,zero,410bdc4 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 410bdb8:	d0a73217 	ldw	r2,-25400(gp)
 410bdbc:	10800c83 	ldbu	r2,50(r2)
 410bdc0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 410bdc4:	e0fffe03 	ldbu	r3,-8(fp)
 410bdc8:	008104b4 	movhi	r2,1042
 410bdcc:	10b12504 	addi	r2,r2,-15212
 410bdd0:	18c7883a 	add	r3,r3,r3
 410bdd4:	18c7883a 	add	r3,r3,r3
 410bdd8:	10c5883a 	add	r2,r2,r3
 410bddc:	10800017 	ldw	r2,0(r2)
 410bde0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 410bde4:	e0bffa17 	ldw	r2,-24(fp)
 410bde8:	1000061e 	bne	r2,zero,410be04 <OSTaskQuery+0xc8>
 410bdec:	e0bff817 	ldw	r2,-32(fp)
 410bdf0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410bdf4:	e0bff917 	ldw	r2,-28(fp)
 410bdf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 410bdfc:	00800a44 	movi	r2,41
 410be00:	00001206 	br	410be4c <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 410be04:	e0bffa17 	ldw	r2,-24(fp)
 410be08:	10800058 	cmpnei	r2,r2,1
 410be0c:	1000061e 	bne	r2,zero,410be28 <OSTaskQuery+0xec>
 410be10:	e0bff817 	ldw	r2,-32(fp)
 410be14:	e0bffb15 	stw	r2,-20(fp)
 410be18:	e0bffb17 	ldw	r2,-20(fp)
 410be1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 410be20:	008010c4 	movi	r2,67
 410be24:	00000906 	br	410be4c <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 410be28:	01801b04 	movi	r6,108
 410be2c:	e17ffa17 	ldw	r5,-24(fp)
 410be30:	e13fff17 	ldw	r4,-4(fp)
 410be34:	41064cc0 	call	41064cc <OS_MemCopy>
 410be38:	e0bff817 	ldw	r2,-32(fp)
 410be3c:	e0bffc15 	stw	r2,-16(fp)
 410be40:	e0bffc17 	ldw	r2,-16(fp)
 410be44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 410be48:	0005883a 	mov	r2,zero
}
 410be4c:	e037883a 	mov	sp,fp
 410be50:	dfc00117 	ldw	ra,4(sp)
 410be54:	df000017 	ldw	fp,0(sp)
 410be58:	dec00204 	addi	sp,sp,8
 410be5c:	f800283a 	ret

0410be60 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 410be60:	defffc04 	addi	sp,sp,-16
 410be64:	df000315 	stw	fp,12(sp)
 410be68:	df000304 	addi	fp,sp,12
 410be6c:	e13ffd15 	stw	r4,-12(fp)
 410be70:	e17ffe15 	stw	r5,-8(fp)
 410be74:	3005883a 	mov	r2,r6
 410be78:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 410be7c:	e0bfff0b 	ldhu	r2,-4(fp)
 410be80:	1080004c 	andi	r2,r2,1
 410be84:	10000d26 	beq	r2,zero,410bebc <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 410be88:	e0bfff0b 	ldhu	r2,-4(fp)
 410be8c:	1080008c 	andi	r2,r2,2
 410be90:	10000a26 	beq	r2,zero,410bebc <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 410be94:	00000706 	br	410beb4 <OS_TaskStkClr+0x54>
                size--;
 410be98:	e0bffe17 	ldw	r2,-8(fp)
 410be9c:	10bfffc4 	addi	r2,r2,-1
 410bea0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 410bea4:	e0bffd17 	ldw	r2,-12(fp)
 410bea8:	10c00104 	addi	r3,r2,4
 410beac:	e0fffd15 	stw	r3,-12(fp)
 410beb0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 410beb4:	e0bffe17 	ldw	r2,-8(fp)
 410beb8:	103ff71e 	bne	r2,zero,410be98 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 410bebc:	0001883a 	nop
 410bec0:	e037883a 	mov	sp,fp
 410bec4:	df000017 	ldw	fp,0(sp)
 410bec8:	dec00104 	addi	sp,sp,4
 410becc:	f800283a 	ret

0410bed0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 410bed0:	defff904 	addi	sp,sp,-28
 410bed4:	dfc00615 	stw	ra,24(sp)
 410bed8:	df000515 	stw	fp,20(sp)
 410bedc:	df000504 	addi	fp,sp,20
 410bee0:	2005883a 	mov	r2,r4
 410bee4:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 410bee8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 410beec:	d0a73103 	ldbu	r2,-25404(gp)
 410bef0:	10803fcc 	andi	r2,r2,255
 410bef4:	1000311e 	bne	r2,zero,410bfbc <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 410bef8:	e0bfff0b 	ldhu	r2,-4(fp)
 410befc:	10003026 	beq	r2,zero,410bfc0 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410bf00:	0005303a 	rdctl	r2,status
 410bf04:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410bf08:	e0fffe17 	ldw	r3,-8(fp)
 410bf0c:	00bfff84 	movi	r2,-2
 410bf10:	1884703a 	and	r2,r3,r2
 410bf14:	1001703a 	wrctl	status,r2
  
  return context;
 410bf18:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 410bf1c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 410bf20:	d0a73217 	ldw	r2,-25400(gp)
 410bf24:	10800d03 	ldbu	r2,52(r2)
 410bf28:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 410bf2c:	e0fffd03 	ldbu	r3,-12(fp)
 410bf30:	e13ffd03 	ldbu	r4,-12(fp)
 410bf34:	d0a72f44 	addi	r2,gp,-25411
 410bf38:	2085883a 	add	r2,r4,r2
 410bf3c:	10800003 	ldbu	r2,0(r2)
 410bf40:	1009883a 	mov	r4,r2
 410bf44:	d0a73217 	ldw	r2,-25400(gp)
 410bf48:	10800d43 	ldbu	r2,53(r2)
 410bf4c:	0084303a 	nor	r2,zero,r2
 410bf50:	2084703a 	and	r2,r4,r2
 410bf54:	1009883a 	mov	r4,r2
 410bf58:	d0a72f44 	addi	r2,gp,-25411
 410bf5c:	1885883a 	add	r2,r3,r2
 410bf60:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 410bf64:	e0fffd03 	ldbu	r3,-12(fp)
 410bf68:	d0a72f44 	addi	r2,gp,-25411
 410bf6c:	1885883a 	add	r2,r3,r2
 410bf70:	10800003 	ldbu	r2,0(r2)
 410bf74:	10803fcc 	andi	r2,r2,255
 410bf78:	1000071e 	bne	r2,zero,410bf98 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 410bf7c:	d0a73217 	ldw	r2,-25400(gp)
 410bf80:	10800d83 	ldbu	r2,54(r2)
 410bf84:	0084303a 	nor	r2,zero,r2
 410bf88:	1007883a 	mov	r3,r2
 410bf8c:	d0a72f03 	ldbu	r2,-25412(gp)
 410bf90:	1884703a 	and	r2,r3,r2
 410bf94:	d0a72f05 	stb	r2,-25412(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 410bf98:	d0a73217 	ldw	r2,-25400(gp)
 410bf9c:	e0ffff0b 	ldhu	r3,-4(fp)
 410bfa0:	10c00b8d 	sth	r3,46(r2)
 410bfa4:	e0bffb17 	ldw	r2,-20(fp)
 410bfa8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410bfac:	e0bffc17 	ldw	r2,-16(fp)
 410bfb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 410bfb4:	41065340 	call	4106534 <OS_Sched>
 410bfb8:	00000106 	br	410bfc0 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 410bfbc:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 410bfc0:	e037883a 	mov	sp,fp
 410bfc4:	dfc00117 	ldw	ra,4(sp)
 410bfc8:	df000017 	ldw	fp,0(sp)
 410bfcc:	dec00204 	addi	sp,sp,8
 410bfd0:	f800283a 	ret

0410bfd4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 410bfd4:	defff704 	addi	sp,sp,-36
 410bfd8:	dfc00815 	stw	ra,32(sp)
 410bfdc:	df000715 	stw	fp,28(sp)
 410bfe0:	dc000615 	stw	r16,24(sp)
 410bfe4:	df000704 	addi	fp,sp,28
 410bfe8:	2011883a 	mov	r8,r4
 410bfec:	2809883a 	mov	r4,r5
 410bff0:	3007883a 	mov	r3,r6
 410bff4:	3805883a 	mov	r2,r7
 410bff8:	e23ffb05 	stb	r8,-20(fp)
 410bffc:	e13ffc05 	stb	r4,-16(fp)
 410c000:	e0fffd05 	stb	r3,-12(fp)
 410c004:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 410c008:	d0a73103 	ldbu	r2,-25404(gp)
 410c00c:	10803fcc 	andi	r2,r2,255
 410c010:	10000226 	beq	r2,zero,410c01c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 410c014:	00801544 	movi	r2,85
 410c018:	00003d06 	br	410c110 <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 410c01c:	e0bffb03 	ldbu	r2,-20(fp)
 410c020:	1000081e 	bne	r2,zero,410c044 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 410c024:	e0bffc03 	ldbu	r2,-16(fp)
 410c028:	1000061e 	bne	r2,zero,410c044 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 410c02c:	e0bffd03 	ldbu	r2,-12(fp)
 410c030:	1000041e 	bne	r2,zero,410c044 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 410c034:	e0bffe0b 	ldhu	r2,-8(fp)
 410c038:	1000021e 	bne	r2,zero,410c044 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 410c03c:	00801504 	movi	r2,84
 410c040:	00003306 	br	410c110 <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
 410c044:	e0bffc03 	ldbu	r2,-16(fp)
 410c048:	10800f30 	cmpltui	r2,r2,60
 410c04c:	1000021e 	bne	r2,zero,410c058 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 410c050:	00801444 	movi	r2,81
 410c054:	00002e06 	br	410c110 <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
 410c058:	e0bffd03 	ldbu	r2,-12(fp)
 410c05c:	10800f30 	cmpltui	r2,r2,60
 410c060:	1000021e 	bne	r2,zero,410c06c <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 410c064:	00801484 	movi	r2,82
 410c068:	00002906 	br	410c110 <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
 410c06c:	e0bffe0b 	ldhu	r2,-8(fp)
 410c070:	1080fa30 	cmpltui	r2,r2,1000
 410c074:	1000021e 	bne	r2,zero,410c080 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 410c078:	008014c4 	movi	r2,83
 410c07c:	00002406 	br	410c110 <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 410c080:	e0bffb03 	ldbu	r2,-20(fp)
 410c084:	10c38424 	muli	r3,r2,3600
 410c088:	e0bffc03 	ldbu	r2,-16(fp)
 410c08c:	10800f24 	muli	r2,r2,60
 410c090:	1887883a 	add	r3,r3,r2
 410c094:	e0bffd03 	ldbu	r2,-12(fp)
 410c098:	1885883a 	add	r2,r3,r2
 410c09c:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 410c0a0:	e0bffe0b 	ldhu	r2,-8(fp)
 410c0a4:	1080fa24 	muli	r2,r2,1000
 410c0a8:	0140fa04 	movi	r5,1000
 410c0ac:	1009883a 	mov	r4,r2
 410c0b0:	4100b180 	call	4100b18 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 410c0b4:	8085883a 	add	r2,r16,r2
 410c0b8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 410c0bc:	e0bffa17 	ldw	r2,-24(fp)
 410c0c0:	1004d43a 	srli	r2,r2,16
 410c0c4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 410c0c8:	e0bffa17 	ldw	r2,-24(fp)
 410c0cc:	10bfffcc 	andi	r2,r2,65535
 410c0d0:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 410c0d4:	e0bffa17 	ldw	r2,-24(fp)
 410c0d8:	10bfffcc 	andi	r2,r2,65535
 410c0dc:	1009883a 	mov	r4,r2
 410c0e0:	410bed00 	call	410bed0 <OSTimeDly>
    while (loops > 0) {
 410c0e4:	00000706 	br	410c104 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
 410c0e8:	01200014 	movui	r4,32768
 410c0ec:	410bed00 	call	410bed0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 410c0f0:	01200014 	movui	r4,32768
 410c0f4:	410bed00 	call	410bed0 <OSTimeDly>
        loops--;
 410c0f8:	e0bff90b 	ldhu	r2,-28(fp)
 410c0fc:	10bfffc4 	addi	r2,r2,-1
 410c100:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 410c104:	e0bff90b 	ldhu	r2,-28(fp)
 410c108:	103ff71e 	bne	r2,zero,410c0e8 <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 410c10c:	0005883a 	mov	r2,zero
}
 410c110:	e6ffff04 	addi	sp,fp,-4
 410c114:	dfc00217 	ldw	ra,8(sp)
 410c118:	df000117 	ldw	fp,4(sp)
 410c11c:	dc000017 	ldw	r16,0(sp)
 410c120:	dec00304 	addi	sp,sp,12
 410c124:	f800283a 	ret

0410c128 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 410c128:	defff504 	addi	sp,sp,-44
 410c12c:	dfc00a15 	stw	ra,40(sp)
 410c130:	df000915 	stw	fp,36(sp)
 410c134:	df000904 	addi	fp,sp,36
 410c138:	2005883a 	mov	r2,r4
 410c13c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 410c140:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 410c144:	e0bfff03 	ldbu	r2,-4(fp)
 410c148:	10800530 	cmpltui	r2,r2,20
 410c14c:	1000021e 	bne	r2,zero,410c158 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 410c150:	00800a84 	movi	r2,42
 410c154:	00006406 	br	410c2e8 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410c158:	0005303a 	rdctl	r2,status
 410c15c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410c160:	e0fffe17 	ldw	r3,-8(fp)
 410c164:	00bfff84 	movi	r2,-2
 410c168:	1884703a 	and	r2,r3,r2
 410c16c:	1001703a 	wrctl	status,r2
  
  return context;
 410c170:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 410c174:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 410c178:	e0ffff03 	ldbu	r3,-4(fp)
 410c17c:	008104b4 	movhi	r2,1042
 410c180:	10b12504 	addi	r2,r2,-15212
 410c184:	18c7883a 	add	r3,r3,r3
 410c188:	18c7883a 	add	r3,r3,r3
 410c18c:	10c5883a 	add	r2,r2,r3
 410c190:	10800017 	ldw	r2,0(r2)
 410c194:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 410c198:	e0bff917 	ldw	r2,-28(fp)
 410c19c:	1000061e 	bne	r2,zero,410c1b8 <OSTimeDlyResume+0x90>
 410c1a0:	e0bff717 	ldw	r2,-36(fp)
 410c1a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410c1a8:	e0bff817 	ldw	r2,-32(fp)
 410c1ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 410c1b0:	008010c4 	movi	r2,67
 410c1b4:	00004c06 	br	410c2e8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 410c1b8:	e0bff917 	ldw	r2,-28(fp)
 410c1bc:	10800058 	cmpnei	r2,r2,1
 410c1c0:	1000061e 	bne	r2,zero,410c1dc <OSTimeDlyResume+0xb4>
 410c1c4:	e0bff717 	ldw	r2,-36(fp)
 410c1c8:	e0bffa15 	stw	r2,-24(fp)
 410c1cc:	e0bffa17 	ldw	r2,-24(fp)
 410c1d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 410c1d4:	008010c4 	movi	r2,67
 410c1d8:	00004306 	br	410c2e8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 410c1dc:	e0bff917 	ldw	r2,-28(fp)
 410c1e0:	10800b8b 	ldhu	r2,46(r2)
 410c1e4:	10bfffcc 	andi	r2,r2,65535
 410c1e8:	1000061e 	bne	r2,zero,410c204 <OSTimeDlyResume+0xdc>
 410c1ec:	e0bff717 	ldw	r2,-36(fp)
 410c1f0:	e0bffb15 	stw	r2,-20(fp)
 410c1f4:	e0bffb17 	ldw	r2,-20(fp)
 410c1f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 410c1fc:	00801404 	movi	r2,80
 410c200:	00003906 	br	410c2e8 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 410c204:	e0bff917 	ldw	r2,-28(fp)
 410c208:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 410c20c:	e0bff917 	ldw	r2,-28(fp)
 410c210:	10800c03 	ldbu	r2,48(r2)
 410c214:	10803fcc 	andi	r2,r2,255
 410c218:	10800dcc 	andi	r2,r2,55
 410c21c:	10000b26 	beq	r2,zero,410c24c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 410c220:	e0bff917 	ldw	r2,-28(fp)
 410c224:	10c00c03 	ldbu	r3,48(r2)
 410c228:	00bff204 	movi	r2,-56
 410c22c:	1884703a 	and	r2,r3,r2
 410c230:	1007883a 	mov	r3,r2
 410c234:	e0bff917 	ldw	r2,-28(fp)
 410c238:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 410c23c:	e0bff917 	ldw	r2,-28(fp)
 410c240:	00c00044 	movi	r3,1
 410c244:	10c00c45 	stb	r3,49(r2)
 410c248:	00000206 	br	410c254 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 410c24c:	e0bff917 	ldw	r2,-28(fp)
 410c250:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 410c254:	e0bff917 	ldw	r2,-28(fp)
 410c258:	10800c03 	ldbu	r2,48(r2)
 410c25c:	10803fcc 	andi	r2,r2,255
 410c260:	1080020c 	andi	r2,r2,8
 410c264:	10001b1e 	bne	r2,zero,410c2d4 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 410c268:	e0bff917 	ldw	r2,-28(fp)
 410c26c:	10c00d83 	ldbu	r3,54(r2)
 410c270:	d0a72f03 	ldbu	r2,-25412(gp)
 410c274:	1884b03a 	or	r2,r3,r2
 410c278:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 410c27c:	e0bff917 	ldw	r2,-28(fp)
 410c280:	10800d03 	ldbu	r2,52(r2)
 410c284:	10c03fcc 	andi	r3,r2,255
 410c288:	e0bff917 	ldw	r2,-28(fp)
 410c28c:	10800d03 	ldbu	r2,52(r2)
 410c290:	11003fcc 	andi	r4,r2,255
 410c294:	d0a72f44 	addi	r2,gp,-25411
 410c298:	2085883a 	add	r2,r4,r2
 410c29c:	11000003 	ldbu	r4,0(r2)
 410c2a0:	e0bff917 	ldw	r2,-28(fp)
 410c2a4:	10800d43 	ldbu	r2,53(r2)
 410c2a8:	2084b03a 	or	r2,r4,r2
 410c2ac:	1009883a 	mov	r4,r2
 410c2b0:	d0a72f44 	addi	r2,gp,-25411
 410c2b4:	1885883a 	add	r2,r3,r2
 410c2b8:	11000005 	stb	r4,0(r2)
 410c2bc:	e0bff717 	ldw	r2,-36(fp)
 410c2c0:	e0bffc15 	stw	r2,-16(fp)
 410c2c4:	e0bffc17 	ldw	r2,-16(fp)
 410c2c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 410c2cc:	41065340 	call	4106534 <OS_Sched>
 410c2d0:	00000406 	br	410c2e4 <OSTimeDlyResume+0x1bc>
 410c2d4:	e0bff717 	ldw	r2,-36(fp)
 410c2d8:	e0bffd15 	stw	r2,-12(fp)
 410c2dc:	e0bffd17 	ldw	r2,-12(fp)
 410c2e0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 410c2e4:	0005883a 	mov	r2,zero
}
 410c2e8:	e037883a 	mov	sp,fp
 410c2ec:	dfc00117 	ldw	ra,4(sp)
 410c2f0:	df000017 	ldw	fp,0(sp)
 410c2f4:	dec00204 	addi	sp,sp,8
 410c2f8:	f800283a 	ret

0410c2fc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 410c2fc:	defffb04 	addi	sp,sp,-20
 410c300:	df000415 	stw	fp,16(sp)
 410c304:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 410c308:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410c30c:	0005303a 	rdctl	r2,status
 410c310:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410c314:	e0fffe17 	ldw	r3,-8(fp)
 410c318:	00bfff84 	movi	r2,-2
 410c31c:	1884703a 	and	r2,r3,r2
 410c320:	1001703a 	wrctl	status,r2
  
  return context;
 410c324:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 410c328:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 410c32c:	d0a73317 	ldw	r2,-25396(gp)
 410c330:	e0bffd15 	stw	r2,-12(fp)
 410c334:	e0bffc17 	ldw	r2,-16(fp)
 410c338:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410c33c:	e0bfff17 	ldw	r2,-4(fp)
 410c340:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 410c344:	e0bffd17 	ldw	r2,-12(fp)
}
 410c348:	e037883a 	mov	sp,fp
 410c34c:	df000017 	ldw	fp,0(sp)
 410c350:	dec00104 	addi	sp,sp,4
 410c354:	f800283a 	ret

0410c358 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 410c358:	defffb04 	addi	sp,sp,-20
 410c35c:	df000415 	stw	fp,16(sp)
 410c360:	df000404 	addi	fp,sp,16
 410c364:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 410c368:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410c36c:	0005303a 	rdctl	r2,status
 410c370:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410c374:	e0fffd17 	ldw	r3,-12(fp)
 410c378:	00bfff84 	movi	r2,-2
 410c37c:	1884703a 	and	r2,r3,r2
 410c380:	1001703a 	wrctl	status,r2
  
  return context;
 410c384:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 410c388:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 410c38c:	e0bfff17 	ldw	r2,-4(fp)
 410c390:	d0a73315 	stw	r2,-25396(gp)
 410c394:	e0bffc17 	ldw	r2,-16(fp)
 410c398:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410c39c:	e0bffe17 	ldw	r2,-8(fp)
 410c3a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 410c3a4:	0001883a 	nop
 410c3a8:	e037883a 	mov	sp,fp
 410c3ac:	df000017 	ldw	fp,0(sp)
 410c3b0:	dec00104 	addi	sp,sp,4
 410c3b4:	f800283a 	ret

0410c3b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 410c3b8:	defffd04 	addi	sp,sp,-12
 410c3bc:	dfc00215 	stw	ra,8(sp)
 410c3c0:	df000115 	stw	fp,4(sp)
 410c3c4:	df000104 	addi	fp,sp,4
 410c3c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 410c3cc:	d1600604 	addi	r5,gp,-32744
 410c3d0:	e13fff17 	ldw	r4,-4(fp)
 410c3d4:	410e2640 	call	410e264 <alt_dev_llist_insert>
}
 410c3d8:	e037883a 	mov	sp,fp
 410c3dc:	dfc00117 	ldw	ra,4(sp)
 410c3e0:	df000017 	ldw	fp,0(sp)
 410c3e4:	dec00204 	addi	sp,sp,8
 410c3e8:	f800283a 	ret

0410c3ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 410c3ec:	defffe04 	addi	sp,sp,-8
 410c3f0:	dfc00115 	stw	ra,4(sp)
 410c3f4:	df000015 	stw	fp,0(sp)
 410c3f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 410c3fc:	d0a00917 	ldw	r2,-32732(gp)
 410c400:	10000326 	beq	r2,zero,410c410 <alt_get_errno+0x24>
 410c404:	d0a00917 	ldw	r2,-32732(gp)
 410c408:	103ee83a 	callr	r2
 410c40c:	00000106 	br	410c414 <alt_get_errno+0x28>
 410c410:	d0a71004 	addi	r2,gp,-25536
}
 410c414:	e037883a 	mov	sp,fp
 410c418:	dfc00117 	ldw	ra,4(sp)
 410c41c:	df000017 	ldw	fp,0(sp)
 410c420:	dec00204 	addi	sp,sp,8
 410c424:	f800283a 	ret

0410c428 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 410c428:	defffa04 	addi	sp,sp,-24
 410c42c:	dfc00515 	stw	ra,20(sp)
 410c430:	df000415 	stw	fp,16(sp)
 410c434:	df000404 	addi	fp,sp,16
 410c438:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 410c43c:	e0bfff17 	ldw	r2,-4(fp)
 410c440:	10800404 	addi	r2,r2,16
 410c444:	e0bffd15 	stw	r2,-12(fp)
 410c448:	00800044 	movi	r2,1
 410c44c:	e0bffe0d 	sth	r2,-8(fp)
 410c450:	e0bffe0b 	ldhu	r2,-8(fp)
 410c454:	1009883a 	mov	r4,r2
 410c458:	4109db40 	call	4109db4 <OSSemCreate>
 410c45c:	1007883a 	mov	r3,r2
 410c460:	e0bffd17 	ldw	r2,-12(fp)
 410c464:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
 410c468:	e0bffd17 	ldw	r2,-12(fp)
 410c46c:	10800017 	ldw	r2,0(r2)
 410c470:	10000226 	beq	r2,zero,410c47c <alt_avalon_mutex_reg+0x54>
 410c474:	0005883a 	mov	r2,zero
 410c478:	00000106 	br	410c480 <alt_avalon_mutex_reg+0x58>
 410c47c:	00bfffc4 	movi	r2,-1
 410c480:	e0bffc15 	stw	r2,-16(fp)
  if (!ret_code)
 410c484:	e0bffc17 	ldw	r2,-16(fp)
 410c488:	1000051e 	bne	r2,zero,410c4a0 <alt_avalon_mutex_reg+0x78>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 410c48c:	d1602f04 	addi	r5,gp,-32580
 410c490:	e13fff17 	ldw	r4,-4(fp)
 410c494:	410e2640 	call	410e264 <alt_dev_llist_insert>
 410c498:	e0bffc15 	stw	r2,-16(fp)
 410c49c:	00000606 	br	410c4b8 <alt_avalon_mutex_reg+0x90>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 410c4a0:	410c3ec0 	call	410c3ec <alt_get_errno>
 410c4a4:	1007883a 	mov	r3,r2
 410c4a8:	00800304 	movi	r2,12
 410c4ac:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 410c4b0:	00bffd04 	movi	r2,-12
 410c4b4:	e0bffc15 	stw	r2,-16(fp)
  }

  return ret_code;
 410c4b8:	e0bffc17 	ldw	r2,-16(fp)
}
 410c4bc:	e037883a 	mov	sp,fp
 410c4c0:	dfc00117 	ldw	ra,4(sp)
 410c4c4:	df000017 	ldw	fp,0(sp)
 410c4c8:	dec00204 	addi	sp,sp,8
 410c4cc:	f800283a 	ret

0410c4d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 410c4d0:	defffd04 	addi	sp,sp,-12
 410c4d4:	dfc00215 	stw	ra,8(sp)
 410c4d8:	df000115 	stw	fp,4(sp)
 410c4dc:	df000104 	addi	fp,sp,4
 410c4e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_1, nios2_gen2_1);
 410c4e4:	410e8bc0 	call	410e8bc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 410c4e8:	00800044 	movi	r2,1
 410c4ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 410c4f0:	0001883a 	nop
 410c4f4:	e037883a 	mov	sp,fp
 410c4f8:	dfc00117 	ldw	ra,4(sp)
 410c4fc:	df000017 	ldw	fp,0(sp)
 410c500:	dec00204 	addi	sp,sp,8
 410c504:	f800283a 	ret

0410c508 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 410c508:	defffe04 	addi	sp,sp,-8
 410c50c:	dfc00115 	stw	ra,4(sp)
 410c510:	df000015 	stw	fp,0(sp)
 410c514:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 410c518:	01c0fa04 	movi	r7,1000
 410c51c:	01800084 	movi	r6,2
 410c520:	000b883a 	mov	r5,zero
 410c524:	01040004 	movi	r4,4096
 410c528:	410e0380 	call	410e038 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
 410c52c:	000d883a 	mov	r6,zero
 410c530:	000b883a 	mov	r5,zero
 410c534:	01010474 	movhi	r4,1041
 410c538:	21010604 	addi	r4,r4,1048
 410c53c:	410c6e80 	call	410c6e8 <altera_avalon_jtag_uart_init>
 410c540:	01010474 	movhi	r4,1041
 410c544:	2100fc04 	addi	r4,r4,1008
 410c548:	410c3b80 	call	410c3b8 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 410c54c:	01bfffc4 	movi	r6,-1
 410c550:	000b883a 	mov	r5,zero
 410c554:	01010474 	movhi	r4,1041
 410c558:	21051704 	addi	r4,r4,5212
 410c55c:	410d5980 	call	410d598 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 410c560:	01010474 	movhi	r4,1041
 410c564:	21052a04 	addi	r4,r4,5288
 410c568:	410c4280 	call	410c428 <alt_avalon_mutex_reg>
}
 410c56c:	0001883a 	nop
 410c570:	e037883a 	mov	sp,fp
 410c574:	dfc00117 	ldw	ra,4(sp)
 410c578:	df000017 	ldw	fp,0(sp)
 410c57c:	dec00204 	addi	sp,sp,8
 410c580:	f800283a 	ret

0410c584 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 410c584:	defffa04 	addi	sp,sp,-24
 410c588:	dfc00515 	stw	ra,20(sp)
 410c58c:	df000415 	stw	fp,16(sp)
 410c590:	df000404 	addi	fp,sp,16
 410c594:	e13ffd15 	stw	r4,-12(fp)
 410c598:	e17ffe15 	stw	r5,-8(fp)
 410c59c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 410c5a0:	e0bffd17 	ldw	r2,-12(fp)
 410c5a4:	10800017 	ldw	r2,0(r2)
 410c5a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 410c5ac:	e0bffc17 	ldw	r2,-16(fp)
 410c5b0:	10c00a04 	addi	r3,r2,40
 410c5b4:	e0bffd17 	ldw	r2,-12(fp)
 410c5b8:	10800217 	ldw	r2,8(r2)
 410c5bc:	100f883a 	mov	r7,r2
 410c5c0:	e1bfff17 	ldw	r6,-4(fp)
 410c5c4:	e17ffe17 	ldw	r5,-8(fp)
 410c5c8:	1809883a 	mov	r4,r3
 410c5cc:	410cd300 	call	410cd30 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 410c5d0:	e037883a 	mov	sp,fp
 410c5d4:	dfc00117 	ldw	ra,4(sp)
 410c5d8:	df000017 	ldw	fp,0(sp)
 410c5dc:	dec00204 	addi	sp,sp,8
 410c5e0:	f800283a 	ret

0410c5e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 410c5e4:	defffa04 	addi	sp,sp,-24
 410c5e8:	dfc00515 	stw	ra,20(sp)
 410c5ec:	df000415 	stw	fp,16(sp)
 410c5f0:	df000404 	addi	fp,sp,16
 410c5f4:	e13ffd15 	stw	r4,-12(fp)
 410c5f8:	e17ffe15 	stw	r5,-8(fp)
 410c5fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 410c600:	e0bffd17 	ldw	r2,-12(fp)
 410c604:	10800017 	ldw	r2,0(r2)
 410c608:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 410c60c:	e0bffc17 	ldw	r2,-16(fp)
 410c610:	10c00a04 	addi	r3,r2,40
 410c614:	e0bffd17 	ldw	r2,-12(fp)
 410c618:	10800217 	ldw	r2,8(r2)
 410c61c:	100f883a 	mov	r7,r2
 410c620:	e1bfff17 	ldw	r6,-4(fp)
 410c624:	e17ffe17 	ldw	r5,-8(fp)
 410c628:	1809883a 	mov	r4,r3
 410c62c:	410cfec0 	call	410cfec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 410c630:	e037883a 	mov	sp,fp
 410c634:	dfc00117 	ldw	ra,4(sp)
 410c638:	df000017 	ldw	fp,0(sp)
 410c63c:	dec00204 	addi	sp,sp,8
 410c640:	f800283a 	ret

0410c644 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 410c644:	defffc04 	addi	sp,sp,-16
 410c648:	dfc00315 	stw	ra,12(sp)
 410c64c:	df000215 	stw	fp,8(sp)
 410c650:	df000204 	addi	fp,sp,8
 410c654:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 410c658:	e0bfff17 	ldw	r2,-4(fp)
 410c65c:	10800017 	ldw	r2,0(r2)
 410c660:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 410c664:	e0bffe17 	ldw	r2,-8(fp)
 410c668:	10c00a04 	addi	r3,r2,40
 410c66c:	e0bfff17 	ldw	r2,-4(fp)
 410c670:	10800217 	ldw	r2,8(r2)
 410c674:	100b883a 	mov	r5,r2
 410c678:	1809883a 	mov	r4,r3
 410c67c:	410cbd80 	call	410cbd8 <altera_avalon_jtag_uart_close>
}
 410c680:	e037883a 	mov	sp,fp
 410c684:	dfc00117 	ldw	ra,4(sp)
 410c688:	df000017 	ldw	fp,0(sp)
 410c68c:	dec00204 	addi	sp,sp,8
 410c690:	f800283a 	ret

0410c694 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 410c694:	defffa04 	addi	sp,sp,-24
 410c698:	dfc00515 	stw	ra,20(sp)
 410c69c:	df000415 	stw	fp,16(sp)
 410c6a0:	df000404 	addi	fp,sp,16
 410c6a4:	e13ffd15 	stw	r4,-12(fp)
 410c6a8:	e17ffe15 	stw	r5,-8(fp)
 410c6ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 410c6b0:	e0bffd17 	ldw	r2,-12(fp)
 410c6b4:	10800017 	ldw	r2,0(r2)
 410c6b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 410c6bc:	e0bffc17 	ldw	r2,-16(fp)
 410c6c0:	10800a04 	addi	r2,r2,40
 410c6c4:	e1bfff17 	ldw	r6,-4(fp)
 410c6c8:	e17ffe17 	ldw	r5,-8(fp)
 410c6cc:	1009883a 	mov	r4,r2
 410c6d0:	410cc400 	call	410cc40 <altera_avalon_jtag_uart_ioctl>
}
 410c6d4:	e037883a 	mov	sp,fp
 410c6d8:	dfc00117 	ldw	ra,4(sp)
 410c6dc:	df000017 	ldw	fp,0(sp)
 410c6e0:	dec00204 	addi	sp,sp,8
 410c6e4:	f800283a 	ret

0410c6e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 410c6e8:	defff104 	addi	sp,sp,-60
 410c6ec:	dfc00e15 	stw	ra,56(sp)
 410c6f0:	df000d15 	stw	fp,52(sp)
 410c6f4:	df000d04 	addi	fp,sp,52
 410c6f8:	e13ff915 	stw	r4,-28(fp)
 410c6fc:	e17ffa15 	stw	r5,-24(fp)
 410c700:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 410c704:	e0bff917 	ldw	r2,-28(fp)
 410c708:	10800c04 	addi	r2,r2,48
 410c70c:	e0bff415 	stw	r2,-48(fp)
 410c710:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 410c714:	e0bff80b 	ldhu	r2,-32(fp)
 410c718:	e0fff884 	addi	r3,fp,-30
 410c71c:	180b883a 	mov	r5,r3
 410c720:	1009883a 	mov	r4,r2
 410c724:	41070a00 	call	41070a0 <OSFlagCreate>
 410c728:	1007883a 	mov	r3,r2
 410c72c:	e0bff417 	ldw	r2,-48(fp)
 410c730:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 410c734:	e0bff917 	ldw	r2,-28(fp)
 410c738:	10800a04 	addi	r2,r2,40
 410c73c:	e0bff515 	stw	r2,-44(fp)
 410c740:	00800044 	movi	r2,1
 410c744:	e0bff78d 	sth	r2,-34(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 410c748:	e0bff78b 	ldhu	r2,-34(fp)
 410c74c:	1009883a 	mov	r4,r2
 410c750:	4109db40 	call	4109db4 <OSSemCreate>
 410c754:	1007883a 	mov	r3,r2
 410c758:	e0bff517 	ldw	r2,-44(fp)
 410c75c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 410c760:	e0bff917 	ldw	r2,-28(fp)
 410c764:	10800b04 	addi	r2,r2,44
 410c768:	e0bff615 	stw	r2,-40(fp)
 410c76c:	00800044 	movi	r2,1
 410c770:	e0bff70d 	sth	r2,-36(fp)
 410c774:	e0bff70b 	ldhu	r2,-36(fp)
 410c778:	1009883a 	mov	r4,r2
 410c77c:	4109db40 	call	4109db4 <OSSemCreate>
 410c780:	1007883a 	mov	r3,r2
 410c784:	e0bff617 	ldw	r2,-40(fp)
 410c788:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 410c78c:	e0bff917 	ldw	r2,-28(fp)
 410c790:	00c00044 	movi	r3,1
 410c794:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 410c798:	e0bff917 	ldw	r2,-28(fp)
 410c79c:	10800017 	ldw	r2,0(r2)
 410c7a0:	10800104 	addi	r2,r2,4
 410c7a4:	1007883a 	mov	r3,r2
 410c7a8:	e0bff917 	ldw	r2,-28(fp)
 410c7ac:	10800817 	ldw	r2,32(r2)
 410c7b0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 410c7b4:	e0bffa17 	ldw	r2,-24(fp)
 410c7b8:	e0fffb17 	ldw	r3,-20(fp)
 410c7bc:	d8000015 	stw	zero,0(sp)
 410c7c0:	e1fff917 	ldw	r7,-28(fp)
 410c7c4:	01810474 	movhi	r6,1041
 410c7c8:	31b20c04 	addi	r6,r6,-14288
 410c7cc:	180b883a 	mov	r5,r3
 410c7d0:	1009883a 	mov	r4,r2
 410c7d4:	4103d880 	call	4103d88 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 410c7d8:	e0bff917 	ldw	r2,-28(fp)
 410c7dc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 410c7e0:	e0bff917 	ldw	r2,-28(fp)
 410c7e4:	10800204 	addi	r2,r2,8
 410c7e8:	d0e71d17 	ldw	r3,-25484(gp)
 410c7ec:	e1fff917 	ldw	r7,-28(fp)
 410c7f0:	01810474 	movhi	r6,1041
 410c7f4:	31b2b504 	addi	r6,r6,-13612
 410c7f8:	180b883a 	mov	r5,r3
 410c7fc:	1009883a 	mov	r4,r2
 410c800:	410e0b40 	call	410e0b4 <alt_alarm_start>
 410c804:	1000040e 	bge	r2,zero,410c818 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 410c808:	e0fff917 	ldw	r3,-28(fp)
 410c80c:	00a00034 	movhi	r2,32768
 410c810:	10bfffc4 	addi	r2,r2,-1
 410c814:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 410c818:	0001883a 	nop
 410c81c:	e037883a 	mov	sp,fp
 410c820:	dfc00117 	ldw	ra,4(sp)
 410c824:	df000017 	ldw	fp,0(sp)
 410c828:	dec00204 	addi	sp,sp,8
 410c82c:	f800283a 	ret

0410c830 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 410c830:	defff204 	addi	sp,sp,-56
 410c834:	dfc00d15 	stw	ra,52(sp)
 410c838:	df000c15 	stw	fp,48(sp)
 410c83c:	df000c04 	addi	fp,sp,48
 410c840:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 410c844:	e0bfff17 	ldw	r2,-4(fp)
 410c848:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 410c84c:	e0bff617 	ldw	r2,-40(fp)
 410c850:	10800017 	ldw	r2,0(r2)
 410c854:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 410c858:	e0bff717 	ldw	r2,-36(fp)
 410c85c:	10800104 	addi	r2,r2,4
 410c860:	10800037 	ldwio	r2,0(r2)
 410c864:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 410c868:	e0bff817 	ldw	r2,-32(fp)
 410c86c:	1080c00c 	andi	r2,r2,768
 410c870:	10009126 	beq	r2,zero,410cab8 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 410c874:	e0bff817 	ldw	r2,-32(fp)
 410c878:	1080400c 	andi	r2,r2,256
 410c87c:	10004726 	beq	r2,zero,410c99c <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 410c880:	00800074 	movhi	r2,1
 410c884:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 410c888:	e0bff617 	ldw	r2,-40(fp)
 410c88c:	10800d17 	ldw	r2,52(r2)
 410c890:	10800044 	addi	r2,r2,1
 410c894:	1081ffcc 	andi	r2,r2,2047
 410c898:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 410c89c:	e0bff617 	ldw	r2,-40(fp)
 410c8a0:	10c00e17 	ldw	r3,56(r2)
 410c8a4:	e0bff917 	ldw	r2,-28(fp)
 410c8a8:	18802726 	beq	r3,r2,410c948 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 410c8ac:	e0bff717 	ldw	r2,-36(fp)
 410c8b0:	10800037 	ldwio	r2,0(r2)
 410c8b4:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 410c8b8:	e0bff417 	ldw	r2,-48(fp)
 410c8bc:	10a0000c 	andi	r2,r2,32768
 410c8c0:	10002326 	beq	r2,zero,410c950 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 410c8c4:	e0bff617 	ldw	r2,-40(fp)
 410c8c8:	10800d17 	ldw	r2,52(r2)
 410c8cc:	e0fff417 	ldw	r3,-48(fp)
 410c8d0:	1809883a 	mov	r4,r3
 410c8d4:	e0fff617 	ldw	r3,-40(fp)
 410c8d8:	1885883a 	add	r2,r3,r2
 410c8dc:	10801104 	addi	r2,r2,68
 410c8e0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 410c8e4:	e0bff617 	ldw	r2,-40(fp)
 410c8e8:	10800d17 	ldw	r2,52(r2)
 410c8ec:	10800044 	addi	r2,r2,1
 410c8f0:	10c1ffcc 	andi	r3,r2,2047
 410c8f4:	e0bff617 	ldw	r2,-40(fp)
 410c8f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 410c8fc:	e0bff617 	ldw	r2,-40(fp)
 410c900:	10800c17 	ldw	r2,48(r2)
 410c904:	e0bffb15 	stw	r2,-20(fp)
 410c908:	00800044 	movi	r2,1
 410c90c:	e0bffc0d 	sth	r2,-16(fp)
 410c910:	00800044 	movi	r2,1
 410c914:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 410c918:	d0a72343 	ldbu	r2,-25459(gp)
 410c91c:	10803fcc 	andi	r2,r2,255
 410c920:	103fd926 	beq	r2,zero,410c888 <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
 410c924:	e0bffc0b 	ldhu	r2,-16(fp)
 410c928:	e0fffc83 	ldbu	r3,-14(fp)
 410c92c:	e13ffdc4 	addi	r4,fp,-9
 410c930:	200f883a 	mov	r7,r4
 410c934:	180d883a 	mov	r6,r3
 410c938:	100b883a 	mov	r5,r2
 410c93c:	e13ffb17 	ldw	r4,-20(fp)
 410c940:	4107c7c0 	call	4107c7c <OSFlagPost>
      }
 410c944:	003fd006 	br	410c888 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 410c948:	0001883a 	nop
 410c94c:	00000106 	br	410c954 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 410c950:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 410c954:	e0bff417 	ldw	r2,-48(fp)
 410c958:	10bfffec 	andhi	r2,r2,65535
 410c95c:	10000f26 	beq	r2,zero,410c99c <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 410c960:	e0bff617 	ldw	r2,-40(fp)
 410c964:	10c00817 	ldw	r3,32(r2)
 410c968:	00bfff84 	movi	r2,-2
 410c96c:	1886703a 	and	r3,r3,r2
 410c970:	e0bff617 	ldw	r2,-40(fp)
 410c974:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 410c978:	e0bff717 	ldw	r2,-36(fp)
 410c97c:	10800104 	addi	r2,r2,4
 410c980:	1007883a 	mov	r3,r2
 410c984:	e0bff617 	ldw	r2,-40(fp)
 410c988:	10800817 	ldw	r2,32(r2)
 410c98c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 410c990:	e0bff717 	ldw	r2,-36(fp)
 410c994:	10800104 	addi	r2,r2,4
 410c998:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 410c99c:	e0bff817 	ldw	r2,-32(fp)
 410c9a0:	1080800c 	andi	r2,r2,512
 410c9a4:	103fac26 	beq	r2,zero,410c858 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 410c9a8:	e0bff817 	ldw	r2,-32(fp)
 410c9ac:	1004d43a 	srli	r2,r2,16
 410c9b0:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 410c9b4:	00002606 	br	410ca50 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 410c9b8:	e0bff717 	ldw	r2,-36(fp)
 410c9bc:	e0fff617 	ldw	r3,-40(fp)
 410c9c0:	18c01017 	ldw	r3,64(r3)
 410c9c4:	e13ff617 	ldw	r4,-40(fp)
 410c9c8:	20c7883a 	add	r3,r4,r3
 410c9cc:	18c21104 	addi	r3,r3,2116
 410c9d0:	18c00003 	ldbu	r3,0(r3)
 410c9d4:	18c03fcc 	andi	r3,r3,255
 410c9d8:	18c0201c 	xori	r3,r3,128
 410c9dc:	18ffe004 	addi	r3,r3,-128
 410c9e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 410c9e4:	e0bff617 	ldw	r2,-40(fp)
 410c9e8:	10801017 	ldw	r2,64(r2)
 410c9ec:	10800044 	addi	r2,r2,1
 410c9f0:	10c1ffcc 	andi	r3,r2,2047
 410c9f4:	e0bff617 	ldw	r2,-40(fp)
 410c9f8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 410c9fc:	e0bff617 	ldw	r2,-40(fp)
 410ca00:	10800c17 	ldw	r2,48(r2)
 410ca04:	e0bffa15 	stw	r2,-24(fp)
 410ca08:	00800084 	movi	r2,2
 410ca0c:	e0bffd0d 	sth	r2,-12(fp)
 410ca10:	00800044 	movi	r2,1
 410ca14:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 410ca18:	d0a72343 	ldbu	r2,-25459(gp)
 410ca1c:	10803fcc 	andi	r2,r2,255
 410ca20:	10000826 	beq	r2,zero,410ca44 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 410ca24:	e0bffd0b 	ldhu	r2,-12(fp)
 410ca28:	e0fffd83 	ldbu	r3,-10(fp)
 410ca2c:	e13ffe04 	addi	r4,fp,-8
 410ca30:	200f883a 	mov	r7,r4
 410ca34:	180d883a 	mov	r6,r3
 410ca38:	100b883a 	mov	r5,r2
 410ca3c:	e13ffa17 	ldw	r4,-24(fp)
 410ca40:	4107c7c0 	call	4107c7c <OSFlagPost>

        space--;
 410ca44:	e0bff517 	ldw	r2,-44(fp)
 410ca48:	10bfffc4 	addi	r2,r2,-1
 410ca4c:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 410ca50:	e0bff517 	ldw	r2,-44(fp)
 410ca54:	10000526 	beq	r2,zero,410ca6c <altera_avalon_jtag_uart_irq+0x23c>
 410ca58:	e0bff617 	ldw	r2,-40(fp)
 410ca5c:	10c01017 	ldw	r3,64(r2)
 410ca60:	e0bff617 	ldw	r2,-40(fp)
 410ca64:	10800f17 	ldw	r2,60(r2)
 410ca68:	18bfd31e 	bne	r3,r2,410c9b8 <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 410ca6c:	e0bff517 	ldw	r2,-44(fp)
 410ca70:	103f7926 	beq	r2,zero,410c858 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 410ca74:	e0bff617 	ldw	r2,-40(fp)
 410ca78:	10c00817 	ldw	r3,32(r2)
 410ca7c:	00bfff44 	movi	r2,-3
 410ca80:	1886703a 	and	r3,r3,r2
 410ca84:	e0bff617 	ldw	r2,-40(fp)
 410ca88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 410ca8c:	e0bff617 	ldw	r2,-40(fp)
 410ca90:	10800017 	ldw	r2,0(r2)
 410ca94:	10800104 	addi	r2,r2,4
 410ca98:	1007883a 	mov	r3,r2
 410ca9c:	e0bff617 	ldw	r2,-40(fp)
 410caa0:	10800817 	ldw	r2,32(r2)
 410caa4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 410caa8:	e0bff717 	ldw	r2,-36(fp)
 410caac:	10800104 	addi	r2,r2,4
 410cab0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 410cab4:	003f6806 	br	410c858 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 410cab8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 410cabc:	0001883a 	nop
 410cac0:	e037883a 	mov	sp,fp
 410cac4:	dfc00117 	ldw	ra,4(sp)
 410cac8:	df000017 	ldw	fp,0(sp)
 410cacc:	dec00204 	addi	sp,sp,8
 410cad0:	f800283a 	ret

0410cad4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 410cad4:	defff904 	addi	sp,sp,-28
 410cad8:	dfc00615 	stw	ra,24(sp)
 410cadc:	df000515 	stw	fp,20(sp)
 410cae0:	df000504 	addi	fp,sp,20
 410cae4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 410cae8:	e0bfff17 	ldw	r2,-4(fp)
 410caec:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 410caf0:	e0bffb17 	ldw	r2,-20(fp)
 410caf4:	10800017 	ldw	r2,0(r2)
 410caf8:	10800104 	addi	r2,r2,4
 410cafc:	10800037 	ldwio	r2,0(r2)
 410cb00:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 410cb04:	e0bffc17 	ldw	r2,-16(fp)
 410cb08:	1081000c 	andi	r2,r2,1024
 410cb0c:	10000b26 	beq	r2,zero,410cb3c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 410cb10:	e0bffb17 	ldw	r2,-20(fp)
 410cb14:	10800017 	ldw	r2,0(r2)
 410cb18:	10800104 	addi	r2,r2,4
 410cb1c:	1007883a 	mov	r3,r2
 410cb20:	e0bffb17 	ldw	r2,-20(fp)
 410cb24:	10800817 	ldw	r2,32(r2)
 410cb28:	10810014 	ori	r2,r2,1024
 410cb2c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 410cb30:	e0bffb17 	ldw	r2,-20(fp)
 410cb34:	10000915 	stw	zero,36(r2)
 410cb38:	00002106 	br	410cbc0 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 410cb3c:	e0bffb17 	ldw	r2,-20(fp)
 410cb40:	10c00917 	ldw	r3,36(r2)
 410cb44:	00a00034 	movhi	r2,32768
 410cb48:	10bfff04 	addi	r2,r2,-4
 410cb4c:	10c01c36 	bltu	r2,r3,410cbc0 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 410cb50:	e0bffb17 	ldw	r2,-20(fp)
 410cb54:	10800917 	ldw	r2,36(r2)
 410cb58:	10c00044 	addi	r3,r2,1
 410cb5c:	e0bffb17 	ldw	r2,-20(fp)
 410cb60:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 410cb64:	e0bffb17 	ldw	r2,-20(fp)
 410cb68:	10c00917 	ldw	r3,36(r2)
 410cb6c:	e0bffb17 	ldw	r2,-20(fp)
 410cb70:	10800117 	ldw	r2,4(r2)
 410cb74:	18801236 	bltu	r3,r2,410cbc0 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 410cb78:	e0bffb17 	ldw	r2,-20(fp)
 410cb7c:	10800c17 	ldw	r2,48(r2)
 410cb80:	e0bffd15 	stw	r2,-12(fp)
 410cb84:	00800104 	movi	r2,4
 410cb88:	e0bffe0d 	sth	r2,-8(fp)
 410cb8c:	00800044 	movi	r2,1
 410cb90:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 410cb94:	d0a72343 	ldbu	r2,-25459(gp)
 410cb98:	10803fcc 	andi	r2,r2,255
 410cb9c:	10000826 	beq	r2,zero,410cbc0 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 410cba0:	e0bffe0b 	ldhu	r2,-8(fp)
 410cba4:	e0fffe83 	ldbu	r3,-6(fp)
 410cba8:	e13ffec4 	addi	r4,fp,-5
 410cbac:	200f883a 	mov	r7,r4
 410cbb0:	180d883a 	mov	r6,r3
 410cbb4:	100b883a 	mov	r5,r2
 410cbb8:	e13ffd17 	ldw	r4,-12(fp)
 410cbbc:	4107c7c0 	call	4107c7c <OSFlagPost>
 410cbc0:	d0a71d17 	ldw	r2,-25484(gp)
    }
  }

  return alt_ticks_per_second();
}
 410cbc4:	e037883a 	mov	sp,fp
 410cbc8:	dfc00117 	ldw	ra,4(sp)
 410cbcc:	df000017 	ldw	fp,0(sp)
 410cbd0:	dec00204 	addi	sp,sp,8
 410cbd4:	f800283a 	ret

0410cbd8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 410cbd8:	defffd04 	addi	sp,sp,-12
 410cbdc:	df000215 	stw	fp,8(sp)
 410cbe0:	df000204 	addi	fp,sp,8
 410cbe4:	e13ffe15 	stw	r4,-8(fp)
 410cbe8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 410cbec:	00000506 	br	410cc04 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 410cbf0:	e0bfff17 	ldw	r2,-4(fp)
 410cbf4:	1090000c 	andi	r2,r2,16384
 410cbf8:	10000226 	beq	r2,zero,410cc04 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 410cbfc:	00bffd44 	movi	r2,-11
 410cc00:	00000b06 	br	410cc30 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 410cc04:	e0bffe17 	ldw	r2,-8(fp)
 410cc08:	10c01017 	ldw	r3,64(r2)
 410cc0c:	e0bffe17 	ldw	r2,-8(fp)
 410cc10:	10800f17 	ldw	r2,60(r2)
 410cc14:	18800526 	beq	r3,r2,410cc2c <altera_avalon_jtag_uart_close+0x54>
 410cc18:	e0bffe17 	ldw	r2,-8(fp)
 410cc1c:	10c00917 	ldw	r3,36(r2)
 410cc20:	e0bffe17 	ldw	r2,-8(fp)
 410cc24:	10800117 	ldw	r2,4(r2)
 410cc28:	18bff136 	bltu	r3,r2,410cbf0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 410cc2c:	0005883a 	mov	r2,zero
}
 410cc30:	e037883a 	mov	sp,fp
 410cc34:	df000017 	ldw	fp,0(sp)
 410cc38:	dec00104 	addi	sp,sp,4
 410cc3c:	f800283a 	ret

0410cc40 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 410cc40:	defffa04 	addi	sp,sp,-24
 410cc44:	df000515 	stw	fp,20(sp)
 410cc48:	df000504 	addi	fp,sp,20
 410cc4c:	e13ffd15 	stw	r4,-12(fp)
 410cc50:	e17ffe15 	stw	r5,-8(fp)
 410cc54:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 410cc58:	00bff9c4 	movi	r2,-25
 410cc5c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 410cc60:	e0bffe17 	ldw	r2,-8(fp)
 410cc64:	10da8060 	cmpeqi	r3,r2,27137
 410cc68:	1800031e 	bne	r3,zero,410cc78 <altera_avalon_jtag_uart_ioctl+0x38>
 410cc6c:	109a80a0 	cmpeqi	r2,r2,27138
 410cc70:	1000181e 	bne	r2,zero,410ccd4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 410cc74:	00002906 	br	410cd1c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 410cc78:	e0bffd17 	ldw	r2,-12(fp)
 410cc7c:	10c00117 	ldw	r3,4(r2)
 410cc80:	00a00034 	movhi	r2,32768
 410cc84:	10bfffc4 	addi	r2,r2,-1
 410cc88:	18802126 	beq	r3,r2,410cd10 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 410cc8c:	e0bfff17 	ldw	r2,-4(fp)
 410cc90:	10800017 	ldw	r2,0(r2)
 410cc94:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 410cc98:	e0bffc17 	ldw	r2,-16(fp)
 410cc9c:	10800090 	cmplti	r2,r2,2
 410cca0:	1000061e 	bne	r2,zero,410ccbc <altera_avalon_jtag_uart_ioctl+0x7c>
 410cca4:	e0fffc17 	ldw	r3,-16(fp)
 410cca8:	00a00034 	movhi	r2,32768
 410ccac:	10bfffc4 	addi	r2,r2,-1
 410ccb0:	18800226 	beq	r3,r2,410ccbc <altera_avalon_jtag_uart_ioctl+0x7c>
 410ccb4:	e0bffc17 	ldw	r2,-16(fp)
 410ccb8:	00000206 	br	410ccc4 <altera_avalon_jtag_uart_ioctl+0x84>
 410ccbc:	00a00034 	movhi	r2,32768
 410ccc0:	10bfff84 	addi	r2,r2,-2
 410ccc4:	e0fffd17 	ldw	r3,-12(fp)
 410ccc8:	18800115 	stw	r2,4(r3)
      rc = 0;
 410cccc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 410ccd0:	00000f06 	br	410cd10 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 410ccd4:	e0bffd17 	ldw	r2,-12(fp)
 410ccd8:	10c00117 	ldw	r3,4(r2)
 410ccdc:	00a00034 	movhi	r2,32768
 410cce0:	10bfffc4 	addi	r2,r2,-1
 410cce4:	18800c26 	beq	r3,r2,410cd18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 410cce8:	e0bffd17 	ldw	r2,-12(fp)
 410ccec:	10c00917 	ldw	r3,36(r2)
 410ccf0:	e0bffd17 	ldw	r2,-12(fp)
 410ccf4:	10800117 	ldw	r2,4(r2)
 410ccf8:	1885803a 	cmpltu	r2,r3,r2
 410ccfc:	10c03fcc 	andi	r3,r2,255
 410cd00:	e0bfff17 	ldw	r2,-4(fp)
 410cd04:	10c00015 	stw	r3,0(r2)
      rc = 0;
 410cd08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 410cd0c:	00000206 	br	410cd18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 410cd10:	0001883a 	nop
 410cd14:	00000106 	br	410cd1c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 410cd18:	0001883a 	nop

  default:
    break;
  }

  return rc;
 410cd1c:	e0bffb17 	ldw	r2,-20(fp)
}
 410cd20:	e037883a 	mov	sp,fp
 410cd24:	df000017 	ldw	fp,0(sp)
 410cd28:	dec00104 	addi	sp,sp,4
 410cd2c:	f800283a 	ret

0410cd30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 410cd30:	deffed04 	addi	sp,sp,-76
 410cd34:	dfc01215 	stw	ra,72(sp)
 410cd38:	df001115 	stw	fp,68(sp)
 410cd3c:	df001104 	addi	fp,sp,68
 410cd40:	e13ffc15 	stw	r4,-16(fp)
 410cd44:	e17ffd15 	stw	r5,-12(fp)
 410cd48:	e1bffe15 	stw	r6,-8(fp)
 410cd4c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 410cd50:	e0bffd17 	ldw	r2,-12(fp)
 410cd54:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 410cd58:	e0bffc17 	ldw	r2,-16(fp)
 410cd5c:	10800a17 	ldw	r2,40(r2)
 410cd60:	e0bff815 	stw	r2,-32(fp)
 410cd64:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 410cd68:	e0bff90b 	ldhu	r2,-28(fp)
 410cd6c:	e0fffb04 	addi	r3,fp,-20
 410cd70:	180d883a 	mov	r6,r3
 410cd74:	100b883a 	mov	r5,r2
 410cd78:	e13ff817 	ldw	r4,-32(fp)
 410cd7c:	410a0cc0 	call	410a0cc <OSSemPend>

  while (space > 0)
 410cd80:	00006106 	br	410cf08 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 410cd84:	e0bffc17 	ldw	r2,-16(fp)
 410cd88:	10800d17 	ldw	r2,52(r2)
 410cd8c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 410cd90:	e0bffc17 	ldw	r2,-16(fp)
 410cd94:	10800e17 	ldw	r2,56(r2)
 410cd98:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 410cd9c:	e0fff317 	ldw	r3,-52(fp)
 410cda0:	e0bff417 	ldw	r2,-48(fp)
 410cda4:	18800536 	bltu	r3,r2,410cdbc <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 410cda8:	e0fff317 	ldw	r3,-52(fp)
 410cdac:	e0bff417 	ldw	r2,-48(fp)
 410cdb0:	1885c83a 	sub	r2,r3,r2
 410cdb4:	e0bff115 	stw	r2,-60(fp)
 410cdb8:	00000406 	br	410cdcc <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 410cdbc:	00c20004 	movi	r3,2048
 410cdc0:	e0bff417 	ldw	r2,-48(fp)
 410cdc4:	1885c83a 	sub	r2,r3,r2
 410cdc8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 410cdcc:	e0bff117 	ldw	r2,-60(fp)
 410cdd0:	10001e26 	beq	r2,zero,410ce4c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 410cdd4:	e0fffe17 	ldw	r3,-8(fp)
 410cdd8:	e0bff117 	ldw	r2,-60(fp)
 410cddc:	1880022e 	bgeu	r3,r2,410cde8 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 410cde0:	e0bffe17 	ldw	r2,-8(fp)
 410cde4:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 410cde8:	e0bffc17 	ldw	r2,-16(fp)
 410cdec:	10c01104 	addi	r3,r2,68
 410cdf0:	e0bff417 	ldw	r2,-48(fp)
 410cdf4:	1885883a 	add	r2,r3,r2
 410cdf8:	e1bff117 	ldw	r6,-60(fp)
 410cdfc:	100b883a 	mov	r5,r2
 410ce00:	e13ff017 	ldw	r4,-64(fp)
 410ce04:	4100bd40 	call	4100bd4 <memcpy>
      ptr   += n;
 410ce08:	e0fff017 	ldw	r3,-64(fp)
 410ce0c:	e0bff117 	ldw	r2,-60(fp)
 410ce10:	1885883a 	add	r2,r3,r2
 410ce14:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 410ce18:	e0fffe17 	ldw	r3,-8(fp)
 410ce1c:	e0bff117 	ldw	r2,-60(fp)
 410ce20:	1885c83a 	sub	r2,r3,r2
 410ce24:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 410ce28:	e0fff417 	ldw	r3,-48(fp)
 410ce2c:	e0bff117 	ldw	r2,-60(fp)
 410ce30:	1885883a 	add	r2,r3,r2
 410ce34:	10c1ffcc 	andi	r3,r2,2047
 410ce38:	e0bffc17 	ldw	r2,-16(fp)
 410ce3c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 410ce40:	e0bffe17 	ldw	r2,-8(fp)
 410ce44:	00bfcf16 	blt	zero,r2,410cd84 <altera_avalon_jtag_uart_read+0x54>
 410ce48:	00000106 	br	410ce50 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 410ce4c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 410ce50:	e0fff017 	ldw	r3,-64(fp)
 410ce54:	e0bffd17 	ldw	r2,-12(fp)
 410ce58:	18802e1e 	bne	r3,r2,410cf14 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 410ce5c:	e0bfff17 	ldw	r2,-4(fp)
 410ce60:	1090000c 	andi	r2,r2,16384
 410ce64:	10002d1e 	bne	r2,zero,410cf1c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 410ce68:	d0a72343 	ldbu	r2,-25459(gp)
 410ce6c:	10803fcc 	andi	r2,r2,255
 410ce70:	10800058 	cmpnei	r2,r2,1
 410ce74:	1000161e 	bne	r2,zero,410ced0 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 410ce78:	e0bffc17 	ldw	r2,-16(fp)
 410ce7c:	10800c17 	ldw	r2,48(r2)
 410ce80:	e0bff215 	stw	r2,-56(fp)
 410ce84:	00800144 	movi	r2,5
 410ce88:	e0bff98d 	sth	r2,-26(fp)
 410ce8c:	00bfe0c4 	movi	r2,-125
 410ce90:	e0bffa05 	stb	r2,-24(fp)
 410ce94:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 410ce98:	d0a72343 	ldbu	r2,-25459(gp)
 410ce9c:	10803fcc 	andi	r2,r2,255
 410cea0:	10001526 	beq	r2,zero,410cef8 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 410cea4:	e0fff98b 	ldhu	r3,-26(fp)
 410cea8:	e13ffa03 	ldbu	r4,-24(fp)
 410ceac:	e17ffa8b 	ldhu	r5,-22(fp)
 410ceb0:	e0bffb44 	addi	r2,fp,-19
 410ceb4:	d8800015 	stw	r2,0(sp)
 410ceb8:	280f883a 	mov	r7,r5
 410cebc:	200d883a 	mov	r6,r4
 410cec0:	180b883a 	mov	r5,r3
 410cec4:	e13ff217 	ldw	r4,-56(fp)
 410cec8:	41076640 	call	4107664 <OSFlagPend>
 410cecc:	00000a06 	br	410cef8 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 410ced0:	0001883a 	nop
 410ced4:	e0bffc17 	ldw	r2,-16(fp)
 410ced8:	10c00d17 	ldw	r3,52(r2)
 410cedc:	e0bff317 	ldw	r2,-52(fp)
 410cee0:	1880051e 	bne	r3,r2,410cef8 <altera_avalon_jtag_uart_read+0x1c8>
 410cee4:	e0bffc17 	ldw	r2,-16(fp)
 410cee8:	10c00917 	ldw	r3,36(r2)
 410ceec:	e0bffc17 	ldw	r2,-16(fp)
 410cef0:	10800117 	ldw	r2,4(r2)
 410cef4:	18bff736 	bltu	r3,r2,410ced4 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 410cef8:	e0bffc17 	ldw	r2,-16(fp)
 410cefc:	10c00d17 	ldw	r3,52(r2)
 410cf00:	e0bff317 	ldw	r2,-52(fp)
 410cf04:	18800726 	beq	r3,r2,410cf24 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 410cf08:	e0bffe17 	ldw	r2,-8(fp)
 410cf0c:	00bf9d16 	blt	zero,r2,410cd84 <altera_avalon_jtag_uart_read+0x54>
 410cf10:	00000506 	br	410cf28 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 410cf14:	0001883a 	nop
 410cf18:	00000306 	br	410cf28 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 410cf1c:	0001883a 	nop
 410cf20:	00000106 	br	410cf28 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 410cf24:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 410cf28:	e0bffc17 	ldw	r2,-16(fp)
 410cf2c:	10800a17 	ldw	r2,40(r2)
 410cf30:	1009883a 	mov	r4,r2
 410cf34:	410a4440 	call	410a444 <OSSemPost>

  if (ptr != buffer)
 410cf38:	e0fff017 	ldw	r3,-64(fp)
 410cf3c:	e0bffd17 	ldw	r2,-12(fp)
 410cf40:	18801826 	beq	r3,r2,410cfa4 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410cf44:	0005303a 	rdctl	r2,status
 410cf48:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410cf4c:	e0fff717 	ldw	r3,-36(fp)
 410cf50:	00bfff84 	movi	r2,-2
 410cf54:	1884703a 	and	r2,r3,r2
 410cf58:	1001703a 	wrctl	status,r2
  
  return context;
 410cf5c:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 410cf60:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 410cf64:	e0bffc17 	ldw	r2,-16(fp)
 410cf68:	10800817 	ldw	r2,32(r2)
 410cf6c:	10c00054 	ori	r3,r2,1
 410cf70:	e0bffc17 	ldw	r2,-16(fp)
 410cf74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 410cf78:	e0bffc17 	ldw	r2,-16(fp)
 410cf7c:	10800017 	ldw	r2,0(r2)
 410cf80:	10800104 	addi	r2,r2,4
 410cf84:	1007883a 	mov	r3,r2
 410cf88:	e0bffc17 	ldw	r2,-16(fp)
 410cf8c:	10800817 	ldw	r2,32(r2)
 410cf90:	18800035 	stwio	r2,0(r3)
 410cf94:	e0bff617 	ldw	r2,-40(fp)
 410cf98:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410cf9c:	e0bff517 	ldw	r2,-44(fp)
 410cfa0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 410cfa4:	e0fff017 	ldw	r3,-64(fp)
 410cfa8:	e0bffd17 	ldw	r2,-12(fp)
 410cfac:	18800426 	beq	r3,r2,410cfc0 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 410cfb0:	e0fff017 	ldw	r3,-64(fp)
 410cfb4:	e0bffd17 	ldw	r2,-12(fp)
 410cfb8:	1885c83a 	sub	r2,r3,r2
 410cfbc:	00000606 	br	410cfd8 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 410cfc0:	e0bfff17 	ldw	r2,-4(fp)
 410cfc4:	1090000c 	andi	r2,r2,16384
 410cfc8:	10000226 	beq	r2,zero,410cfd4 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 410cfcc:	00bffd44 	movi	r2,-11
 410cfd0:	00000106 	br	410cfd8 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 410cfd4:	00bffec4 	movi	r2,-5
}
 410cfd8:	e037883a 	mov	sp,fp
 410cfdc:	dfc00117 	ldw	ra,4(sp)
 410cfe0:	df000017 	ldw	fp,0(sp)
 410cfe4:	dec00204 	addi	sp,sp,8
 410cfe8:	f800283a 	ret

0410cfec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 410cfec:	deffed04 	addi	sp,sp,-76
 410cff0:	dfc01215 	stw	ra,72(sp)
 410cff4:	df001115 	stw	fp,68(sp)
 410cff8:	df001104 	addi	fp,sp,68
 410cffc:	e13ffc15 	stw	r4,-16(fp)
 410d000:	e17ffd15 	stw	r5,-12(fp)
 410d004:	e1bffe15 	stw	r6,-8(fp)
 410d008:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 410d00c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 410d010:	e0bffd17 	ldw	r2,-12(fp)
 410d014:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 410d018:	e0bffc17 	ldw	r2,-16(fp)
 410d01c:	10800b17 	ldw	r2,44(r2)
 410d020:	e0bff815 	stw	r2,-32(fp)
 410d024:	e03ff90d 	sth	zero,-28(fp)
 410d028:	e0bff90b 	ldhu	r2,-28(fp)
 410d02c:	e0fffb44 	addi	r3,fp,-19
 410d030:	180d883a 	mov	r6,r3
 410d034:	100b883a 	mov	r5,r2
 410d038:	e13ff817 	ldw	r4,-32(fp)
 410d03c:	410a0cc0 	call	410a0cc <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 410d040:	00003706 	br	410d120 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 410d044:	e0bffc17 	ldw	r2,-16(fp)
 410d048:	10800f17 	ldw	r2,60(r2)
 410d04c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 410d050:	e0bffc17 	ldw	r2,-16(fp)
 410d054:	10801017 	ldw	r2,64(r2)
 410d058:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 410d05c:	e0fff417 	ldw	r3,-48(fp)
 410d060:	e0bff017 	ldw	r2,-64(fp)
 410d064:	1880062e 	bgeu	r3,r2,410d080 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 410d068:	e0fff017 	ldw	r3,-64(fp)
 410d06c:	e0bff417 	ldw	r2,-48(fp)
 410d070:	1885c83a 	sub	r2,r3,r2
 410d074:	10bfffc4 	addi	r2,r2,-1
 410d078:	e0bff115 	stw	r2,-60(fp)
 410d07c:	00000b06 	br	410d0ac <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 410d080:	e0bff017 	ldw	r2,-64(fp)
 410d084:	10000526 	beq	r2,zero,410d09c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 410d088:	00c20004 	movi	r3,2048
 410d08c:	e0bff417 	ldw	r2,-48(fp)
 410d090:	1885c83a 	sub	r2,r3,r2
 410d094:	e0bff115 	stw	r2,-60(fp)
 410d098:	00000406 	br	410d0ac <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 410d09c:	00c1ffc4 	movi	r3,2047
 410d0a0:	e0bff417 	ldw	r2,-48(fp)
 410d0a4:	1885c83a 	sub	r2,r3,r2
 410d0a8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 410d0ac:	e0bff117 	ldw	r2,-60(fp)
 410d0b0:	10001e26 	beq	r2,zero,410d12c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 410d0b4:	e0fffe17 	ldw	r3,-8(fp)
 410d0b8:	e0bff117 	ldw	r2,-60(fp)
 410d0bc:	1880022e 	bgeu	r3,r2,410d0c8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 410d0c0:	e0bffe17 	ldw	r2,-8(fp)
 410d0c4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 410d0c8:	e0bffc17 	ldw	r2,-16(fp)
 410d0cc:	10c21104 	addi	r3,r2,2116
 410d0d0:	e0bff417 	ldw	r2,-48(fp)
 410d0d4:	1885883a 	add	r2,r3,r2
 410d0d8:	e1bff117 	ldw	r6,-60(fp)
 410d0dc:	e17ffd17 	ldw	r5,-12(fp)
 410d0e0:	1009883a 	mov	r4,r2
 410d0e4:	4100bd40 	call	4100bd4 <memcpy>
      ptr   += n;
 410d0e8:	e0fffd17 	ldw	r3,-12(fp)
 410d0ec:	e0bff117 	ldw	r2,-60(fp)
 410d0f0:	1885883a 	add	r2,r3,r2
 410d0f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 410d0f8:	e0fffe17 	ldw	r3,-8(fp)
 410d0fc:	e0bff117 	ldw	r2,-60(fp)
 410d100:	1885c83a 	sub	r2,r3,r2
 410d104:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 410d108:	e0fff417 	ldw	r3,-48(fp)
 410d10c:	e0bff117 	ldw	r2,-60(fp)
 410d110:	1885883a 	add	r2,r3,r2
 410d114:	10c1ffcc 	andi	r3,r2,2047
 410d118:	e0bffc17 	ldw	r2,-16(fp)
 410d11c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 410d120:	e0bffe17 	ldw	r2,-8(fp)
 410d124:	00bfc716 	blt	zero,r2,410d044 <altera_avalon_jtag_uart_write+0x58>
 410d128:	00000106 	br	410d130 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 410d12c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410d130:	0005303a 	rdctl	r2,status
 410d134:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410d138:	e0fff717 	ldw	r3,-36(fp)
 410d13c:	00bfff84 	movi	r2,-2
 410d140:	1884703a 	and	r2,r3,r2
 410d144:	1001703a 	wrctl	status,r2
  
  return context;
 410d148:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 410d14c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 410d150:	e0bffc17 	ldw	r2,-16(fp)
 410d154:	10800817 	ldw	r2,32(r2)
 410d158:	10c00094 	ori	r3,r2,2
 410d15c:	e0bffc17 	ldw	r2,-16(fp)
 410d160:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 410d164:	e0bffc17 	ldw	r2,-16(fp)
 410d168:	10800017 	ldw	r2,0(r2)
 410d16c:	10800104 	addi	r2,r2,4
 410d170:	1007883a 	mov	r3,r2
 410d174:	e0bffc17 	ldw	r2,-16(fp)
 410d178:	10800817 	ldw	r2,32(r2)
 410d17c:	18800035 	stwio	r2,0(r3)
 410d180:	e0bff617 	ldw	r2,-40(fp)
 410d184:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410d188:	e0bff317 	ldw	r2,-52(fp)
 410d18c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 410d190:	e0bffe17 	ldw	r2,-8(fp)
 410d194:	00802a0e 	bge	zero,r2,410d240 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 410d198:	e0bfff17 	ldw	r2,-4(fp)
 410d19c:	1090000c 	andi	r2,r2,16384
 410d1a0:	10002a1e 	bne	r2,zero,410d24c <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 410d1a4:	d0a72343 	ldbu	r2,-25459(gp)
 410d1a8:	10803fcc 	andi	r2,r2,255
 410d1ac:	10800058 	cmpnei	r2,r2,1
 410d1b0:	1000161e 	bne	r2,zero,410d20c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 410d1b4:	e0bffc17 	ldw	r2,-16(fp)
 410d1b8:	10800c17 	ldw	r2,48(r2)
 410d1bc:	e0bff515 	stw	r2,-44(fp)
 410d1c0:	00800184 	movi	r2,6
 410d1c4:	e0bff98d 	sth	r2,-26(fp)
 410d1c8:	00bfe0c4 	movi	r2,-125
 410d1cc:	e0bffa05 	stb	r2,-24(fp)
 410d1d0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 410d1d4:	d0a72343 	ldbu	r2,-25459(gp)
 410d1d8:	10803fcc 	andi	r2,r2,255
 410d1dc:	10001526 	beq	r2,zero,410d234 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 410d1e0:	e0fff98b 	ldhu	r3,-26(fp)
 410d1e4:	e13ffa03 	ldbu	r4,-24(fp)
 410d1e8:	e17ffa8b 	ldhu	r5,-22(fp)
 410d1ec:	e0bffb04 	addi	r2,fp,-20
 410d1f0:	d8800015 	stw	r2,0(sp)
 410d1f4:	280f883a 	mov	r7,r5
 410d1f8:	200d883a 	mov	r6,r4
 410d1fc:	180b883a 	mov	r5,r3
 410d200:	e13ff517 	ldw	r4,-44(fp)
 410d204:	41076640 	call	4107664 <OSFlagPend>
 410d208:	00000a06 	br	410d234 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 410d20c:	0001883a 	nop
 410d210:	e0bffc17 	ldw	r2,-16(fp)
 410d214:	10c01017 	ldw	r3,64(r2)
 410d218:	e0bff017 	ldw	r2,-64(fp)
 410d21c:	1880051e 	bne	r3,r2,410d234 <altera_avalon_jtag_uart_write+0x248>
 410d220:	e0bffc17 	ldw	r2,-16(fp)
 410d224:	10c00917 	ldw	r3,36(r2)
 410d228:	e0bffc17 	ldw	r2,-16(fp)
 410d22c:	10800117 	ldw	r2,4(r2)
 410d230:	18bff736 	bltu	r3,r2,410d210 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 410d234:	e0bffc17 	ldw	r2,-16(fp)
 410d238:	10800917 	ldw	r2,36(r2)
 410d23c:	1000051e 	bne	r2,zero,410d254 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 410d240:	e0bffe17 	ldw	r2,-8(fp)
 410d244:	00bfb616 	blt	zero,r2,410d120 <altera_avalon_jtag_uart_write+0x134>
 410d248:	00000306 	br	410d258 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 410d24c:	0001883a 	nop
 410d250:	00000106 	br	410d258 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 410d254:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 410d258:	e0bffc17 	ldw	r2,-16(fp)
 410d25c:	10800b17 	ldw	r2,44(r2)
 410d260:	1009883a 	mov	r4,r2
 410d264:	410a4440 	call	410a444 <OSSemPost>

  if (ptr != start)
 410d268:	e0fffd17 	ldw	r3,-12(fp)
 410d26c:	e0bff217 	ldw	r2,-56(fp)
 410d270:	18800426 	beq	r3,r2,410d284 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 410d274:	e0fffd17 	ldw	r3,-12(fp)
 410d278:	e0bff217 	ldw	r2,-56(fp)
 410d27c:	1885c83a 	sub	r2,r3,r2
 410d280:	00000606 	br	410d29c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 410d284:	e0bfff17 	ldw	r2,-4(fp)
 410d288:	1090000c 	andi	r2,r2,16384
 410d28c:	10000226 	beq	r2,zero,410d298 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 410d290:	00bffd44 	movi	r2,-11
 410d294:	00000106 	br	410d29c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 410d298:	00bffec4 	movi	r2,-5
}
 410d29c:	e037883a 	mov	sp,fp
 410d2a0:	dfc00117 	ldw	ra,4(sp)
 410d2a4:	df000017 	ldw	fp,0(sp)
 410d2a8:	dec00204 	addi	sp,sp,8
 410d2ac:	f800283a 	ret

0410d2b0 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 410d2b0:	defffd04 	addi	sp,sp,-12
 410d2b4:	df000215 	stw	fp,8(sp)
 410d2b8:	df000204 	addi	fp,sp,8
 410d2bc:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 410d2c0:	008e84b4 	movhi	r2,14866
 410d2c4:	10ac1144 	addi	r2,r2,-20411
 410d2c8:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 410d2cc:	e0bfff17 	ldw	r2,-4(fp)
 410d2d0:	10800a17 	ldw	r2,40(r2)
 410d2d4:	10800104 	addi	r2,r2,4
 410d2d8:	1007883a 	mov	r3,r2
 410d2dc:	e0bffe17 	ldw	r2,-8(fp)
 410d2e0:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 410d2e4:	e0bfff17 	ldw	r2,-4(fp)
 410d2e8:	10800a17 	ldw	r2,40(r2)
 410d2ec:	10800104 	addi	r2,r2,4
 410d2f0:	10800037 	ldwio	r2,0(r2)
 410d2f4:	1007883a 	mov	r3,r2
 410d2f8:	e0bffe17 	ldw	r2,-8(fp)
 410d2fc:	1880081e 	bne	r3,r2,410d320 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 410d300:	e0bfff17 	ldw	r2,-4(fp)
 410d304:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 410d308:	e0bfff17 	ldw	r2,-4(fp)
 410d30c:	10800a17 	ldw	r2,40(r2)
 410d310:	10800104 	addi	r2,r2,4
 410d314:	0007883a 	mov	r3,zero
 410d318:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 410d31c:	00000306 	br	410d32c <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 410d320:	e0bfff17 	ldw	r2,-4(fp)
 410d324:	00c00044 	movi	r3,1
 410d328:	10c00f15 	stw	r3,60(r2)
    }
}
 410d32c:	0001883a 	nop
 410d330:	e037883a 	mov	sp,fp
 410d334:	df000017 	ldw	fp,0(sp)
 410d338:	dec00104 	addi	sp,sp,4
 410d33c:	f800283a 	ret

0410d340 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 410d340:	defffc04 	addi	sp,sp,-16
 410d344:	df000315 	stw	fp,12(sp)
 410d348:	df000304 	addi	fp,sp,12
 410d34c:	e13ffe15 	stw	r4,-8(fp)
 410d350:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 410d354:	e0bfff17 	ldw	r2,-4(fp)
 410d358:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 410d35c:	e0bffd17 	ldw	r2,-12(fp)
 410d360:	10001026 	beq	r2,zero,410d3a4 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 410d364:	e0bffe17 	ldw	r2,-8(fp)
 410d368:	10800a17 	ldw	r2,40(r2)
 410d36c:	10800104 	addi	r2,r2,4
 410d370:	1007883a 	mov	r3,r2
 410d374:	e0bffd17 	ldw	r2,-12(fp)
 410d378:	10800104 	addi	r2,r2,4
 410d37c:	10800017 	ldw	r2,0(r2)
 410d380:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 410d384:	e0bffe17 	ldw	r2,-8(fp)
 410d388:	10800a17 	ldw	r2,40(r2)
 410d38c:	1007883a 	mov	r3,r2
 410d390:	e0bffd17 	ldw	r2,-12(fp)
 410d394:	10800017 	ldw	r2,0(r2)
 410d398:	18800035 	stwio	r2,0(r3)
        return 0;
 410d39c:	0005883a 	mov	r2,zero
 410d3a0:	00000106 	br	410d3a8 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 410d3a4:	00bffa84 	movi	r2,-22
}
 410d3a8:	e037883a 	mov	sp,fp
 410d3ac:	df000017 	ldw	fp,0(sp)
 410d3b0:	dec00104 	addi	sp,sp,4
 410d3b4:	f800283a 	ret

0410d3b8 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 410d3b8:	defff604 	addi	sp,sp,-40
 410d3bc:	dfc00915 	stw	ra,36(sp)
 410d3c0:	df000815 	stw	fp,32(sp)
 410d3c4:	df000804 	addi	fp,sp,32
 410d3c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 410d3cc:	e0bfff17 	ldw	r2,-4(fp)
 410d3d0:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
 410d3d4:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 410d3d8:	e0bff817 	ldw	r2,-32(fp)
 410d3dc:	10801017 	ldw	r2,64(r2)
 410d3e0:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 410d3e4:	e0bff817 	ldw	r2,-32(fp)
 410d3e8:	10800a17 	ldw	r2,40(r2)
 410d3ec:	10800304 	addi	r2,r2,12
 410d3f0:	10800037 	ldwio	r2,0(r2)
 410d3f4:	1007883a 	mov	r3,r2
 410d3f8:	00bfff44 	movi	r2,-3
 410d3fc:	1884703a 	and	r2,r3,r2
 410d400:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 410d404:	e0bff817 	ldw	r2,-32(fp)
 410d408:	10800a17 	ldw	r2,40(r2)
 410d40c:	10800304 	addi	r2,r2,12
 410d410:	1007883a 	mov	r3,r2
 410d414:	e0bffb17 	ldw	r2,-20(fp)
 410d418:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 410d41c:	e0bffa17 	ldw	r2,-24(fp)
 410d420:	10002d26 	beq	r2,zero,410d4d8 <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 410d424:	e0bff817 	ldw	r2,-32(fp)
 410d428:	10800a17 	ldw	r2,40(r2)
 410d42c:	10800104 	addi	r2,r2,4
 410d430:	1007883a 	mov	r3,r2
 410d434:	e0bffa17 	ldw	r2,-24(fp)
 410d438:	10800104 	addi	r2,r2,4
 410d43c:	10800017 	ldw	r2,0(r2)
 410d440:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 410d444:	e0bff817 	ldw	r2,-32(fp)
 410d448:	10800a17 	ldw	r2,40(r2)
 410d44c:	1007883a 	mov	r3,r2
 410d450:	e0bffa17 	ldw	r2,-24(fp)
 410d454:	10800017 	ldw	r2,0(r2)
 410d458:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 410d45c:	e0bff817 	ldw	r2,-32(fp)
 410d460:	10800a17 	ldw	r2,40(r2)
 410d464:	10800204 	addi	r2,r2,8
 410d468:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 410d46c:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 410d470:	1005d07a 	srai	r2,r2,1
 410d474:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 410d478:	e0bff817 	ldw	r2,-32(fp)
 410d47c:	10800d17 	ldw	r2,52(r2)
 410d480:	10001126 	beq	r2,zero,410d4c8 <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410d484:	0005303a 	rdctl	r2,status
 410d488:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410d48c:	e0fffd17 	ldw	r3,-12(fp)
 410d490:	00bfff84 	movi	r2,-2
 410d494:	1884703a 	and	r2,r3,r2
 410d498:	1001703a 	wrctl	status,r2
  
  return context;
 410d49c:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
 410d4a0:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
 410d4a4:	e0bff817 	ldw	r2,-32(fp)
 410d4a8:	10800d17 	ldw	r2,52(r2)
 410d4ac:	e17ff917 	ldw	r5,-28(fp)
 410d4b0:	e13ffa17 	ldw	r4,-24(fp)
 410d4b4:	103ee83a 	callr	r2
 410d4b8:	e0bffc17 	ldw	r2,-16(fp)
 410d4bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410d4c0:	e0bffe17 	ldw	r2,-8(fp)
 410d4c4:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 410d4c8:	e0bff817 	ldw	r2,-32(fp)
 410d4cc:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 410d4d0:	e0bff817 	ldw	r2,-32(fp)
 410d4d4:	10001105 	stb	zero,68(r2)
    }
}
 410d4d8:	0001883a 	nop
 410d4dc:	e037883a 	mov	sp,fp
 410d4e0:	dfc00117 	ldw	ra,4(sp)
 410d4e4:	df000017 	ldw	fp,0(sp)
 410d4e8:	dec00204 	addi	sp,sp,8
 410d4ec:	f800283a 	ret

0410d4f0 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 410d4f0:	defff704 	addi	sp,sp,-36
 410d4f4:	dfc00815 	stw	ra,32(sp)
 410d4f8:	df000715 	stw	fp,28(sp)
 410d4fc:	df000704 	addi	fp,sp,28
 410d500:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 410d504:	e0bfff17 	ldw	r2,-4(fp)
 410d508:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 410d50c:	e0bff917 	ldw	r2,-28(fp)
 410d510:	10800a17 	ldw	r2,40(r2)
 410d514:	10800104 	addi	r2,r2,4
 410d518:	10800037 	ldwio	r2,0(r2)
 410d51c:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 410d520:	e0bff917 	ldw	r2,-28(fp)
 410d524:	10800a17 	ldw	r2,40(r2)
 410d528:	10800037 	ldwio	r2,0(r2)
 410d52c:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 410d530:	e0bff917 	ldw	r2,-28(fp)
 410d534:	10800e17 	ldw	r2,56(r2)
 410d538:	10001126 	beq	r2,zero,410d580 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410d53c:	0005303a 	rdctl	r2,status
 410d540:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410d544:	e0fffb17 	ldw	r3,-20(fp)
 410d548:	00bfff84 	movi	r2,-2
 410d54c:	1884703a 	and	r2,r3,r2
 410d550:	1001703a 	wrctl	status,r2
  
  return context;
 410d554:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 410d558:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
 410d55c:	e0bff917 	ldw	r2,-28(fp)
 410d560:	10800e17 	ldw	r2,56(r2)
 410d564:	e0fffd04 	addi	r3,fp,-12
 410d568:	1809883a 	mov	r4,r3
 410d56c:	103ee83a 	callr	r2
 410d570:	e0bffa17 	ldw	r2,-24(fp)
 410d574:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410d578:	e0bffc17 	ldw	r2,-16(fp)
 410d57c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 410d580:	0001883a 	nop
 410d584:	e037883a 	mov	sp,fp
 410d588:	dfc00117 	ldw	ra,4(sp)
 410d58c:	df000017 	ldw	fp,0(sp)
 410d590:	dec00204 	addi	sp,sp,8
 410d594:	f800283a 	ret

0410d598 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 410d598:	defff704 	addi	sp,sp,-36
 410d59c:	dfc00815 	stw	ra,32(sp)
 410d5a0:	df000715 	stw	fp,28(sp)
 410d5a4:	df000704 	addi	fp,sp,28
 410d5a8:	e13ffb15 	stw	r4,-20(fp)
 410d5ac:	e17ffc15 	stw	r5,-16(fp)
 410d5b0:	e1bffd15 	stw	r6,-12(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 410d5b4:	d1602d04 	addi	r5,gp,-32588
 410d5b8:	e13ffb17 	ldw	r4,-20(fp)
 410d5bc:	410e2640 	call	410e264 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 410d5c0:	e0fffd17 	ldw	r3,-12(fp)
 410d5c4:	e0bffb17 	ldw	r2,-20(fp)
 410d5c8:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 410d5cc:	e0fffc17 	ldw	r3,-16(fp)
 410d5d0:	e0bffb17 	ldw	r2,-20(fp)
 410d5d4:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 410d5d8:	e0bffb17 	ldw	r2,-20(fp)
 410d5dc:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 410d5e0:	e0bffb17 	ldw	r2,-20(fp)
 410d5e4:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 410d5e8:	e0bffb17 	ldw	r2,-20(fp)
 410d5ec:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);
 410d5f0:	e0bffb17 	ldw	r2,-20(fp)
 410d5f4:	10801204 	addi	r2,r2,72
 410d5f8:	e0bff915 	stw	r2,-28(fp)
 410d5fc:	00800044 	movi	r2,1
 410d600:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 410d604:	e0bffa0b 	ldhu	r2,-24(fp)
 410d608:	1009883a 	mov	r4,r2
 410d60c:	4109db40 	call	4109db4 <OSSemCreate>
 410d610:	1007883a 	mov	r3,r2
 410d614:	e0bff917 	ldw	r2,-28(fp)
 410d618:	10c00015 	stw	r3,0(r2)

    altera_avalon_mailbox_identify(dev);
 410d61c:	e13ffb17 	ldw	r4,-20(fp)
 410d620:	410d2b00 	call	410d2b0 <altera_avalon_mailbox_identify>
}
 410d624:	0001883a 	nop
 410d628:	e037883a 	mov	sp,fp
 410d62c:	dfc00117 	ldw	ra,4(sp)
 410d630:	df000017 	ldw	fp,0(sp)
 410d634:	dec00204 	addi	sp,sp,8
 410d638:	f800283a 	ret

0410d63c <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 410d63c:	defff804 	addi	sp,sp,-32
 410d640:	dfc00715 	stw	ra,28(sp)
 410d644:	df000615 	stw	fp,24(sp)
 410d648:	df000604 	addi	fp,sp,24
 410d64c:	e13ffd15 	stw	r4,-12(fp)
 410d650:	e17ffe15 	stw	r5,-8(fp)
 410d654:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 410d658:	d1602d04 	addi	r5,gp,-32588
 410d65c:	e13ffd17 	ldw	r4,-12(fp)
 410d660:	410e3c80 	call	410e3c8 <alt_find_dev>
 410d664:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 410d668:	e0bffb17 	ldw	r2,-20(fp)
 410d66c:	1000021e 	bne	r2,zero,410d678 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 410d670:	0005883a 	mov	r2,zero
 410d674:	00006506 	br	410d80c <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 410d678:	e0bffb17 	ldw	r2,-20(fp)
 410d67c:	10800a17 	ldw	r2,40(r2)
 410d680:	10800304 	addi	r2,r2,12
 410d684:	10800037 	ldwio	r2,0(r2)
 410d688:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 410d68c:	e0bffb17 	ldw	r2,-20(fp)
 410d690:	10800f17 	ldw	r2,60(r2)
 410d694:	1000081e 	bne	r2,zero,410d6b8 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 410d698:	e0bffb17 	ldw	r2,-20(fp)
 410d69c:	10800a17 	ldw	r2,40(r2)
 410d6a0:	10800304 	addi	r2,r2,12
 410d6a4:	1009883a 	mov	r4,r2
 410d6a8:	e0fffc17 	ldw	r3,-16(fp)
 410d6ac:	00bfff44 	movi	r2,-3
 410d6b0:	1884703a 	and	r2,r3,r2
 410d6b4:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 410d6b8:	e0bffb17 	ldw	r2,-20(fp)
 410d6bc:	10800f17 	ldw	r2,60(r2)
 410d6c0:	10800058 	cmpnei	r2,r2,1
 410d6c4:	1000081e 	bne	r2,zero,410d6e8 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 410d6c8:	e0bffb17 	ldw	r2,-20(fp)
 410d6cc:	10800a17 	ldw	r2,40(r2)
 410d6d0:	10800304 	addi	r2,r2,12
 410d6d4:	1009883a 	mov	r4,r2
 410d6d8:	e0fffc17 	ldw	r3,-16(fp)
 410d6dc:	00bfff84 	movi	r2,-2
 410d6e0:	1884703a 	and	r2,r3,r2
 410d6e4:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 410d6e8:	e0bffb17 	ldw	r2,-20(fp)
 410d6ec:	10800b17 	ldw	r2,44(r2)
 410d6f0:	10bfffd8 	cmpnei	r2,r2,-1
 410d6f4:	1000021e 	bne	r2,zero,410d700 <altera_avalon_mailbox_open+0xc4>
        return dev;
 410d6f8:	e0bffb17 	ldw	r2,-20(fp)
 410d6fc:	00004306 	br	410d80c <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 410d700:	e0bffe17 	ldw	r2,-8(fp)
 410d704:	1000041e 	bne	r2,zero,410d718 <altera_avalon_mailbox_open+0xdc>
 410d708:	e0bfff17 	ldw	r2,-4(fp)
 410d70c:	1000021e 	bne	r2,zero,410d718 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 410d710:	e0bffb17 	ldw	r2,-20(fp)
 410d714:	00003d06 	br	410d80c <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 410d718:	e0bffb17 	ldw	r2,-20(fp)
 410d71c:	10800f17 	ldw	r2,60(r2)
 410d720:	1000021e 	bne	r2,zero,410d72c <altera_avalon_mailbox_open+0xf0>
 410d724:	e0bfff17 	ldw	r2,-4(fp)
 410d728:	1000061e 	bne	r2,zero,410d744 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 410d72c:	e0bffb17 	ldw	r2,-20(fp)
 410d730:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 410d734:	10800058 	cmpnei	r2,r2,1
 410d738:	1000041e 	bne	r2,zero,410d74c <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 410d73c:	e0bffe17 	ldw	r2,-8(fp)
 410d740:	10000226 	beq	r2,zero,410d74c <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 410d744:	0005883a 	mov	r2,zero
 410d748:	00003006 	br	410d80c <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 410d74c:	e0bffb17 	ldw	r2,-20(fp)
 410d750:	e0fffe17 	ldw	r3,-8(fp)
 410d754:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 410d758:	e0bffb17 	ldw	r2,-20(fp)
 410d75c:	e0ffff17 	ldw	r3,-4(fp)
 410d760:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 410d764:	e0bffb17 	ldw	r2,-20(fp)
 410d768:	10800f17 	ldw	r2,60(r2)
 410d76c:	10000b1e 	bne	r2,zero,410d79c <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 410d770:	e0bffb17 	ldw	r2,-20(fp)
 410d774:	10c00c17 	ldw	r3,48(r2)
 410d778:	e0bffb17 	ldw	r2,-20(fp)
 410d77c:	10800b17 	ldw	r2,44(r2)
 410d780:	d8000015 	stw	zero,0(sp)
 410d784:	e1fffb17 	ldw	r7,-20(fp)
 410d788:	01810474 	movhi	r6,1041
 410d78c:	31b4ee04 	addi	r6,r6,-11336
 410d790:	100b883a 	mov	r5,r2
 410d794:	1809883a 	mov	r4,r3
 410d798:	4103d880 	call	4103d88 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 410d79c:	e0bffb17 	ldw	r2,-20(fp)
 410d7a0:	10800f17 	ldw	r2,60(r2)
 410d7a4:	10800058 	cmpnei	r2,r2,1
 410d7a8:	1000171e 	bne	r2,zero,410d808 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 410d7ac:	e0bffb17 	ldw	r2,-20(fp)
 410d7b0:	10c00c17 	ldw	r3,48(r2)
 410d7b4:	e0bffb17 	ldw	r2,-20(fp)
 410d7b8:	10800b17 	ldw	r2,44(r2)
 410d7bc:	d8000015 	stw	zero,0(sp)
 410d7c0:	e1fffb17 	ldw	r7,-20(fp)
 410d7c4:	01810474 	movhi	r6,1041
 410d7c8:	31b53c04 	addi	r6,r6,-11024
 410d7cc:	100b883a 	mov	r5,r2
 410d7d0:	1809883a 	mov	r4,r3
 410d7d4:	4103d880 	call	4103d88 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 410d7d8:	e0bffb17 	ldw	r2,-20(fp)
 410d7dc:	10800a17 	ldw	r2,40(r2)
 410d7e0:	10800304 	addi	r2,r2,12
 410d7e4:	10800037 	ldwio	r2,0(r2)
 410d7e8:	10800054 	ori	r2,r2,1
 410d7ec:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 410d7f0:	e0bffb17 	ldw	r2,-20(fp)
 410d7f4:	10800a17 	ldw	r2,40(r2)
 410d7f8:	10800304 	addi	r2,r2,12
 410d7fc:	1007883a 	mov	r3,r2
 410d800:	e0bffc17 	ldw	r2,-16(fp)
 410d804:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 410d808:	e0bffb17 	ldw	r2,-20(fp)
}
 410d80c:	e037883a 	mov	sp,fp
 410d810:	dfc00117 	ldw	ra,4(sp)
 410d814:	df000017 	ldw	fp,0(sp)
 410d818:	dec00204 	addi	sp,sp,8
 410d81c:	f800283a 	ret

0410d820 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 410d820:	defffb04 	addi	sp,sp,-20
 410d824:	dfc00415 	stw	ra,16(sp)
 410d828:	df000315 	stw	fp,12(sp)
 410d82c:	df000304 	addi	fp,sp,12
 410d830:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 410d834:	e0bfff17 	ldw	r2,-4(fp)
 410d838:	10003926 	beq	r2,zero,410d920 <altera_avalon_mailbox_close+0x100>
 410d83c:	e0bfff17 	ldw	r2,-4(fp)
 410d840:	10800b17 	ldw	r2,44(r2)
 410d844:	10bfffe0 	cmpeqi	r2,r2,-1
 410d848:	1000351e 	bne	r2,zero,410d920 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 410d84c:	e0bfff17 	ldw	r2,-4(fp)
 410d850:	10800f17 	ldw	r2,60(r2)
 410d854:	10000e1e 	bne	r2,zero,410d890 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 410d858:	e0bfff17 	ldw	r2,-4(fp)
 410d85c:	10800a17 	ldw	r2,40(r2)
 410d860:	10800304 	addi	r2,r2,12
 410d864:	10800037 	ldwio	r2,0(r2)
 410d868:	1007883a 	mov	r3,r2
 410d86c:	00bfff44 	movi	r2,-3
 410d870:	1884703a 	and	r2,r3,r2
 410d874:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 410d878:	e0bfff17 	ldw	r2,-4(fp)
 410d87c:	10800a17 	ldw	r2,40(r2)
 410d880:	10800304 	addi	r2,r2,12
 410d884:	1007883a 	mov	r3,r2
 410d888:	e0bffe17 	ldw	r2,-8(fp)
 410d88c:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 410d890:	e0bfff17 	ldw	r2,-4(fp)
 410d894:	10800f17 	ldw	r2,60(r2)
 410d898:	10800058 	cmpnei	r2,r2,1
 410d89c:	10000e1e 	bne	r2,zero,410d8d8 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 410d8a0:	e0bfff17 	ldw	r2,-4(fp)
 410d8a4:	10800a17 	ldw	r2,40(r2)
 410d8a8:	10800304 	addi	r2,r2,12
 410d8ac:	10800037 	ldwio	r2,0(r2)
 410d8b0:	1007883a 	mov	r3,r2
 410d8b4:	00bfff84 	movi	r2,-2
 410d8b8:	1884703a 	and	r2,r3,r2
 410d8bc:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 410d8c0:	e0bfff17 	ldw	r2,-4(fp)
 410d8c4:	10800a17 	ldw	r2,40(r2)
 410d8c8:	10800304 	addi	r2,r2,12
 410d8cc:	1007883a 	mov	r3,r2
 410d8d0:	e0bffe17 	ldw	r2,-8(fp)
 410d8d4:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 410d8d8:	e0bfff17 	ldw	r2,-4(fp)
 410d8dc:	10800b17 	ldw	r2,44(r2)
 410d8e0:	10bfffe0 	cmpeqi	r2,r2,-1
 410d8e4:	10000a1e 	bne	r2,zero,410d910 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 410d8e8:	e0bfff17 	ldw	r2,-4(fp)
 410d8ec:	10c00c17 	ldw	r3,48(r2)
 410d8f0:	e0bfff17 	ldw	r2,-4(fp)
 410d8f4:	10800b17 	ldw	r2,44(r2)
 410d8f8:	d8000015 	stw	zero,0(sp)
 410d8fc:	e1ffff17 	ldw	r7,-4(fp)
 410d900:	000d883a 	mov	r6,zero
 410d904:	100b883a 	mov	r5,r2
 410d908:	1809883a 	mov	r4,r3
 410d90c:	4103d880 	call	4103d88 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 410d910:	e0bfff17 	ldw	r2,-4(fp)
 410d914:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 410d918:	e0bfff17 	ldw	r2,-4(fp)
 410d91c:	10000e15 	stw	zero,56(r2)
    }
}
 410d920:	0001883a 	nop
 410d924:	e037883a 	mov	sp,fp
 410d928:	dfc00117 	ldw	ra,4(sp)
 410d92c:	df000017 	ldw	fp,0(sp)
 410d930:	dec00204 	addi	sp,sp,8
 410d934:	f800283a 	ret

0410d938 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 410d938:	defffd04 	addi	sp,sp,-12
 410d93c:	df000215 	stw	fp,8(sp)
 410d940:	df000204 	addi	fp,sp,8
 410d944:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 410d948:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 410d94c:	e0bfff17 	ldw	r2,-4(fp)
 410d950:	10800a17 	ldw	r2,40(r2)
 410d954:	10800204 	addi	r2,r2,8
 410d958:	10800037 	ldwio	r2,0(r2)
 410d95c:	108000cc 	andi	r2,r2,3
 410d960:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 410d964:	e0bfff17 	ldw	r2,-4(fp)
 410d968:	10800f17 	ldw	r2,60(r2)
 410d96c:	1000041e 	bne	r2,zero,410d980 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 410d970:	e0bffe17 	ldw	r2,-8(fp)
 410d974:	1080008c 	andi	r2,r2,2
 410d978:	1004d07a 	srli	r2,r2,1
 410d97c:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 410d980:	e0bfff17 	ldw	r2,-4(fp)
 410d984:	10800f17 	ldw	r2,60(r2)
 410d988:	10800058 	cmpnei	r2,r2,1
 410d98c:	1000031e 	bne	r2,zero,410d99c <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 410d990:	e0bffe17 	ldw	r2,-8(fp)
 410d994:	1080004c 	andi	r2,r2,1
 410d998:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 410d99c:	e0bffe17 	ldw	r2,-8(fp)
}
 410d9a0:	e037883a 	mov	sp,fp
 410d9a4:	df000017 	ldw	fp,0(sp)
 410d9a8:	dec00104 	addi	sp,sp,4
 410d9ac:	f800283a 	ret

0410d9b0 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 410d9b0:	defff504 	addi	sp,sp,-44
 410d9b4:	dfc00a15 	stw	ra,40(sp)
 410d9b8:	df000915 	stw	fp,36(sp)
 410d9bc:	df000904 	addi	fp,sp,36
 410d9c0:	e13ffc15 	stw	r4,-16(fp)
 410d9c4:	e17ffd15 	stw	r5,-12(fp)
 410d9c8:	e1bffe15 	stw	r6,-8(fp)
 410d9cc:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 410d9d0:	e03ff715 	stw	zero,-36(fp)
  
    /*
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);
 410d9d4:	e0bffc17 	ldw	r2,-16(fp)
 410d9d8:	10801217 	ldw	r2,72(r2)
 410d9dc:	e0bffa15 	stw	r2,-24(fp)
 410d9e0:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 410d9e4:	e0bffb0b 	ldhu	r2,-20(fp)
 410d9e8:	e0fffb84 	addi	r3,fp,-18
 410d9ec:	180d883a 	mov	r6,r3
 410d9f0:	100b883a 	mov	r5,r2
 410d9f4:	e13ffa17 	ldw	r4,-24(fp)
 410d9f8:	410a0cc0 	call	410a0cc <OSSemPend>

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 410d9fc:	e0bffc17 	ldw	r2,-16(fp)
 410da00:	10801103 	ldbu	r2,68(r2)
 410da04:	10803fcc 	andi	r2,r2,255
 410da08:	1000061e 	bne	r2,zero,410da24 <altera_avalon_mailbox_send+0x74>
 410da0c:	e0bffc17 	ldw	r2,-16(fp)
 410da10:	10800a17 	ldw	r2,40(r2)
 410da14:	10800204 	addi	r2,r2,8
 410da18:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 410da1c:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 410da20:	10000226 	beq	r2,zero,410da2c <altera_avalon_mailbox_send+0x7c>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 410da24:	00bfffc4 	movi	r2,-1
 410da28:	00003e06 	br	410db24 <altera_avalon_mailbox_send+0x174>
    }
    else
    {
        dev->mbox_msg = message;
 410da2c:	e0bffc17 	ldw	r2,-16(fp)
 410da30:	e0fffd17 	ldw	r3,-12(fp)
 410da34:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 410da38:	e0bffc17 	ldw	r2,-16(fp)
 410da3c:	00c00044 	movi	r3,1
 410da40:	10c01105 	stb	r3,68(r2)
    }
    /*
     * Release the write semaphore so that other 
     * threads can access.
     */
    ALT_SEM_POST (dev->write_lock);
 410da44:	e0bffc17 	ldw	r2,-16(fp)
 410da48:	10801217 	ldw	r2,72(r2)
 410da4c:	1009883a 	mov	r4,r2
 410da50:	410a4440 	call	410a444 <OSSemPost>



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 410da54:	e0bffc17 	ldw	r2,-16(fp)
 410da58:	10800b17 	ldw	r2,44(r2)
 410da5c:	10bfffe0 	cmpeqi	r2,r2,-1
 410da60:	1000031e 	bne	r2,zero,410da70 <altera_avalon_mailbox_send+0xc0>
 410da64:	e0bfff17 	ldw	r2,-4(fp)
 410da68:	10800058 	cmpnei	r2,r2,1
 410da6c:	1000201e 	bne	r2,zero,410daf0 <altera_avalon_mailbox_send+0x140>
    {
        /* Polling mode */
        if (timeout ==0)
 410da70:	e0bffe17 	ldw	r2,-8(fp)
 410da74:	1000061e 	bne	r2,zero,410da90 <altera_avalon_mailbox_send+0xe0>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 410da78:	e13ffc17 	ldw	r4,-16(fp)
 410da7c:	410d9380 	call	410d938 <altera_avalon_mailbox_status>
 410da80:	e0bff915 	stw	r2,-28(fp)
            } while (mbox_status);
 410da84:	e0bff917 	ldw	r2,-28(fp)
 410da88:	103ffb1e 	bne	r2,zero,410da78 <altera_avalon_mailbox_send+0xc8>
 410da8c:	00000e06 	br	410dac8 <altera_avalon_mailbox_send+0x118>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 410da90:	e13ffc17 	ldw	r4,-16(fp)
 410da94:	410d9380 	call	410d938 <altera_avalon_mailbox_status>
 410da98:	e0bff915 	stw	r2,-28(fp)
                timeout--;
 410da9c:	e0bffe17 	ldw	r2,-8(fp)
 410daa0:	10bfffc4 	addi	r2,r2,-1
 410daa4:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 410daa8:	e0bff917 	ldw	r2,-28(fp)
 410daac:	10000226 	beq	r2,zero,410dab8 <altera_avalon_mailbox_send+0x108>
 410dab0:	e0bffe17 	ldw	r2,-8(fp)
 410dab4:	103ff61e 	bne	r2,zero,410da90 <altera_avalon_mailbox_send+0xe0>
            if (timeout == 0)
 410dab8:	e0bffe17 	ldw	r2,-8(fp)
 410dabc:	1000021e 	bne	r2,zero,410dac8 <altera_avalon_mailbox_send+0x118>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 410dac0:	00bff084 	movi	r2,-62
 410dac4:	00001706 	br	410db24 <altera_avalon_mailbox_send+0x174>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 410dac8:	e17ffd17 	ldw	r5,-12(fp)
 410dacc:	e13ffc17 	ldw	r4,-16(fp)
 410dad0:	410d3400 	call	410d340 <altera_avalon_mailbox_post>
 410dad4:	e0bff715 	stw	r2,-36(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 410dad8:	e0bffc17 	ldw	r2,-16(fp)
 410dadc:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 410dae0:	e0bffc17 	ldw	r2,-16(fp)
 410dae4:	10001105 	stb	zero,68(r2)
        return status;
 410dae8:	e0bff717 	ldw	r2,-36(fp)
 410daec:	00000d06 	br	410db24 <altera_avalon_mailbox_send+0x174>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 410daf0:	e0bffc17 	ldw	r2,-16(fp)
 410daf4:	10800a17 	ldw	r2,40(r2)
 410daf8:	10800304 	addi	r2,r2,12
 410dafc:	10800037 	ldwio	r2,0(r2)
 410db00:	10800094 	ori	r2,r2,2
 410db04:	e0bff815 	stw	r2,-32(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 410db08:	e0bffc17 	ldw	r2,-16(fp)
 410db0c:	10800a17 	ldw	r2,40(r2)
 410db10:	10800304 	addi	r2,r2,12
 410db14:	1007883a 	mov	r3,r2
 410db18:	e0bff817 	ldw	r2,-32(fp)
 410db1c:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 410db20:	0005883a 	mov	r2,zero
}
 410db24:	e037883a 	mov	sp,fp
 410db28:	dfc00117 	ldw	ra,4(sp)
 410db2c:	df000017 	ldw	fp,0(sp)
 410db30:	dec00204 	addi	sp,sp,8
 410db34:	f800283a 	ret

0410db38 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 410db38:	defff904 	addi	sp,sp,-28
 410db3c:	dfc00615 	stw	ra,24(sp)
 410db40:	df000515 	stw	fp,20(sp)
 410db44:	df000504 	addi	fp,sp,20
 410db48:	e13ffd15 	stw	r4,-12(fp)
 410db4c:	e17ffe15 	stw	r5,-8(fp)
 410db50:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 410db54:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 410db58:	e0bffd17 	ldw	r2,-12(fp)
 410db5c:	10003a26 	beq	r2,zero,410dc48 <altera_avalon_mailbox_retrieve_poll+0x110>
 410db60:	e0bffe17 	ldw	r2,-8(fp)
 410db64:	10003826 	beq	r2,zero,410dc48 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 410db68:	e0bffd17 	ldw	r2,-12(fp)
 410db6c:	10800a17 	ldw	r2,40(r2)
 410db70:	10800304 	addi	r2,r2,12
 410db74:	10800037 	ldwio	r2,0(r2)
 410db78:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 410db7c:	e0bffd17 	ldw	r2,-12(fp)
 410db80:	10800a17 	ldw	r2,40(r2)
 410db84:	10800304 	addi	r2,r2,12
 410db88:	1009883a 	mov	r4,r2
 410db8c:	e0fffc17 	ldw	r3,-16(fp)
 410db90:	00bfff84 	movi	r2,-2
 410db94:	1884703a 	and	r2,r3,r2
 410db98:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 410db9c:	e0bfff17 	ldw	r2,-4(fp)
 410dba0:	1000061e 	bne	r2,zero,410dbbc <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 410dba4:	e13ffd17 	ldw	r4,-12(fp)
 410dba8:	410d9380 	call	410d938 <altera_avalon_mailbox_status>
 410dbac:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 410dbb0:	e0bffb17 	ldw	r2,-20(fp)
 410dbb4:	103ffb26 	beq	r2,zero,410dba4 <altera_avalon_mailbox_retrieve_poll+0x6c>
 410dbb8:	00000a06 	br	410dbe4 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 410dbbc:	e13ffd17 	ldw	r4,-12(fp)
 410dbc0:	410d9380 	call	410d938 <altera_avalon_mailbox_status>
 410dbc4:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 410dbc8:	e0bfff17 	ldw	r2,-4(fp)
 410dbcc:	10bfffc4 	addi	r2,r2,-1
 410dbd0:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 410dbd4:	e0bffb17 	ldw	r2,-20(fp)
 410dbd8:	1000021e 	bne	r2,zero,410dbe4 <altera_avalon_mailbox_retrieve_poll+0xac>
 410dbdc:	e0bfff17 	ldw	r2,-4(fp)
 410dbe0:	103ff61e 	bne	r2,zero,410dbbc <altera_avalon_mailbox_retrieve_poll+0x84>
        }

        /* if timeout, status remain 0 */
        if (status)
 410dbe4:	e0bffb17 	ldw	r2,-20(fp)
 410dbe8:	10000d26 	beq	r2,zero,410dc20 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 410dbec:	e0bffe17 	ldw	r2,-8(fp)
 410dbf0:	10800104 	addi	r2,r2,4
 410dbf4:	e0fffd17 	ldw	r3,-12(fp)
 410dbf8:	18c00a17 	ldw	r3,40(r3)
 410dbfc:	18c00104 	addi	r3,r3,4
 410dc00:	18c00037 	ldwio	r3,0(r3)
 410dc04:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 410dc08:	e0bffd17 	ldw	r2,-12(fp)
 410dc0c:	10800a17 	ldw	r2,40(r2)
 410dc10:	10800037 	ldwio	r2,0(r2)
 410dc14:	1007883a 	mov	r3,r2
 410dc18:	e0bffe17 	ldw	r2,-8(fp)
 410dc1c:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 410dc20:	e0bffd17 	ldw	r2,-12(fp)
 410dc24:	10800a17 	ldw	r2,40(r2)
 410dc28:	10800304 	addi	r2,r2,12
 410dc2c:	1007883a 	mov	r3,r2
 410dc30:	e0bffc17 	ldw	r2,-16(fp)
 410dc34:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 410dc38:	e0bffb17 	ldw	r2,-20(fp)
 410dc3c:	10000226 	beq	r2,zero,410dc48 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 410dc40:	0005883a 	mov	r2,zero
 410dc44:	00000606 	br	410dc60 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 410dc48:	e0bffe17 	ldw	r2,-8(fp)
 410dc4c:	10800104 	addi	r2,r2,4
 410dc50:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 410dc54:	e0bffe17 	ldw	r2,-8(fp)
 410dc58:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 410dc5c:	00bffa84 	movi	r2,-22
}
 410dc60:	e037883a 	mov	sp,fp
 410dc64:	dfc00117 	ldw	ra,4(sp)
 410dc68:	df000017 	ldw	fp,0(sp)
 410dc6c:	dec00204 	addi	sp,sp,8
 410dc70:	f800283a 	ret

0410dc74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 410dc74:	defffe04 	addi	sp,sp,-8
 410dc78:	dfc00115 	stw	ra,4(sp)
 410dc7c:	df000015 	stw	fp,0(sp)
 410dc80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 410dc84:	d0a00917 	ldw	r2,-32732(gp)
 410dc88:	10000326 	beq	r2,zero,410dc98 <alt_get_errno+0x24>
 410dc8c:	d0a00917 	ldw	r2,-32732(gp)
 410dc90:	103ee83a 	callr	r2
 410dc94:	00000106 	br	410dc9c <alt_get_errno+0x28>
 410dc98:	d0a71004 	addi	r2,gp,-25536
}
 410dc9c:	e037883a 	mov	sp,fp
 410dca0:	dfc00117 	ldw	ra,4(sp)
 410dca4:	df000017 	ldw	fp,0(sp)
 410dca8:	dec00204 	addi	sp,sp,8
 410dcac:	f800283a 	ret

0410dcb0 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 410dcb0:	defff904 	addi	sp,sp,-28
 410dcb4:	df000615 	stw	fp,24(sp)
 410dcb8:	df000604 	addi	fp,sp,24
 410dcbc:	e13ffe15 	stw	r4,-8(fp)
 410dcc0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 410dcc4:	00bfffc4 	movi	r2,-1
 410dcc8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 410dccc:	0005317a 	rdctl	r2,cpuid
 410dcd0:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 410dcd4:	e0bffb17 	ldw	r2,-20(fp)
 410dcd8:	1006943a 	slli	r3,r2,16
 410dcdc:	e0bfff17 	ldw	r2,-4(fp)
 410dce0:	1884b03a 	or	r2,r3,r2
 410dce4:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 410dce8:	e0bffe17 	ldw	r2,-8(fp)
 410dcec:	10800317 	ldw	r2,12(r2)
 410dcf0:	e0fffc17 	ldw	r3,-16(fp)
 410dcf4:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 410dcf8:	e0bffe17 	ldw	r2,-8(fp)
 410dcfc:	10800317 	ldw	r2,12(r2)
 410dd00:	10800037 	ldwio	r2,0(r2)
 410dd04:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 410dd08:	e0fffd17 	ldw	r3,-12(fp)
 410dd0c:	e0bffc17 	ldw	r2,-16(fp)
 410dd10:	1880011e 	bne	r3,r2,410dd18 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 410dd14:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 410dd18:	e0bffa17 	ldw	r2,-24(fp)
}
 410dd1c:	e037883a 	mov	sp,fp
 410dd20:	df000017 	ldw	fp,0(sp)
 410dd24:	dec00104 	addi	sp,sp,4
 410dd28:	f800283a 	ret

0410dd2c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 410dd2c:	defffc04 	addi	sp,sp,-16
 410dd30:	dfc00315 	stw	ra,12(sp)
 410dd34:	df000215 	stw	fp,8(sp)
 410dd38:	df000204 	addi	fp,sp,8
 410dd3c:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 410dd40:	d1602f04 	addi	r5,gp,-32580
 410dd44:	e13fff17 	ldw	r4,-4(fp)
 410dd48:	410e3c80 	call	410e3c8 <alt_find_dev>
 410dd4c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 410dd50:	e0bffe17 	ldw	r2,-8(fp)
 410dd54:	1000041e 	bne	r2,zero,410dd68 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 410dd58:	410dc740 	call	410dc74 <alt_get_errno>
 410dd5c:	1007883a 	mov	r3,r2
 410dd60:	008004c4 	movi	r2,19
 410dd64:	18800015 	stw	r2,0(r3)
  }

  return dev;
 410dd68:	e0bffe17 	ldw	r2,-8(fp)
}
 410dd6c:	e037883a 	mov	sp,fp
 410dd70:	dfc00117 	ldw	ra,4(sp)
 410dd74:	df000017 	ldw	fp,0(sp)
 410dd78:	dec00204 	addi	sp,sp,8
 410dd7c:	f800283a 	ret

0410dd80 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 410dd80:	defffe04 	addi	sp,sp,-8
 410dd84:	df000115 	stw	fp,4(sp)
 410dd88:	df000104 	addi	fp,sp,4
 410dd8c:	e13fff15 	stw	r4,-4(fp)
  return;
 410dd90:	0001883a 	nop
}
 410dd94:	e037883a 	mov	sp,fp
 410dd98:	df000017 	ldw	fp,0(sp)
 410dd9c:	dec00104 	addi	sp,sp,4
 410dda0:	f800283a 	ret

0410dda4 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 410dda4:	defffa04 	addi	sp,sp,-24
 410dda8:	dfc00515 	stw	ra,20(sp)
 410ddac:	df000415 	stw	fp,16(sp)
 410ddb0:	df000404 	addi	fp,sp,16
 410ddb4:	e13ffe15 	stw	r4,-8(fp)
 410ddb8:	e17fff15 	stw	r5,-4(fp)
  /*
   * When running in a multi threaded environment, obtain the "lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);
 410ddbc:	e0bffe17 	ldw	r2,-8(fp)
 410ddc0:	10800417 	ldw	r2,16(r2)
 410ddc4:	e0bffc15 	stw	r2,-16(fp)
 410ddc8:	e03ffd0d 	sth	zero,-12(fp)
 410ddcc:	e0bffd0b 	ldhu	r2,-12(fp)
 410ddd0:	e0fffd84 	addi	r3,fp,-10
 410ddd4:	180d883a 	mov	r6,r3
 410ddd8:	100b883a 	mov	r5,r2
 410dddc:	e13ffc17 	ldw	r4,-16(fp)
 410dde0:	410a0cc0 	call	410a0cc <OSSemPend>

  while ( alt_mutex_trylock( dev, value ) != 0);
 410dde4:	0001883a 	nop
 410dde8:	e17fff17 	ldw	r5,-4(fp)
 410ddec:	e13ffe17 	ldw	r4,-8(fp)
 410ddf0:	410dcb00 	call	410dcb0 <alt_mutex_trylock>
 410ddf4:	103ffc1e 	bne	r2,zero,410dde8 <altera_avalon_mutex_lock+0x44>
}
 410ddf8:	0001883a 	nop
 410ddfc:	e037883a 	mov	sp,fp
 410de00:	dfc00117 	ldw	ra,4(sp)
 410de04:	df000017 	ldw	fp,0(sp)
 410de08:	dec00204 	addi	sp,sp,8
 410de0c:	f800283a 	ret

0410de10 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 410de10:	defff904 	addi	sp,sp,-28
 410de14:	dfc00615 	stw	ra,24(sp)
 410de18:	df000515 	stw	fp,20(sp)
 410de1c:	df000504 	addi	fp,sp,20
 410de20:	e13ffe15 	stw	r4,-8(fp)
 410de24:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);
 410de28:	e0bffe17 	ldw	r2,-8(fp)
 410de2c:	10800417 	ldw	r2,16(r2)
 410de30:	e0bffc15 	stw	r2,-16(fp)
 410de34:	e03ffd0d 	sth	zero,-12(fp)
 410de38:	e0bffd0b 	ldhu	r2,-12(fp)
 410de3c:	e0fffd84 	addi	r3,fp,-10
 410de40:	180d883a 	mov	r6,r3
 410de44:	100b883a 	mov	r5,r2
 410de48:	e13ffc17 	ldw	r4,-16(fp)
 410de4c:	410a0cc0 	call	410a0cc <OSSemPend>

  ret_code = alt_mutex_trylock( dev, value);
 410de50:	e17fff17 	ldw	r5,-4(fp)
 410de54:	e13ffe17 	ldw	r4,-8(fp)
 410de58:	410dcb00 	call	410dcb0 <alt_mutex_trylock>
 410de5c:	e0bffb15 	stw	r2,-20(fp)

  /*
  * If the try failed then release the thread Mutex  
  */
  if (ret_code)
 410de60:	e0bffb17 	ldw	r2,-20(fp)
 410de64:	10000426 	beq	r2,zero,410de78 <altera_avalon_mutex_trylock+0x68>
  {
    ALT_SEM_POST (dev->lock);
 410de68:	e0bffe17 	ldw	r2,-8(fp)
 410de6c:	10800417 	ldw	r2,16(r2)
 410de70:	1009883a 	mov	r4,r2
 410de74:	410a4440 	call	410a444 <OSSemPost>
  }

  return ret_code;
 410de78:	e0bffb17 	ldw	r2,-20(fp)
}
 410de7c:	e037883a 	mov	sp,fp
 410de80:	dfc00117 	ldw	ra,4(sp)
 410de84:	df000017 	ldw	fp,0(sp)
 410de88:	dec00204 	addi	sp,sp,8
 410de8c:	f800283a 	ret

0410de90 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 410de90:	defffc04 	addi	sp,sp,-16
 410de94:	dfc00315 	stw	ra,12(sp)
 410de98:	df000215 	stw	fp,8(sp)
 410de9c:	df000204 	addi	fp,sp,8
 410dea0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 410dea4:	0005317a 	rdctl	r2,cpuid
 410dea8:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 410deac:	e0bfff17 	ldw	r2,-4(fp)
 410deb0:	10800317 	ldw	r2,12(r2)
 410deb4:	10800104 	addi	r2,r2,4
 410deb8:	00c00044 	movi	r3,1
 410debc:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 410dec0:	e0bfff17 	ldw	r2,-4(fp)
 410dec4:	10800317 	ldw	r2,12(r2)
 410dec8:	e0fffe17 	ldw	r3,-8(fp)
 410decc:	1806943a 	slli	r3,r3,16
 410ded0:	10c00035 	stwio	r3,0(r2)
                                  id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST);

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
 410ded4:	e0bfff17 	ldw	r2,-4(fp)
 410ded8:	10800417 	ldw	r2,16(r2)
 410dedc:	1009883a 	mov	r4,r2
 410dee0:	410a4440 	call	410a444 <OSSemPost>
}
 410dee4:	0001883a 	nop
 410dee8:	e037883a 	mov	sp,fp
 410deec:	dfc00117 	ldw	ra,4(sp)
 410def0:	df000017 	ldw	fp,0(sp)
 410def4:	dec00204 	addi	sp,sp,8
 410def8:	f800283a 	ret

0410defc <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 410defc:	defff904 	addi	sp,sp,-28
 410df00:	df000615 	stw	fp,24(sp)
 410df04:	df000604 	addi	fp,sp,24
 410df08:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 410df0c:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 410df10:	0005317a 	rdctl	r2,cpuid
 410df14:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 410df18:	e0bfff17 	ldw	r2,-4(fp)
 410df1c:	10800317 	ldw	r2,12(r2)
 410df20:	10800037 	ldwio	r2,0(r2)
 410df24:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 410df28:	e0bffc17 	ldw	r2,-16(fp)
 410df2c:	1004d43a 	srli	r2,r2,16
 410df30:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 410df34:	e0fffd17 	ldw	r3,-12(fp)
 410df38:	e0bffb17 	ldw	r2,-20(fp)
 410df3c:	1880071e 	bne	r3,r2,410df5c <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 410df40:	e0bffc17 	ldw	r2,-16(fp)
 410df44:	10bfffcc 	andi	r2,r2,65535
 410df48:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 410df4c:	e0bffe17 	ldw	r2,-8(fp)
 410df50:	10000226 	beq	r2,zero,410df5c <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 410df54:	00800044 	movi	r2,1
 410df58:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 410df5c:	e0bffa17 	ldw	r2,-24(fp)
}
 410df60:	e037883a 	mov	sp,fp
 410df64:	df000017 	ldw	fp,0(sp)
 410df68:	dec00104 	addi	sp,sp,4
 410df6c:	f800283a 	ret

0410df70 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 410df70:	defffc04 	addi	sp,sp,-16
 410df74:	df000315 	stw	fp,12(sp)
 410df78:	df000304 	addi	fp,sp,12
 410df7c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 410df80:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 410df84:	e0bfff17 	ldw	r2,-4(fp)
 410df88:	10800317 	ldw	r2,12(r2)
 410df8c:	10800104 	addi	r2,r2,4
 410df90:	10800037 	ldwio	r2,0(r2)
 410df94:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 410df98:	e0bffe17 	ldw	r2,-8(fp)
 410df9c:	1080004c 	andi	r2,r2,1
 410dfa0:	10000226 	beq	r2,zero,410dfac <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 410dfa4:	00800044 	movi	r2,1
 410dfa8:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 410dfac:	e0bffd17 	ldw	r2,-12(fp)
}
 410dfb0:	e037883a 	mov	sp,fp
 410dfb4:	df000017 	ldw	fp,0(sp)
 410dfb8:	dec00104 	addi	sp,sp,4
 410dfbc:	f800283a 	ret

0410dfc0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 410dfc0:	defffa04 	addi	sp,sp,-24
 410dfc4:	dfc00515 	stw	ra,20(sp)
 410dfc8:	df000415 	stw	fp,16(sp)
 410dfcc:	df000404 	addi	fp,sp,16
 410dfd0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 410dfd4:	0007883a 	mov	r3,zero
 410dfd8:	e0bfff17 	ldw	r2,-4(fp)
 410dfdc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 410dfe0:	e0bfff17 	ldw	r2,-4(fp)
 410dfe4:	10800104 	addi	r2,r2,4
 410dfe8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410dfec:	0005303a 	rdctl	r2,status
 410dff0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410dff4:	e0fffd17 	ldw	r3,-12(fp)
 410dff8:	00bfff84 	movi	r2,-2
 410dffc:	1884703a 	and	r2,r3,r2
 410e000:	1001703a 	wrctl	status,r2
  
  return context;
 410e004:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 410e008:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 410e00c:	41046a80 	call	41046a8 <alt_tick>
 410e010:	e0bffc17 	ldw	r2,-16(fp)
 410e014:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410e018:	e0bffe17 	ldw	r2,-8(fp)
 410e01c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 410e020:	0001883a 	nop
 410e024:	e037883a 	mov	sp,fp
 410e028:	dfc00117 	ldw	ra,4(sp)
 410e02c:	df000017 	ldw	fp,0(sp)
 410e030:	dec00204 	addi	sp,sp,8
 410e034:	f800283a 	ret

0410e038 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 410e038:	defff804 	addi	sp,sp,-32
 410e03c:	dfc00715 	stw	ra,28(sp)
 410e040:	df000615 	stw	fp,24(sp)
 410e044:	df000604 	addi	fp,sp,24
 410e048:	e13ffc15 	stw	r4,-16(fp)
 410e04c:	e17ffd15 	stw	r5,-12(fp)
 410e050:	e1bffe15 	stw	r6,-8(fp)
 410e054:	e1ffff15 	stw	r7,-4(fp)
 410e058:	e0bfff17 	ldw	r2,-4(fp)
 410e05c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 410e060:	d0a71d17 	ldw	r2,-25484(gp)
 410e064:	1000021e 	bne	r2,zero,410e070 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 410e068:	e0bffb17 	ldw	r2,-20(fp)
 410e06c:	d0a71d15 	stw	r2,-25484(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 410e070:	e0bffc17 	ldw	r2,-16(fp)
 410e074:	10800104 	addi	r2,r2,4
 410e078:	00c001c4 	movi	r3,7
 410e07c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 410e080:	d8000015 	stw	zero,0(sp)
 410e084:	e1fffc17 	ldw	r7,-16(fp)
 410e088:	01810474 	movhi	r6,1041
 410e08c:	31b7f004 	addi	r6,r6,-8256
 410e090:	e17ffe17 	ldw	r5,-8(fp)
 410e094:	e13ffd17 	ldw	r4,-12(fp)
 410e098:	4103d880 	call	4103d88 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 410e09c:	0001883a 	nop
 410e0a0:	e037883a 	mov	sp,fp
 410e0a4:	dfc00117 	ldw	ra,4(sp)
 410e0a8:	df000017 	ldw	fp,0(sp)
 410e0ac:	dec00204 	addi	sp,sp,8
 410e0b0:	f800283a 	ret

0410e0b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 410e0b4:	defff504 	addi	sp,sp,-44
 410e0b8:	df000a15 	stw	fp,40(sp)
 410e0bc:	df000a04 	addi	fp,sp,40
 410e0c0:	e13ffc15 	stw	r4,-16(fp)
 410e0c4:	e17ffd15 	stw	r5,-12(fp)
 410e0c8:	e1bffe15 	stw	r6,-8(fp)
 410e0cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 410e0d0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 410e0d4:	d0a71d17 	ldw	r2,-25484(gp)
  
  if (alt_ticks_per_second ())
 410e0d8:	10003c26 	beq	r2,zero,410e1cc <alt_alarm_start+0x118>
  {
    if (alarm)
 410e0dc:	e0bffc17 	ldw	r2,-16(fp)
 410e0e0:	10003826 	beq	r2,zero,410e1c4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 410e0e4:	e0bffc17 	ldw	r2,-16(fp)
 410e0e8:	e0fffe17 	ldw	r3,-8(fp)
 410e0ec:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 410e0f0:	e0bffc17 	ldw	r2,-16(fp)
 410e0f4:	e0ffff17 	ldw	r3,-4(fp)
 410e0f8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 410e0fc:	0005303a 	rdctl	r2,status
 410e100:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 410e104:	e0fff917 	ldw	r3,-28(fp)
 410e108:	00bfff84 	movi	r2,-2
 410e10c:	1884703a 	and	r2,r3,r2
 410e110:	1001703a 	wrctl	status,r2
  
  return context;
 410e114:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 410e118:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 410e11c:	d0a71e17 	ldw	r2,-25480(gp)
      
      current_nticks = alt_nticks();
 410e120:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 410e124:	e0fffd17 	ldw	r3,-12(fp)
 410e128:	e0bff617 	ldw	r2,-40(fp)
 410e12c:	1885883a 	add	r2,r3,r2
 410e130:	10c00044 	addi	r3,r2,1
 410e134:	e0bffc17 	ldw	r2,-16(fp)
 410e138:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 410e13c:	e0bffc17 	ldw	r2,-16(fp)
 410e140:	10c00217 	ldw	r3,8(r2)
 410e144:	e0bff617 	ldw	r2,-40(fp)
 410e148:	1880042e 	bgeu	r3,r2,410e15c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 410e14c:	e0bffc17 	ldw	r2,-16(fp)
 410e150:	00c00044 	movi	r3,1
 410e154:	10c00405 	stb	r3,16(r2)
 410e158:	00000206 	br	410e164 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 410e15c:	e0bffc17 	ldw	r2,-16(fp)
 410e160:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 410e164:	e0bffc17 	ldw	r2,-16(fp)
 410e168:	d0e00c04 	addi	r3,gp,-32720
 410e16c:	e0fffa15 	stw	r3,-24(fp)
 410e170:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 410e174:	e0bffb17 	ldw	r2,-20(fp)
 410e178:	e0fffa17 	ldw	r3,-24(fp)
 410e17c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 410e180:	e0bffa17 	ldw	r2,-24(fp)
 410e184:	10c00017 	ldw	r3,0(r2)
 410e188:	e0bffb17 	ldw	r2,-20(fp)
 410e18c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 410e190:	e0bffa17 	ldw	r2,-24(fp)
 410e194:	10800017 	ldw	r2,0(r2)
 410e198:	e0fffb17 	ldw	r3,-20(fp)
 410e19c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 410e1a0:	e0bffa17 	ldw	r2,-24(fp)
 410e1a4:	e0fffb17 	ldw	r3,-20(fp)
 410e1a8:	10c00015 	stw	r3,0(r2)
 410e1ac:	e0bff817 	ldw	r2,-32(fp)
 410e1b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 410e1b4:	e0bff717 	ldw	r2,-36(fp)
 410e1b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 410e1bc:	0005883a 	mov	r2,zero
 410e1c0:	00000306 	br	410e1d0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 410e1c4:	00bffa84 	movi	r2,-22
 410e1c8:	00000106 	br	410e1d0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 410e1cc:	00bfde84 	movi	r2,-134
  }
}
 410e1d0:	e037883a 	mov	sp,fp
 410e1d4:	df000017 	ldw	fp,0(sp)
 410e1d8:	dec00104 	addi	sp,sp,4
 410e1dc:	f800283a 	ret

0410e1e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 410e1e0:	defffe04 	addi	sp,sp,-8
 410e1e4:	df000115 	stw	fp,4(sp)
 410e1e8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 410e1ec:	e03fff15 	stw	zero,-4(fp)
 410e1f0:	00000506 	br	410e208 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 410e1f4:	e0bfff17 	ldw	r2,-4(fp)
 410e1f8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 410e1fc:	e0bfff17 	ldw	r2,-4(fp)
 410e200:	10800804 	addi	r2,r2,32
 410e204:	e0bfff15 	stw	r2,-4(fp)
 410e208:	e0bfff17 	ldw	r2,-4(fp)
 410e20c:	10820030 	cmpltui	r2,r2,2048
 410e210:	103ff81e 	bne	r2,zero,410e1f4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 410e214:	0001883a 	nop
 410e218:	e037883a 	mov	sp,fp
 410e21c:	df000017 	ldw	fp,0(sp)
 410e220:	dec00104 	addi	sp,sp,4
 410e224:	f800283a 	ret

0410e228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 410e228:	defffe04 	addi	sp,sp,-8
 410e22c:	dfc00115 	stw	ra,4(sp)
 410e230:	df000015 	stw	fp,0(sp)
 410e234:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 410e238:	d0a00917 	ldw	r2,-32732(gp)
 410e23c:	10000326 	beq	r2,zero,410e24c <alt_get_errno+0x24>
 410e240:	d0a00917 	ldw	r2,-32732(gp)
 410e244:	103ee83a 	callr	r2
 410e248:	00000106 	br	410e250 <alt_get_errno+0x28>
 410e24c:	d0a71004 	addi	r2,gp,-25536
}
 410e250:	e037883a 	mov	sp,fp
 410e254:	dfc00117 	ldw	ra,4(sp)
 410e258:	df000017 	ldw	fp,0(sp)
 410e25c:	dec00204 	addi	sp,sp,8
 410e260:	f800283a 	ret

0410e264 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 410e264:	defffa04 	addi	sp,sp,-24
 410e268:	dfc00515 	stw	ra,20(sp)
 410e26c:	df000415 	stw	fp,16(sp)
 410e270:	df000404 	addi	fp,sp,16
 410e274:	e13ffe15 	stw	r4,-8(fp)
 410e278:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 410e27c:	e0bffe17 	ldw	r2,-8(fp)
 410e280:	10000326 	beq	r2,zero,410e290 <alt_dev_llist_insert+0x2c>
 410e284:	e0bffe17 	ldw	r2,-8(fp)
 410e288:	10800217 	ldw	r2,8(r2)
 410e28c:	1000061e 	bne	r2,zero,410e2a8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 410e290:	410e2280 	call	410e228 <alt_get_errno>
 410e294:	1007883a 	mov	r3,r2
 410e298:	00800584 	movi	r2,22
 410e29c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 410e2a0:	00bffa84 	movi	r2,-22
 410e2a4:	00001306 	br	410e2f4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 410e2a8:	e0bffe17 	ldw	r2,-8(fp)
 410e2ac:	e0ffff17 	ldw	r3,-4(fp)
 410e2b0:	e0fffc15 	stw	r3,-16(fp)
 410e2b4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 410e2b8:	e0bffd17 	ldw	r2,-12(fp)
 410e2bc:	e0fffc17 	ldw	r3,-16(fp)
 410e2c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 410e2c4:	e0bffc17 	ldw	r2,-16(fp)
 410e2c8:	10c00017 	ldw	r3,0(r2)
 410e2cc:	e0bffd17 	ldw	r2,-12(fp)
 410e2d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 410e2d4:	e0bffc17 	ldw	r2,-16(fp)
 410e2d8:	10800017 	ldw	r2,0(r2)
 410e2dc:	e0fffd17 	ldw	r3,-12(fp)
 410e2e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 410e2e4:	e0bffc17 	ldw	r2,-16(fp)
 410e2e8:	e0fffd17 	ldw	r3,-12(fp)
 410e2ec:	10c00015 	stw	r3,0(r2)

  return 0;  
 410e2f0:	0005883a 	mov	r2,zero
}
 410e2f4:	e037883a 	mov	sp,fp
 410e2f8:	dfc00117 	ldw	ra,4(sp)
 410e2fc:	df000017 	ldw	fp,0(sp)
 410e300:	dec00204 	addi	sp,sp,8
 410e304:	f800283a 	ret

0410e308 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 410e308:	defffd04 	addi	sp,sp,-12
 410e30c:	dfc00215 	stw	ra,8(sp)
 410e310:	df000115 	stw	fp,4(sp)
 410e314:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 410e318:	00810474 	movhi	r2,1041
 410e31c:	10bddd04 	addi	r2,r2,-2188
 410e320:	e0bfff15 	stw	r2,-4(fp)
 410e324:	00000606 	br	410e340 <_do_ctors+0x38>
        (*ctor) (); 
 410e328:	e0bfff17 	ldw	r2,-4(fp)
 410e32c:	10800017 	ldw	r2,0(r2)
 410e330:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 410e334:	e0bfff17 	ldw	r2,-4(fp)
 410e338:	10bfff04 	addi	r2,r2,-4
 410e33c:	e0bfff15 	stw	r2,-4(fp)
 410e340:	e0ffff17 	ldw	r3,-4(fp)
 410e344:	00810474 	movhi	r2,1041
 410e348:	10bdde04 	addi	r2,r2,-2184
 410e34c:	18bff62e 	bgeu	r3,r2,410e328 <_do_ctors+0x20>
        (*ctor) (); 
}
 410e350:	0001883a 	nop
 410e354:	e037883a 	mov	sp,fp
 410e358:	dfc00117 	ldw	ra,4(sp)
 410e35c:	df000017 	ldw	fp,0(sp)
 410e360:	dec00204 	addi	sp,sp,8
 410e364:	f800283a 	ret

0410e368 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 410e368:	defffd04 	addi	sp,sp,-12
 410e36c:	dfc00215 	stw	ra,8(sp)
 410e370:	df000115 	stw	fp,4(sp)
 410e374:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 410e378:	00810474 	movhi	r2,1041
 410e37c:	10bddd04 	addi	r2,r2,-2188
 410e380:	e0bfff15 	stw	r2,-4(fp)
 410e384:	00000606 	br	410e3a0 <_do_dtors+0x38>
        (*dtor) (); 
 410e388:	e0bfff17 	ldw	r2,-4(fp)
 410e38c:	10800017 	ldw	r2,0(r2)
 410e390:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 410e394:	e0bfff17 	ldw	r2,-4(fp)
 410e398:	10bfff04 	addi	r2,r2,-4
 410e39c:	e0bfff15 	stw	r2,-4(fp)
 410e3a0:	e0ffff17 	ldw	r3,-4(fp)
 410e3a4:	00810474 	movhi	r2,1041
 410e3a8:	10bdde04 	addi	r2,r2,-2184
 410e3ac:	18bff62e 	bgeu	r3,r2,410e388 <_do_dtors+0x20>
        (*dtor) (); 
}
 410e3b0:	0001883a 	nop
 410e3b4:	e037883a 	mov	sp,fp
 410e3b8:	dfc00117 	ldw	ra,4(sp)
 410e3bc:	df000017 	ldw	fp,0(sp)
 410e3c0:	dec00204 	addi	sp,sp,8
 410e3c4:	f800283a 	ret

0410e3c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 410e3c8:	defffa04 	addi	sp,sp,-24
 410e3cc:	dfc00515 	stw	ra,20(sp)
 410e3d0:	df000415 	stw	fp,16(sp)
 410e3d4:	df000404 	addi	fp,sp,16
 410e3d8:	e13ffe15 	stw	r4,-8(fp)
 410e3dc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 410e3e0:	e0bfff17 	ldw	r2,-4(fp)
 410e3e4:	10800017 	ldw	r2,0(r2)
 410e3e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 410e3ec:	e13ffe17 	ldw	r4,-8(fp)
 410e3f0:	4100e6c0 	call	4100e6c <strlen>
 410e3f4:	10800044 	addi	r2,r2,1
 410e3f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 410e3fc:	00000d06 	br	410e434 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 410e400:	e0bffc17 	ldw	r2,-16(fp)
 410e404:	10800217 	ldw	r2,8(r2)
 410e408:	e0fffd17 	ldw	r3,-12(fp)
 410e40c:	180d883a 	mov	r6,r3
 410e410:	e17ffe17 	ldw	r5,-8(fp)
 410e414:	1009883a 	mov	r4,r2
 410e418:	410eef80 	call	410eef8 <memcmp>
 410e41c:	1000021e 	bne	r2,zero,410e428 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 410e420:	e0bffc17 	ldw	r2,-16(fp)
 410e424:	00000706 	br	410e444 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 410e428:	e0bffc17 	ldw	r2,-16(fp)
 410e42c:	10800017 	ldw	r2,0(r2)
 410e430:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 410e434:	e0fffc17 	ldw	r3,-16(fp)
 410e438:	e0bfff17 	ldw	r2,-4(fp)
 410e43c:	18bff01e 	bne	r3,r2,410e400 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 410e440:	0005883a 	mov	r2,zero
}
 410e444:	e037883a 	mov	sp,fp
 410e448:	dfc00117 	ldw	ra,4(sp)
 410e44c:	df000017 	ldw	fp,0(sp)
 410e450:	dec00204 	addi	sp,sp,8
 410e454:	f800283a 	ret

0410e458 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 410e458:	defffe04 	addi	sp,sp,-8
 410e45c:	dfc00115 	stw	ra,4(sp)
 410e460:	df000015 	stw	fp,0(sp)
 410e464:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 410e468:	01440004 	movi	r5,4096
 410e46c:	0009883a 	mov	r4,zero
 410e470:	410ee1c0 	call	410ee1c <alt_icache_flush>
#endif
}
 410e474:	0001883a 	nop
 410e478:	e037883a 	mov	sp,fp
 410e47c:	dfc00117 	ldw	ra,4(sp)
 410e480:	df000017 	ldw	fp,0(sp)
 410e484:	dec00204 	addi	sp,sp,8
 410e488:	f800283a 	ret

0410e48c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 410e48c:	defffe04 	addi	sp,sp,-8
 410e490:	df000115 	stw	fp,4(sp)
 410e494:	df000104 	addi	fp,sp,4
 410e498:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 410e49c:	e0bfff17 	ldw	r2,-4(fp)
 410e4a0:	10bffe84 	addi	r2,r2,-6
 410e4a4:	10c00428 	cmpgeui	r3,r2,16
 410e4a8:	18001a1e 	bne	r3,zero,410e514 <alt_exception_cause_generated_bad_addr+0x88>
 410e4ac:	100690ba 	slli	r3,r2,2
 410e4b0:	00810474 	movhi	r2,1041
 410e4b4:	10b93104 	addi	r2,r2,-6972
 410e4b8:	1885883a 	add	r2,r3,r2
 410e4bc:	10800017 	ldw	r2,0(r2)
 410e4c0:	1000683a 	jmp	r2
 410e4c4:	0410e504 	movi	r16,17300
 410e4c8:	0410e504 	movi	r16,17300
 410e4cc:	0410e514 	movui	r16,17300
 410e4d0:	0410e514 	movui	r16,17300
 410e4d4:	0410e514 	movui	r16,17300
 410e4d8:	0410e504 	movi	r16,17300
 410e4dc:	0410e50c 	andi	r16,zero,17300
 410e4e0:	0410e514 	movui	r16,17300
 410e4e4:	0410e504 	movi	r16,17300
 410e4e8:	0410e504 	movi	r16,17300
 410e4ec:	0410e514 	movui	r16,17300
 410e4f0:	0410e504 	movi	r16,17300
 410e4f4:	0410e50c 	andi	r16,zero,17300
 410e4f8:	0410e514 	movui	r16,17300
 410e4fc:	0410e514 	movui	r16,17300
 410e500:	0410e504 	movi	r16,17300
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 410e504:	00800044 	movi	r2,1
 410e508:	00000306 	br	410e518 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 410e50c:	0005883a 	mov	r2,zero
 410e510:	00000106 	br	410e518 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 410e514:	0005883a 	mov	r2,zero
  }
}
 410e518:	e037883a 	mov	sp,fp
 410e51c:	df000017 	ldw	fp,0(sp)
 410e520:	dec00104 	addi	sp,sp,4
 410e524:	f800283a 	ret

0410e528 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 410e528:	defff904 	addi	sp,sp,-28
 410e52c:	dfc00615 	stw	ra,24(sp)
 410e530:	df000515 	stw	fp,20(sp)
 410e534:	df000504 	addi	fp,sp,20
 410e538:	e13ffc15 	stw	r4,-16(fp)
 410e53c:	e17ffd15 	stw	r5,-12(fp)
 410e540:	e1bffe15 	stw	r6,-8(fp)
 410e544:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 410e548:	e1bfff17 	ldw	r6,-4(fp)
 410e54c:	e17ffe17 	ldw	r5,-8(fp)
 410e550:	e13ffd17 	ldw	r4,-12(fp)
 410e554:	410e7680 	call	410e768 <open>
 410e558:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 410e55c:	e0bffb17 	ldw	r2,-20(fp)
 410e560:	10001c16 	blt	r2,zero,410e5d4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 410e564:	00810474 	movhi	r2,1041
 410e568:	10809c04 	addi	r2,r2,624
 410e56c:	e0fffb17 	ldw	r3,-20(fp)
 410e570:	18c00324 	muli	r3,r3,12
 410e574:	10c5883a 	add	r2,r2,r3
 410e578:	10c00017 	ldw	r3,0(r2)
 410e57c:	e0bffc17 	ldw	r2,-16(fp)
 410e580:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 410e584:	00810474 	movhi	r2,1041
 410e588:	10809c04 	addi	r2,r2,624
 410e58c:	e0fffb17 	ldw	r3,-20(fp)
 410e590:	18c00324 	muli	r3,r3,12
 410e594:	10c5883a 	add	r2,r2,r3
 410e598:	10800104 	addi	r2,r2,4
 410e59c:	10c00017 	ldw	r3,0(r2)
 410e5a0:	e0bffc17 	ldw	r2,-16(fp)
 410e5a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 410e5a8:	00810474 	movhi	r2,1041
 410e5ac:	10809c04 	addi	r2,r2,624
 410e5b0:	e0fffb17 	ldw	r3,-20(fp)
 410e5b4:	18c00324 	muli	r3,r3,12
 410e5b8:	10c5883a 	add	r2,r2,r3
 410e5bc:	10800204 	addi	r2,r2,8
 410e5c0:	10c00017 	ldw	r3,0(r2)
 410e5c4:	e0bffc17 	ldw	r2,-16(fp)
 410e5c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 410e5cc:	e13ffb17 	ldw	r4,-20(fp)
 410e5d0:	41044f80 	call	41044f8 <alt_release_fd>
  }
} 
 410e5d4:	0001883a 	nop
 410e5d8:	e037883a 	mov	sp,fp
 410e5dc:	dfc00117 	ldw	ra,4(sp)
 410e5e0:	df000017 	ldw	fp,0(sp)
 410e5e4:	dec00204 	addi	sp,sp,8
 410e5e8:	f800283a 	ret

0410e5ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 410e5ec:	defffb04 	addi	sp,sp,-20
 410e5f0:	dfc00415 	stw	ra,16(sp)
 410e5f4:	df000315 	stw	fp,12(sp)
 410e5f8:	df000304 	addi	fp,sp,12
 410e5fc:	e13ffd15 	stw	r4,-12(fp)
 410e600:	e17ffe15 	stw	r5,-8(fp)
 410e604:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 410e608:	01c07fc4 	movi	r7,511
 410e60c:	01800044 	movi	r6,1
 410e610:	e17ffd17 	ldw	r5,-12(fp)
 410e614:	01010474 	movhi	r4,1041
 410e618:	21009f04 	addi	r4,r4,636
 410e61c:	410e5280 	call	410e528 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 410e620:	01c07fc4 	movi	r7,511
 410e624:	000d883a 	mov	r6,zero
 410e628:	e17ffe17 	ldw	r5,-8(fp)
 410e62c:	01010474 	movhi	r4,1041
 410e630:	21009c04 	addi	r4,r4,624
 410e634:	410e5280 	call	410e528 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 410e638:	01c07fc4 	movi	r7,511
 410e63c:	01800044 	movi	r6,1
 410e640:	e17fff17 	ldw	r5,-4(fp)
 410e644:	01010474 	movhi	r4,1041
 410e648:	2100a204 	addi	r4,r4,648
 410e64c:	410e5280 	call	410e528 <alt_open_fd>
}  
 410e650:	0001883a 	nop
 410e654:	e037883a 	mov	sp,fp
 410e658:	dfc00117 	ldw	ra,4(sp)
 410e65c:	df000017 	ldw	fp,0(sp)
 410e660:	dec00204 	addi	sp,sp,8
 410e664:	f800283a 	ret

0410e668 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 410e668:	defffe04 	addi	sp,sp,-8
 410e66c:	dfc00115 	stw	ra,4(sp)
 410e670:	df000015 	stw	fp,0(sp)
 410e674:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 410e678:	d0a00917 	ldw	r2,-32732(gp)
 410e67c:	10000326 	beq	r2,zero,410e68c <alt_get_errno+0x24>
 410e680:	d0a00917 	ldw	r2,-32732(gp)
 410e684:	103ee83a 	callr	r2
 410e688:	00000106 	br	410e690 <alt_get_errno+0x28>
 410e68c:	d0a71004 	addi	r2,gp,-25536
}
 410e690:	e037883a 	mov	sp,fp
 410e694:	dfc00117 	ldw	ra,4(sp)
 410e698:	df000017 	ldw	fp,0(sp)
 410e69c:	dec00204 	addi	sp,sp,8
 410e6a0:	f800283a 	ret

0410e6a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 410e6a4:	defffd04 	addi	sp,sp,-12
 410e6a8:	df000215 	stw	fp,8(sp)
 410e6ac:	df000204 	addi	fp,sp,8
 410e6b0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 410e6b4:	e0bfff17 	ldw	r2,-4(fp)
 410e6b8:	10800217 	ldw	r2,8(r2)
 410e6bc:	10d00034 	orhi	r3,r2,16384
 410e6c0:	e0bfff17 	ldw	r2,-4(fp)
 410e6c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 410e6c8:	e03ffe15 	stw	zero,-8(fp)
 410e6cc:	00001d06 	br	410e744 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 410e6d0:	00810474 	movhi	r2,1041
 410e6d4:	10809c04 	addi	r2,r2,624
 410e6d8:	e0fffe17 	ldw	r3,-8(fp)
 410e6dc:	18c00324 	muli	r3,r3,12
 410e6e0:	10c5883a 	add	r2,r2,r3
 410e6e4:	10c00017 	ldw	r3,0(r2)
 410e6e8:	e0bfff17 	ldw	r2,-4(fp)
 410e6ec:	10800017 	ldw	r2,0(r2)
 410e6f0:	1880111e 	bne	r3,r2,410e738 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 410e6f4:	00810474 	movhi	r2,1041
 410e6f8:	10809c04 	addi	r2,r2,624
 410e6fc:	e0fffe17 	ldw	r3,-8(fp)
 410e700:	18c00324 	muli	r3,r3,12
 410e704:	10c5883a 	add	r2,r2,r3
 410e708:	10800204 	addi	r2,r2,8
 410e70c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 410e710:	1000090e 	bge	r2,zero,410e738 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 410e714:	e0bffe17 	ldw	r2,-8(fp)
 410e718:	10c00324 	muli	r3,r2,12
 410e71c:	00810474 	movhi	r2,1041
 410e720:	10809c04 	addi	r2,r2,624
 410e724:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 410e728:	e0bfff17 	ldw	r2,-4(fp)
 410e72c:	18800226 	beq	r3,r2,410e738 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 410e730:	00bffcc4 	movi	r2,-13
 410e734:	00000806 	br	410e758 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 410e738:	e0bffe17 	ldw	r2,-8(fp)
 410e73c:	10800044 	addi	r2,r2,1
 410e740:	e0bffe15 	stw	r2,-8(fp)
 410e744:	d0a00817 	ldw	r2,-32736(gp)
 410e748:	1007883a 	mov	r3,r2
 410e74c:	e0bffe17 	ldw	r2,-8(fp)
 410e750:	18bfdf2e 	bgeu	r3,r2,410e6d0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 410e754:	0005883a 	mov	r2,zero
}
 410e758:	e037883a 	mov	sp,fp
 410e75c:	df000017 	ldw	fp,0(sp)
 410e760:	dec00104 	addi	sp,sp,4
 410e764:	f800283a 	ret

0410e768 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 410e768:	defff604 	addi	sp,sp,-40
 410e76c:	dfc00915 	stw	ra,36(sp)
 410e770:	df000815 	stw	fp,32(sp)
 410e774:	df000804 	addi	fp,sp,32
 410e778:	e13ffd15 	stw	r4,-12(fp)
 410e77c:	e17ffe15 	stw	r5,-8(fp)
 410e780:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 410e784:	00bfffc4 	movi	r2,-1
 410e788:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 410e78c:	00bffb44 	movi	r2,-19
 410e790:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 410e794:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 410e798:	d1600604 	addi	r5,gp,-32744
 410e79c:	e13ffd17 	ldw	r4,-12(fp)
 410e7a0:	410e3c80 	call	410e3c8 <alt_find_dev>
 410e7a4:	e0bff815 	stw	r2,-32(fp)
 410e7a8:	e0bff817 	ldw	r2,-32(fp)
 410e7ac:	1000051e 	bne	r2,zero,410e7c4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 410e7b0:	e13ffd17 	ldw	r4,-12(fp)
 410e7b4:	410ec380 	call	410ec38 <alt_find_file>
 410e7b8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 410e7bc:	00800044 	movi	r2,1
 410e7c0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 410e7c4:	e0bff817 	ldw	r2,-32(fp)
 410e7c8:	10002926 	beq	r2,zero,410e870 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 410e7cc:	e13ff817 	ldw	r4,-32(fp)
 410e7d0:	410ed400 	call	410ed40 <alt_get_fd>
 410e7d4:	e0bff915 	stw	r2,-28(fp)
 410e7d8:	e0bff917 	ldw	r2,-28(fp)
 410e7dc:	1000030e 	bge	r2,zero,410e7ec <open+0x84>
    {
      status = index;
 410e7e0:	e0bff917 	ldw	r2,-28(fp)
 410e7e4:	e0bffa15 	stw	r2,-24(fp)
 410e7e8:	00002306 	br	410e878 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 410e7ec:	e0bff917 	ldw	r2,-28(fp)
 410e7f0:	10c00324 	muli	r3,r2,12
 410e7f4:	00810474 	movhi	r2,1041
 410e7f8:	10809c04 	addi	r2,r2,624
 410e7fc:	1885883a 	add	r2,r3,r2
 410e800:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 410e804:	e0fffe17 	ldw	r3,-8(fp)
 410e808:	00900034 	movhi	r2,16384
 410e80c:	10bfffc4 	addi	r2,r2,-1
 410e810:	1886703a 	and	r3,r3,r2
 410e814:	e0bffc17 	ldw	r2,-16(fp)
 410e818:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 410e81c:	e0bffb17 	ldw	r2,-20(fp)
 410e820:	1000051e 	bne	r2,zero,410e838 <open+0xd0>
 410e824:	e13ffc17 	ldw	r4,-16(fp)
 410e828:	410e6a40 	call	410e6a4 <alt_file_locked>
 410e82c:	e0bffa15 	stw	r2,-24(fp)
 410e830:	e0bffa17 	ldw	r2,-24(fp)
 410e834:	10001016 	blt	r2,zero,410e878 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 410e838:	e0bff817 	ldw	r2,-32(fp)
 410e83c:	10800317 	ldw	r2,12(r2)
 410e840:	10000826 	beq	r2,zero,410e864 <open+0xfc>
 410e844:	e0bff817 	ldw	r2,-32(fp)
 410e848:	10800317 	ldw	r2,12(r2)
 410e84c:	e1ffff17 	ldw	r7,-4(fp)
 410e850:	e1bffe17 	ldw	r6,-8(fp)
 410e854:	e17ffd17 	ldw	r5,-12(fp)
 410e858:	e13ffc17 	ldw	r4,-16(fp)
 410e85c:	103ee83a 	callr	r2
 410e860:	00000106 	br	410e868 <open+0x100>
 410e864:	0005883a 	mov	r2,zero
 410e868:	e0bffa15 	stw	r2,-24(fp)
 410e86c:	00000206 	br	410e878 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 410e870:	00bffb44 	movi	r2,-19
 410e874:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 410e878:	e0bffa17 	ldw	r2,-24(fp)
 410e87c:	1000090e 	bge	r2,zero,410e8a4 <open+0x13c>
  {
    alt_release_fd (index);  
 410e880:	e13ff917 	ldw	r4,-28(fp)
 410e884:	41044f80 	call	41044f8 <alt_release_fd>
    ALT_ERRNO = -status;
 410e888:	410e6680 	call	410e668 <alt_get_errno>
 410e88c:	1007883a 	mov	r3,r2
 410e890:	e0bffa17 	ldw	r2,-24(fp)
 410e894:	0085c83a 	sub	r2,zero,r2
 410e898:	18800015 	stw	r2,0(r3)
    return -1;
 410e89c:	00bfffc4 	movi	r2,-1
 410e8a0:	00000106 	br	410e8a8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 410e8a4:	e0bff917 	ldw	r2,-28(fp)
}
 410e8a8:	e037883a 	mov	sp,fp
 410e8ac:	dfc00117 	ldw	ra,4(sp)
 410e8b0:	df000017 	ldw	fp,0(sp)
 410e8b4:	dec00204 	addi	sp,sp,8
 410e8b8:	f800283a 	ret

0410e8bc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 410e8bc:	deffff04 	addi	sp,sp,-4
 410e8c0:	df000015 	stw	fp,0(sp)
 410e8c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 410e8c8:	000170fa 	wrctl	ienable,zero
}
 410e8cc:	0001883a 	nop
 410e8d0:	e037883a 	mov	sp,fp
 410e8d4:	df000017 	ldw	fp,0(sp)
 410e8d8:	dec00104 	addi	sp,sp,4
 410e8dc:	f800283a 	ret

0410e8e0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 410e8e0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 410e8e4:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 410e8e8:	d1273217 	ldw	r4,-25400(gp)

      stw ra,  0(sp)
 410e8ec:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 410e8f0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 410e8f4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 410e8f8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 410e8fc:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 410e900:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 410e904:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 410e908:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 410e90c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 410e910:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 410e914:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 410e918:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 410e91c:	410eb540 	call	410eb54 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 410e920:	d1272d17 	ldw	r4,-25420(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 410e924:	d1672507 	ldb	r5,-25452(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 410e928:	d1273215 	stw	r4,-25400(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 410e92c:	d1672545 	stb	r5,-25451(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 410e930:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 410e934:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 410e938:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 410e93c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 410e940:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 410e944:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 410e948:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 410e94c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 410e950:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 410e954:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 410e958:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 410e95c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 410e960:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 410e964:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 410e968:	f800283a 	ret

0410e96c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 410e96c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 410e970:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 410e974:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 410e978:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 410e97c:	410eb540 	call	410eb54 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 410e980:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 410e984:	d4a72345 	stb	r18,-25459(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 410e988:	003fe506 	br	410e920 <OSCtxSw+0x40>

0410e98c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 410e98c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 410e990:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 410e994:	10800054 	ori	r2,r2,1
      wrctl status, r2
 410e998:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 410e99c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 410e9a0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 410e9a4:	dec00204 	addi	sp,sp,8

      callr r2
 410e9a8:	103ee83a 	callr	r2

      nop
 410e9ac:	0001883a 	nop

0410e9b0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 410e9b0:	defff704 	addi	sp,sp,-36
 410e9b4:	dfc00815 	stw	ra,32(sp)
 410e9b8:	df000715 	stw	fp,28(sp)
 410e9bc:	df000704 	addi	fp,sp,28
 410e9c0:	e13ffc15 	stw	r4,-16(fp)
 410e9c4:	e17ffd15 	stw	r5,-12(fp)
 410e9c8:	e1bffe15 	stw	r6,-8(fp)
 410e9cc:	3805883a 	mov	r2,r7
 410e9d0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 410e9d4:	e0fffe17 	ldw	r3,-8(fp)
 410e9d8:	00bfff04 	movi	r2,-4
 410e9dc:	1884703a 	and	r2,r3,r2
 410e9e0:	10bef704 	addi	r2,r2,-1060
 410e9e4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 410e9e8:	01810904 	movi	r6,1060
 410e9ec:	000b883a 	mov	r5,zero
 410e9f0:	e13ff917 	ldw	r4,-28(fp)
 410e9f4:	41023e00 	call	41023e0 <memset>
 410e9f8:	e0bff917 	ldw	r2,-28(fp)
 410e9fc:	10c0bb04 	addi	r3,r2,748
 410ea00:	e0bff917 	ldw	r2,-28(fp)
 410ea04:	10c00115 	stw	r3,4(r2)
 410ea08:	e0bff917 	ldw	r2,-28(fp)
 410ea0c:	10c0d504 	addi	r3,r2,852
 410ea10:	e0bff917 	ldw	r2,-28(fp)
 410ea14:	10c00215 	stw	r3,8(r2)
 410ea18:	e0bff917 	ldw	r2,-28(fp)
 410ea1c:	10c0ef04 	addi	r3,r2,956
 410ea20:	e0bff917 	ldw	r2,-28(fp)
 410ea24:	10c00315 	stw	r3,12(r2)
 410ea28:	e0fff917 	ldw	r3,-28(fp)
 410ea2c:	00810474 	movhi	r2,1041
 410ea30:	10be4604 	addi	r2,r2,-1768
 410ea34:	18800d15 	stw	r2,52(r3)
 410ea38:	e0bff917 	ldw	r2,-28(fp)
 410ea3c:	00c00044 	movi	r3,1
 410ea40:	10c02915 	stw	r3,164(r2)
 410ea44:	10002a15 	stw	zero,168(r2)
 410ea48:	e0bff917 	ldw	r2,-28(fp)
 410ea4c:	00ccc384 	movi	r3,13070
 410ea50:	10c02b0d 	sth	r3,172(r2)
 410ea54:	e0bff917 	ldw	r2,-28(fp)
 410ea58:	00eaf344 	movi	r3,-21555
 410ea5c:	10c02b8d 	sth	r3,174(r2)
 410ea60:	e0bff917 	ldw	r2,-28(fp)
 410ea64:	00c48d04 	movi	r3,4660
 410ea68:	10c02c0d 	sth	r3,176(r2)
 410ea6c:	e0bff917 	ldw	r2,-28(fp)
 410ea70:	00f99b44 	movi	r3,-6547
 410ea74:	10c02c8d 	sth	r3,178(r2)
 410ea78:	e0bff917 	ldw	r2,-28(fp)
 410ea7c:	00f7bb04 	movi	r3,-8468
 410ea80:	10c02d0d 	sth	r3,180(r2)
 410ea84:	e0bff917 	ldw	r2,-28(fp)
 410ea88:	00c00144 	movi	r3,5
 410ea8c:	10c02d8d 	sth	r3,182(r2)
 410ea90:	e0bff917 	ldw	r2,-28(fp)
 410ea94:	00c002c4 	movi	r3,11
 410ea98:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 410ea9c:	e0bff917 	ldw	r2,-28(fp)
 410eaa0:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 410eaa4:	e0bffa17 	ldw	r2,-24(fp)
 410eaa8:	10bff304 	addi	r2,r2,-52
 410eaac:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 410eab0:	e0bffb17 	ldw	r2,-20(fp)
 410eab4:	10800c04 	addi	r2,r2,48
 410eab8:	e0fffc17 	ldw	r3,-16(fp)
 410eabc:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 410eac0:	e0bffb17 	ldw	r2,-20(fp)
 410eac4:	10800b04 	addi	r2,r2,44
 410eac8:	e0fffd17 	ldw	r3,-12(fp)
 410eacc:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 410ead0:	e0bffb17 	ldw	r2,-20(fp)
 410ead4:	10800a04 	addi	r2,r2,40
 410ead8:	e0fff917 	ldw	r3,-28(fp)
 410eadc:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 410eae0:	00810474 	movhi	r2,1041
 410eae4:	10ba6304 	addi	r2,r2,-5748
 410eae8:	10c00104 	addi	r3,r2,4
 410eaec:	e0bffb17 	ldw	r2,-20(fp)
 410eaf0:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 410eaf4:	e0bffb17 	ldw	r2,-20(fp)
}
 410eaf8:	e037883a 	mov	sp,fp
 410eafc:	dfc00117 	ldw	ra,4(sp)
 410eb00:	df000017 	ldw	fp,0(sp)
 410eb04:	dec00204 	addi	sp,sp,8
 410eb08:	f800283a 	ret

0410eb0c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 410eb0c:	defffe04 	addi	sp,sp,-8
 410eb10:	df000115 	stw	fp,4(sp)
 410eb14:	df000104 	addi	fp,sp,4
 410eb18:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 410eb1c:	0001883a 	nop
 410eb20:	e037883a 	mov	sp,fp
 410eb24:	df000017 	ldw	fp,0(sp)
 410eb28:	dec00104 	addi	sp,sp,4
 410eb2c:	f800283a 	ret

0410eb30 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 410eb30:	defffe04 	addi	sp,sp,-8
 410eb34:	df000115 	stw	fp,4(sp)
 410eb38:	df000104 	addi	fp,sp,4
 410eb3c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 410eb40:	0001883a 	nop
 410eb44:	e037883a 	mov	sp,fp
 410eb48:	df000017 	ldw	fp,0(sp)
 410eb4c:	dec00104 	addi	sp,sp,4
 410eb50:	f800283a 	ret

0410eb54 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 410eb54:	deffff04 	addi	sp,sp,-4
 410eb58:	df000015 	stw	fp,0(sp)
 410eb5c:	d839883a 	mov	fp,sp
}
 410eb60:	0001883a 	nop
 410eb64:	e037883a 	mov	sp,fp
 410eb68:	df000017 	ldw	fp,0(sp)
 410eb6c:	dec00104 	addi	sp,sp,4
 410eb70:	f800283a 	ret

0410eb74 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 410eb74:	deffff04 	addi	sp,sp,-4
 410eb78:	df000015 	stw	fp,0(sp)
 410eb7c:	d839883a 	mov	fp,sp
}
 410eb80:	0001883a 	nop
 410eb84:	e037883a 	mov	sp,fp
 410eb88:	df000017 	ldw	fp,0(sp)
 410eb8c:	dec00104 	addi	sp,sp,4
 410eb90:	f800283a 	ret

0410eb94 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 410eb94:	deffff04 	addi	sp,sp,-4
 410eb98:	df000015 	stw	fp,0(sp)
 410eb9c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 410eba0:	0001883a 	nop
 410eba4:	e037883a 	mov	sp,fp
 410eba8:	df000017 	ldw	fp,0(sp)
 410ebac:	dec00104 	addi	sp,sp,4
 410ebb0:	f800283a 	ret

0410ebb4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 410ebb4:	deffff04 	addi	sp,sp,-4
 410ebb8:	df000015 	stw	fp,0(sp)
 410ebbc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 410ebc0:	0001883a 	nop
 410ebc4:	e037883a 	mov	sp,fp
 410ebc8:	df000017 	ldw	fp,0(sp)
 410ebcc:	dec00104 	addi	sp,sp,4
 410ebd0:	f800283a 	ret

0410ebd4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 410ebd4:	deffff04 	addi	sp,sp,-4
 410ebd8:	df000015 	stw	fp,0(sp)
 410ebdc:	d839883a 	mov	fp,sp
}
 410ebe0:	0001883a 	nop
 410ebe4:	e037883a 	mov	sp,fp
 410ebe8:	df000017 	ldw	fp,0(sp)
 410ebec:	dec00104 	addi	sp,sp,4
 410ebf0:	f800283a 	ret

0410ebf4 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 410ebf4:	deffff04 	addi	sp,sp,-4
 410ebf8:	df000015 	stw	fp,0(sp)
 410ebfc:	d839883a 	mov	fp,sp
}
 410ec00:	0001883a 	nop
 410ec04:	e037883a 	mov	sp,fp
 410ec08:	df000017 	ldw	fp,0(sp)
 410ec0c:	dec00104 	addi	sp,sp,4
 410ec10:	f800283a 	ret

0410ec14 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 410ec14:	defffe04 	addi	sp,sp,-8
 410ec18:	df000115 	stw	fp,4(sp)
 410ec1c:	df000104 	addi	fp,sp,4
 410ec20:	e13fff15 	stw	r4,-4(fp)
}
 410ec24:	0001883a 	nop
 410ec28:	e037883a 	mov	sp,fp
 410ec2c:	df000017 	ldw	fp,0(sp)
 410ec30:	dec00104 	addi	sp,sp,4
 410ec34:	f800283a 	ret

0410ec38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 410ec38:	defffb04 	addi	sp,sp,-20
 410ec3c:	dfc00415 	stw	ra,16(sp)
 410ec40:	df000315 	stw	fp,12(sp)
 410ec44:	df000304 	addi	fp,sp,12
 410ec48:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 410ec4c:	d0a00417 	ldw	r2,-32752(gp)
 410ec50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 410ec54:	00003106 	br	410ed1c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 410ec58:	e0bffd17 	ldw	r2,-12(fp)
 410ec5c:	10800217 	ldw	r2,8(r2)
 410ec60:	1009883a 	mov	r4,r2
 410ec64:	4100e6c0 	call	4100e6c <strlen>
 410ec68:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 410ec6c:	e0bffd17 	ldw	r2,-12(fp)
 410ec70:	10c00217 	ldw	r3,8(r2)
 410ec74:	e0bffe17 	ldw	r2,-8(fp)
 410ec78:	10bfffc4 	addi	r2,r2,-1
 410ec7c:	1885883a 	add	r2,r3,r2
 410ec80:	10800003 	ldbu	r2,0(r2)
 410ec84:	10803fcc 	andi	r2,r2,255
 410ec88:	1080201c 	xori	r2,r2,128
 410ec8c:	10bfe004 	addi	r2,r2,-128
 410ec90:	10800bd8 	cmpnei	r2,r2,47
 410ec94:	1000031e 	bne	r2,zero,410eca4 <alt_find_file+0x6c>
    {
      len -= 1;
 410ec98:	e0bffe17 	ldw	r2,-8(fp)
 410ec9c:	10bfffc4 	addi	r2,r2,-1
 410eca0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 410eca4:	e0bffe17 	ldw	r2,-8(fp)
 410eca8:	e0ffff17 	ldw	r3,-4(fp)
 410ecac:	1885883a 	add	r2,r3,r2
 410ecb0:	10800003 	ldbu	r2,0(r2)
 410ecb4:	10803fcc 	andi	r2,r2,255
 410ecb8:	1080201c 	xori	r2,r2,128
 410ecbc:	10bfe004 	addi	r2,r2,-128
 410ecc0:	10800be0 	cmpeqi	r2,r2,47
 410ecc4:	1000081e 	bne	r2,zero,410ece8 <alt_find_file+0xb0>
 410ecc8:	e0bffe17 	ldw	r2,-8(fp)
 410eccc:	e0ffff17 	ldw	r3,-4(fp)
 410ecd0:	1885883a 	add	r2,r3,r2
 410ecd4:	10800003 	ldbu	r2,0(r2)
 410ecd8:	10803fcc 	andi	r2,r2,255
 410ecdc:	1080201c 	xori	r2,r2,128
 410ece0:	10bfe004 	addi	r2,r2,-128
 410ece4:	10000a1e 	bne	r2,zero,410ed10 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 410ece8:	e0bffd17 	ldw	r2,-12(fp)
 410ecec:	10800217 	ldw	r2,8(r2)
 410ecf0:	e0fffe17 	ldw	r3,-8(fp)
 410ecf4:	180d883a 	mov	r6,r3
 410ecf8:	e17fff17 	ldw	r5,-4(fp)
 410ecfc:	1009883a 	mov	r4,r2
 410ed00:	410eef80 	call	410eef8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 410ed04:	1000021e 	bne	r2,zero,410ed10 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 410ed08:	e0bffd17 	ldw	r2,-12(fp)
 410ed0c:	00000706 	br	410ed2c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 410ed10:	e0bffd17 	ldw	r2,-12(fp)
 410ed14:	10800017 	ldw	r2,0(r2)
 410ed18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 410ed1c:	e0fffd17 	ldw	r3,-12(fp)
 410ed20:	d0a00404 	addi	r2,gp,-32752
 410ed24:	18bfcc1e 	bne	r3,r2,410ec58 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 410ed28:	0005883a 	mov	r2,zero
}
 410ed2c:	e037883a 	mov	sp,fp
 410ed30:	dfc00117 	ldw	ra,4(sp)
 410ed34:	df000017 	ldw	fp,0(sp)
 410ed38:	dec00204 	addi	sp,sp,8
 410ed3c:	f800283a 	ret

0410ed40 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 410ed40:	defff904 	addi	sp,sp,-28
 410ed44:	dfc00615 	stw	ra,24(sp)
 410ed48:	df000515 	stw	fp,20(sp)
 410ed4c:	df000504 	addi	fp,sp,20
 410ed50:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 410ed54:	00bffa04 	movi	r2,-24
 410ed58:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 410ed5c:	d0a71417 	ldw	r2,-25520(gp)
 410ed60:	e0bffd15 	stw	r2,-12(fp)
 410ed64:	e03ffe0d 	sth	zero,-8(fp)
 410ed68:	e0bffe0b 	ldhu	r2,-8(fp)
 410ed6c:	e0fffe84 	addi	r3,fp,-6
 410ed70:	180d883a 	mov	r6,r3
 410ed74:	100b883a 	mov	r5,r2
 410ed78:	e13ffd17 	ldw	r4,-12(fp)
 410ed7c:	410a0cc0 	call	410a0cc <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 410ed80:	e03ffb15 	stw	zero,-20(fp)
 410ed84:	00001906 	br	410edec <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 410ed88:	00810474 	movhi	r2,1041
 410ed8c:	10809c04 	addi	r2,r2,624
 410ed90:	e0fffb17 	ldw	r3,-20(fp)
 410ed94:	18c00324 	muli	r3,r3,12
 410ed98:	10c5883a 	add	r2,r2,r3
 410ed9c:	10800017 	ldw	r2,0(r2)
 410eda0:	10000f1e 	bne	r2,zero,410ede0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 410eda4:	00810474 	movhi	r2,1041
 410eda8:	10809c04 	addi	r2,r2,624
 410edac:	e0fffb17 	ldw	r3,-20(fp)
 410edb0:	18c00324 	muli	r3,r3,12
 410edb4:	10c5883a 	add	r2,r2,r3
 410edb8:	e0ffff17 	ldw	r3,-4(fp)
 410edbc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 410edc0:	d0e00817 	ldw	r3,-32736(gp)
 410edc4:	e0bffb17 	ldw	r2,-20(fp)
 410edc8:	1880020e 	bge	r3,r2,410edd4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 410edcc:	e0bffb17 	ldw	r2,-20(fp)
 410edd0:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 410edd4:	e0bffb17 	ldw	r2,-20(fp)
 410edd8:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 410eddc:	00000606 	br	410edf8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 410ede0:	e0bffb17 	ldw	r2,-20(fp)
 410ede4:	10800044 	addi	r2,r2,1
 410ede8:	e0bffb15 	stw	r2,-20(fp)
 410edec:	e0bffb17 	ldw	r2,-20(fp)
 410edf0:	10800810 	cmplti	r2,r2,32
 410edf4:	103fe41e 	bne	r2,zero,410ed88 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 410edf8:	d0a71417 	ldw	r2,-25520(gp)
 410edfc:	1009883a 	mov	r4,r2
 410ee00:	410a4440 	call	410a444 <OSSemPost>

  return rc;
 410ee04:	e0bffc17 	ldw	r2,-16(fp)
}
 410ee08:	e037883a 	mov	sp,fp
 410ee0c:	dfc00117 	ldw	ra,4(sp)
 410ee10:	df000017 	ldw	fp,0(sp)
 410ee14:	dec00204 	addi	sp,sp,8
 410ee18:	f800283a 	ret

0410ee1c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 410ee1c:	defffb04 	addi	sp,sp,-20
 410ee20:	df000415 	stw	fp,16(sp)
 410ee24:	df000404 	addi	fp,sp,16
 410ee28:	e13ffe15 	stw	r4,-8(fp)
 410ee2c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 410ee30:	e0bfff17 	ldw	r2,-4(fp)
 410ee34:	10840070 	cmpltui	r2,r2,4097
 410ee38:	1000021e 	bne	r2,zero,410ee44 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 410ee3c:	00840004 	movi	r2,4096
 410ee40:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 410ee44:	e0fffe17 	ldw	r3,-8(fp)
 410ee48:	e0bfff17 	ldw	r2,-4(fp)
 410ee4c:	1885883a 	add	r2,r3,r2
 410ee50:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 410ee54:	e0bffe17 	ldw	r2,-8(fp)
 410ee58:	e0bffc15 	stw	r2,-16(fp)
 410ee5c:	00000506 	br	410ee74 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 410ee60:	e0bffc17 	ldw	r2,-16(fp)
 410ee64:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 410ee68:	e0bffc17 	ldw	r2,-16(fp)
 410ee6c:	10800804 	addi	r2,r2,32
 410ee70:	e0bffc15 	stw	r2,-16(fp)
 410ee74:	e0fffc17 	ldw	r3,-16(fp)
 410ee78:	e0bffd17 	ldw	r2,-12(fp)
 410ee7c:	18bff836 	bltu	r3,r2,410ee60 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 410ee80:	e0bffe17 	ldw	r2,-8(fp)
 410ee84:	108007cc 	andi	r2,r2,31
 410ee88:	10000226 	beq	r2,zero,410ee94 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 410ee8c:	e0bffc17 	ldw	r2,-16(fp)
 410ee90:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 410ee94:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 410ee98:	0001883a 	nop
 410ee9c:	e037883a 	mov	sp,fp
 410eea0:	df000017 	ldw	fp,0(sp)
 410eea4:	dec00104 	addi	sp,sp,4
 410eea8:	f800283a 	ret

0410eeac <atexit>:
 410eeac:	200b883a 	mov	r5,r4
 410eeb0:	000f883a 	mov	r7,zero
 410eeb4:	000d883a 	mov	r6,zero
 410eeb8:	0009883a 	mov	r4,zero
 410eebc:	410ef741 	jmpi	410ef74 <__register_exitproc>

0410eec0 <exit>:
 410eec0:	defffe04 	addi	sp,sp,-8
 410eec4:	000b883a 	mov	r5,zero
 410eec8:	dc000015 	stw	r16,0(sp)
 410eecc:	dfc00115 	stw	ra,4(sp)
 410eed0:	2021883a 	mov	r16,r4
 410eed4:	410f08c0 	call	410f08c <__call_exitprocs>
 410eed8:	00810474 	movhi	r2,1041
 410eedc:	10852f04 	addi	r2,r2,5308
 410eee0:	11000017 	ldw	r4,0(r2)
 410eee4:	20800f17 	ldw	r2,60(r4)
 410eee8:	10000126 	beq	r2,zero,410eef0 <exit+0x30>
 410eeec:	103ee83a 	callr	r2
 410eef0:	8009883a 	mov	r4,r16
 410eef4:	410f7440 	call	410f744 <_exit>

0410eef8 <memcmp>:
 410eef8:	01c000c4 	movi	r7,3
 410eefc:	3980192e 	bgeu	r7,r6,410ef64 <memcmp+0x6c>
 410ef00:	2144b03a 	or	r2,r4,r5
 410ef04:	11c4703a 	and	r2,r2,r7
 410ef08:	10000f26 	beq	r2,zero,410ef48 <memcmp+0x50>
 410ef0c:	20800003 	ldbu	r2,0(r4)
 410ef10:	28c00003 	ldbu	r3,0(r5)
 410ef14:	10c0151e 	bne	r2,r3,410ef6c <memcmp+0x74>
 410ef18:	31bfff84 	addi	r6,r6,-2
 410ef1c:	01ffffc4 	movi	r7,-1
 410ef20:	00000406 	br	410ef34 <memcmp+0x3c>
 410ef24:	20800003 	ldbu	r2,0(r4)
 410ef28:	28c00003 	ldbu	r3,0(r5)
 410ef2c:	31bfffc4 	addi	r6,r6,-1
 410ef30:	10c00e1e 	bne	r2,r3,410ef6c <memcmp+0x74>
 410ef34:	21000044 	addi	r4,r4,1
 410ef38:	29400044 	addi	r5,r5,1
 410ef3c:	31fff91e 	bne	r6,r7,410ef24 <memcmp+0x2c>
 410ef40:	0005883a 	mov	r2,zero
 410ef44:	f800283a 	ret
 410ef48:	20c00017 	ldw	r3,0(r4)
 410ef4c:	28800017 	ldw	r2,0(r5)
 410ef50:	18bfee1e 	bne	r3,r2,410ef0c <memcmp+0x14>
 410ef54:	31bfff04 	addi	r6,r6,-4
 410ef58:	21000104 	addi	r4,r4,4
 410ef5c:	29400104 	addi	r5,r5,4
 410ef60:	39bff936 	bltu	r7,r6,410ef48 <memcmp+0x50>
 410ef64:	303fe91e 	bne	r6,zero,410ef0c <memcmp+0x14>
 410ef68:	003ff506 	br	410ef40 <memcmp+0x48>
 410ef6c:	10c5c83a 	sub	r2,r2,r3
 410ef70:	f800283a 	ret

0410ef74 <__register_exitproc>:
 410ef74:	defffa04 	addi	sp,sp,-24
 410ef78:	dc000315 	stw	r16,12(sp)
 410ef7c:	04010474 	movhi	r16,1041
 410ef80:	84052f04 	addi	r16,r16,5308
 410ef84:	80c00017 	ldw	r3,0(r16)
 410ef88:	dc400415 	stw	r17,16(sp)
 410ef8c:	dfc00515 	stw	ra,20(sp)
 410ef90:	18805217 	ldw	r2,328(r3)
 410ef94:	2023883a 	mov	r17,r4
 410ef98:	10003726 	beq	r2,zero,410f078 <__register_exitproc+0x104>
 410ef9c:	10c00117 	ldw	r3,4(r2)
 410efa0:	010007c4 	movi	r4,31
 410efa4:	20c00e16 	blt	r4,r3,410efe0 <__register_exitproc+0x6c>
 410efa8:	1a000044 	addi	r8,r3,1
 410efac:	8800221e 	bne	r17,zero,410f038 <__register_exitproc+0xc4>
 410efb0:	18c00084 	addi	r3,r3,2
 410efb4:	18c7883a 	add	r3,r3,r3
 410efb8:	18c7883a 	add	r3,r3,r3
 410efbc:	12000115 	stw	r8,4(r2)
 410efc0:	10c7883a 	add	r3,r2,r3
 410efc4:	19400015 	stw	r5,0(r3)
 410efc8:	0005883a 	mov	r2,zero
 410efcc:	dfc00517 	ldw	ra,20(sp)
 410efd0:	dc400417 	ldw	r17,16(sp)
 410efd4:	dc000317 	ldw	r16,12(sp)
 410efd8:	dec00604 	addi	sp,sp,24
 410efdc:	f800283a 	ret
 410efe0:	00800034 	movhi	r2,0
 410efe4:	10800004 	addi	r2,r2,0
 410efe8:	10002626 	beq	r2,zero,410f084 <__register_exitproc+0x110>
 410efec:	01006404 	movi	r4,400
 410eff0:	d9400015 	stw	r5,0(sp)
 410eff4:	d9800115 	stw	r6,4(sp)
 410eff8:	d9c00215 	stw	r7,8(sp)
 410effc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 410f000:	d9400017 	ldw	r5,0(sp)
 410f004:	d9800117 	ldw	r6,4(sp)
 410f008:	d9c00217 	ldw	r7,8(sp)
 410f00c:	10001d26 	beq	r2,zero,410f084 <__register_exitproc+0x110>
 410f010:	81000017 	ldw	r4,0(r16)
 410f014:	10000115 	stw	zero,4(r2)
 410f018:	02000044 	movi	r8,1
 410f01c:	22405217 	ldw	r9,328(r4)
 410f020:	0007883a 	mov	r3,zero
 410f024:	12400015 	stw	r9,0(r2)
 410f028:	20805215 	stw	r2,328(r4)
 410f02c:	10006215 	stw	zero,392(r2)
 410f030:	10006315 	stw	zero,396(r2)
 410f034:	883fde26 	beq	r17,zero,410efb0 <__register_exitproc+0x3c>
 410f038:	18c9883a 	add	r4,r3,r3
 410f03c:	2109883a 	add	r4,r4,r4
 410f040:	1109883a 	add	r4,r2,r4
 410f044:	21802215 	stw	r6,136(r4)
 410f048:	01800044 	movi	r6,1
 410f04c:	12406217 	ldw	r9,392(r2)
 410f050:	30cc983a 	sll	r6,r6,r3
 410f054:	4992b03a 	or	r9,r9,r6
 410f058:	12406215 	stw	r9,392(r2)
 410f05c:	21c04215 	stw	r7,264(r4)
 410f060:	01000084 	movi	r4,2
 410f064:	893fd21e 	bne	r17,r4,410efb0 <__register_exitproc+0x3c>
 410f068:	11006317 	ldw	r4,396(r2)
 410f06c:	218cb03a 	or	r6,r4,r6
 410f070:	11806315 	stw	r6,396(r2)
 410f074:	003fce06 	br	410efb0 <__register_exitproc+0x3c>
 410f078:	18805304 	addi	r2,r3,332
 410f07c:	18805215 	stw	r2,328(r3)
 410f080:	003fc606 	br	410ef9c <__register_exitproc+0x28>
 410f084:	00bfffc4 	movi	r2,-1
 410f088:	003fd006 	br	410efcc <__register_exitproc+0x58>

0410f08c <__call_exitprocs>:
 410f08c:	defff504 	addi	sp,sp,-44
 410f090:	df000915 	stw	fp,36(sp)
 410f094:	dd400615 	stw	r21,24(sp)
 410f098:	dc800315 	stw	r18,12(sp)
 410f09c:	dfc00a15 	stw	ra,40(sp)
 410f0a0:	ddc00815 	stw	r23,32(sp)
 410f0a4:	dd800715 	stw	r22,28(sp)
 410f0a8:	dd000515 	stw	r20,20(sp)
 410f0ac:	dcc00415 	stw	r19,16(sp)
 410f0b0:	dc400215 	stw	r17,8(sp)
 410f0b4:	dc000115 	stw	r16,4(sp)
 410f0b8:	d9000015 	stw	r4,0(sp)
 410f0bc:	2839883a 	mov	fp,r5
 410f0c0:	04800044 	movi	r18,1
 410f0c4:	057fffc4 	movi	r21,-1
 410f0c8:	00810474 	movhi	r2,1041
 410f0cc:	10852f04 	addi	r2,r2,5308
 410f0d0:	12000017 	ldw	r8,0(r2)
 410f0d4:	45005217 	ldw	r20,328(r8)
 410f0d8:	44c05204 	addi	r19,r8,328
 410f0dc:	a0001c26 	beq	r20,zero,410f150 <__call_exitprocs+0xc4>
 410f0e0:	a0800117 	ldw	r2,4(r20)
 410f0e4:	15ffffc4 	addi	r23,r2,-1
 410f0e8:	b8000d16 	blt	r23,zero,410f120 <__call_exitprocs+0x94>
 410f0ec:	14000044 	addi	r16,r2,1
 410f0f0:	8421883a 	add	r16,r16,r16
 410f0f4:	8421883a 	add	r16,r16,r16
 410f0f8:	84402004 	addi	r17,r16,128
 410f0fc:	a463883a 	add	r17,r20,r17
 410f100:	a421883a 	add	r16,r20,r16
 410f104:	e0001e26 	beq	fp,zero,410f180 <__call_exitprocs+0xf4>
 410f108:	80804017 	ldw	r2,256(r16)
 410f10c:	e0801c26 	beq	fp,r2,410f180 <__call_exitprocs+0xf4>
 410f110:	bdffffc4 	addi	r23,r23,-1
 410f114:	843fff04 	addi	r16,r16,-4
 410f118:	8c7fff04 	addi	r17,r17,-4
 410f11c:	bd7ff91e 	bne	r23,r21,410f104 <__call_exitprocs+0x78>
 410f120:	00800034 	movhi	r2,0
 410f124:	10800004 	addi	r2,r2,0
 410f128:	10000926 	beq	r2,zero,410f150 <__call_exitprocs+0xc4>
 410f12c:	a0800117 	ldw	r2,4(r20)
 410f130:	1000301e 	bne	r2,zero,410f1f4 <__call_exitprocs+0x168>
 410f134:	a0800017 	ldw	r2,0(r20)
 410f138:	10003226 	beq	r2,zero,410f204 <__call_exitprocs+0x178>
 410f13c:	a009883a 	mov	r4,r20
 410f140:	98800015 	stw	r2,0(r19)
 410f144:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 410f148:	9d000017 	ldw	r20,0(r19)
 410f14c:	a03fe41e 	bne	r20,zero,410f0e0 <__call_exitprocs+0x54>
 410f150:	dfc00a17 	ldw	ra,40(sp)
 410f154:	df000917 	ldw	fp,36(sp)
 410f158:	ddc00817 	ldw	r23,32(sp)
 410f15c:	dd800717 	ldw	r22,28(sp)
 410f160:	dd400617 	ldw	r21,24(sp)
 410f164:	dd000517 	ldw	r20,20(sp)
 410f168:	dcc00417 	ldw	r19,16(sp)
 410f16c:	dc800317 	ldw	r18,12(sp)
 410f170:	dc400217 	ldw	r17,8(sp)
 410f174:	dc000117 	ldw	r16,4(sp)
 410f178:	dec00b04 	addi	sp,sp,44
 410f17c:	f800283a 	ret
 410f180:	a0800117 	ldw	r2,4(r20)
 410f184:	80c00017 	ldw	r3,0(r16)
 410f188:	10bfffc4 	addi	r2,r2,-1
 410f18c:	15c01426 	beq	r2,r23,410f1e0 <__call_exitprocs+0x154>
 410f190:	80000015 	stw	zero,0(r16)
 410f194:	183fde26 	beq	r3,zero,410f110 <__call_exitprocs+0x84>
 410f198:	95c8983a 	sll	r4,r18,r23
 410f19c:	a0806217 	ldw	r2,392(r20)
 410f1a0:	a5800117 	ldw	r22,4(r20)
 410f1a4:	2084703a 	and	r2,r4,r2
 410f1a8:	10000b26 	beq	r2,zero,410f1d8 <__call_exitprocs+0x14c>
 410f1ac:	a0806317 	ldw	r2,396(r20)
 410f1b0:	2088703a 	and	r4,r4,r2
 410f1b4:	20000c1e 	bne	r4,zero,410f1e8 <__call_exitprocs+0x15c>
 410f1b8:	89400017 	ldw	r5,0(r17)
 410f1bc:	d9000017 	ldw	r4,0(sp)
 410f1c0:	183ee83a 	callr	r3
 410f1c4:	a0800117 	ldw	r2,4(r20)
 410f1c8:	15bfbf1e 	bne	r2,r22,410f0c8 <__call_exitprocs+0x3c>
 410f1cc:	98800017 	ldw	r2,0(r19)
 410f1d0:	153fcf26 	beq	r2,r20,410f110 <__call_exitprocs+0x84>
 410f1d4:	003fbc06 	br	410f0c8 <__call_exitprocs+0x3c>
 410f1d8:	183ee83a 	callr	r3
 410f1dc:	003ff906 	br	410f1c4 <__call_exitprocs+0x138>
 410f1e0:	a5c00115 	stw	r23,4(r20)
 410f1e4:	003feb06 	br	410f194 <__call_exitprocs+0x108>
 410f1e8:	89000017 	ldw	r4,0(r17)
 410f1ec:	183ee83a 	callr	r3
 410f1f0:	003ff406 	br	410f1c4 <__call_exitprocs+0x138>
 410f1f4:	a0800017 	ldw	r2,0(r20)
 410f1f8:	a027883a 	mov	r19,r20
 410f1fc:	1029883a 	mov	r20,r2
 410f200:	003fb606 	br	410f0dc <__call_exitprocs+0x50>
 410f204:	0005883a 	mov	r2,zero
 410f208:	003ffb06 	br	410f1f8 <__call_exitprocs+0x16c>

0410f20c <__umoddi3>:
 410f20c:	defff404 	addi	sp,sp,-48
 410f210:	df000a15 	stw	fp,40(sp)
 410f214:	dc400315 	stw	r17,12(sp)
 410f218:	dc000215 	stw	r16,8(sp)
 410f21c:	dfc00b15 	stw	ra,44(sp)
 410f220:	ddc00915 	stw	r23,36(sp)
 410f224:	dd800815 	stw	r22,32(sp)
 410f228:	dd400715 	stw	r21,28(sp)
 410f22c:	dd000615 	stw	r20,24(sp)
 410f230:	dcc00515 	stw	r19,20(sp)
 410f234:	dc800415 	stw	r18,16(sp)
 410f238:	2021883a 	mov	r16,r4
 410f23c:	2823883a 	mov	r17,r5
 410f240:	2839883a 	mov	fp,r5
 410f244:	38003c1e 	bne	r7,zero,410f338 <__umoddi3+0x12c>
 410f248:	3027883a 	mov	r19,r6
 410f24c:	2029883a 	mov	r20,r4
 410f250:	2980512e 	bgeu	r5,r6,410f398 <__umoddi3+0x18c>
 410f254:	00bfffd4 	movui	r2,65535
 410f258:	11809a36 	bltu	r2,r6,410f4c4 <__umoddi3+0x2b8>
 410f25c:	01003fc4 	movi	r4,255
 410f260:	2189803a 	cmpltu	r4,r4,r6
 410f264:	200890fa 	slli	r4,r4,3
 410f268:	3104d83a 	srl	r2,r6,r4
 410f26c:	00c10474 	movhi	r3,1041
 410f270:	18fe4684 	addi	r3,r3,-1766
 410f274:	1885883a 	add	r2,r3,r2
 410f278:	10c00003 	ldbu	r3,0(r2)
 410f27c:	00800804 	movi	r2,32
 410f280:	1909883a 	add	r4,r3,r4
 410f284:	1125c83a 	sub	r18,r2,r4
 410f288:	90000526 	beq	r18,zero,410f2a0 <__umoddi3+0x94>
 410f28c:	8ca2983a 	sll	r17,r17,r18
 410f290:	8108d83a 	srl	r4,r16,r4
 410f294:	34a6983a 	sll	r19,r6,r18
 410f298:	84a8983a 	sll	r20,r16,r18
 410f29c:	2478b03a 	or	fp,r4,r17
 410f2a0:	982ed43a 	srli	r23,r19,16
 410f2a4:	e009883a 	mov	r4,fp
 410f2a8:	9dbfffcc 	andi	r22,r19,65535
 410f2ac:	b80b883a 	mov	r5,r23
 410f2b0:	4100b7c0 	call	4100b7c <__umodsi3>
 410f2b4:	e009883a 	mov	r4,fp
 410f2b8:	b80b883a 	mov	r5,r23
 410f2bc:	102b883a 	mov	r21,r2
 410f2c0:	4100b180 	call	4100b18 <__udivsi3>
 410f2c4:	a806943a 	slli	r3,r21,16
 410f2c8:	a008d43a 	srli	r4,r20,16
 410f2cc:	b085383a 	mul	r2,r22,r2
 410f2d0:	20c8b03a 	or	r4,r4,r3
 410f2d4:	2080032e 	bgeu	r4,r2,410f2e4 <__umoddi3+0xd8>
 410f2d8:	24c9883a 	add	r4,r4,r19
 410f2dc:	24c00136 	bltu	r4,r19,410f2e4 <__umoddi3+0xd8>
 410f2e0:	20811036 	bltu	r4,r2,410f724 <__umoddi3+0x518>
 410f2e4:	20abc83a 	sub	r21,r4,r2
 410f2e8:	b80b883a 	mov	r5,r23
 410f2ec:	a809883a 	mov	r4,r21
 410f2f0:	4100b7c0 	call	4100b7c <__umodsi3>
 410f2f4:	1023883a 	mov	r17,r2
 410f2f8:	b80b883a 	mov	r5,r23
 410f2fc:	a809883a 	mov	r4,r21
 410f300:	4100b180 	call	4100b18 <__udivsi3>
 410f304:	8822943a 	slli	r17,r17,16
 410f308:	b085383a 	mul	r2,r22,r2
 410f30c:	a0ffffcc 	andi	r3,r20,65535
 410f310:	1c46b03a 	or	r3,r3,r17
 410f314:	1880042e 	bgeu	r3,r2,410f328 <__umoddi3+0x11c>
 410f318:	1cc7883a 	add	r3,r3,r19
 410f31c:	1cc00236 	bltu	r3,r19,410f328 <__umoddi3+0x11c>
 410f320:	1880012e 	bgeu	r3,r2,410f328 <__umoddi3+0x11c>
 410f324:	1cc7883a 	add	r3,r3,r19
 410f328:	1885c83a 	sub	r2,r3,r2
 410f32c:	1484d83a 	srl	r2,r2,r18
 410f330:	0007883a 	mov	r3,zero
 410f334:	00004f06 	br	410f474 <__umoddi3+0x268>
 410f338:	29c04c36 	bltu	r5,r7,410f46c <__umoddi3+0x260>
 410f33c:	00bfffd4 	movui	r2,65535
 410f340:	11c0582e 	bgeu	r2,r7,410f4a4 <__umoddi3+0x298>
 410f344:	00804034 	movhi	r2,256
 410f348:	10bfffc4 	addi	r2,r2,-1
 410f34c:	11c0e736 	bltu	r2,r7,410f6ec <__umoddi3+0x4e0>
 410f350:	01000404 	movi	r4,16
 410f354:	3904d83a 	srl	r2,r7,r4
 410f358:	00c10474 	movhi	r3,1041
 410f35c:	18fe4684 	addi	r3,r3,-1766
 410f360:	1885883a 	add	r2,r3,r2
 410f364:	14c00003 	ldbu	r19,0(r2)
 410f368:	00c00804 	movi	r3,32
 410f36c:	9927883a 	add	r19,r19,r4
 410f370:	1ce9c83a 	sub	r20,r3,r19
 410f374:	a000581e 	bne	r20,zero,410f4d8 <__umoddi3+0x2cc>
 410f378:	3c400136 	bltu	r7,r17,410f380 <__umoddi3+0x174>
 410f37c:	8180eb36 	bltu	r16,r6,410f72c <__umoddi3+0x520>
 410f380:	8185c83a 	sub	r2,r16,r6
 410f384:	89e3c83a 	sub	r17,r17,r7
 410f388:	8089803a 	cmpltu	r4,r16,r2
 410f38c:	8939c83a 	sub	fp,r17,r4
 410f390:	e007883a 	mov	r3,fp
 410f394:	00003706 	br	410f474 <__umoddi3+0x268>
 410f398:	3000041e 	bne	r6,zero,410f3ac <__umoddi3+0x1a0>
 410f39c:	000b883a 	mov	r5,zero
 410f3a0:	01000044 	movi	r4,1
 410f3a4:	4100b180 	call	4100b18 <__udivsi3>
 410f3a8:	1027883a 	mov	r19,r2
 410f3ac:	00bfffd4 	movui	r2,65535
 410f3b0:	14c0402e 	bgeu	r2,r19,410f4b4 <__umoddi3+0x2a8>
 410f3b4:	00804034 	movhi	r2,256
 410f3b8:	10bfffc4 	addi	r2,r2,-1
 410f3bc:	14c0cd36 	bltu	r2,r19,410f6f4 <__umoddi3+0x4e8>
 410f3c0:	00800404 	movi	r2,16
 410f3c4:	9886d83a 	srl	r3,r19,r2
 410f3c8:	01010474 	movhi	r4,1041
 410f3cc:	213e4684 	addi	r4,r4,-1766
 410f3d0:	20c7883a 	add	r3,r4,r3
 410f3d4:	18c00003 	ldbu	r3,0(r3)
 410f3d8:	1887883a 	add	r3,r3,r2
 410f3dc:	00800804 	movi	r2,32
 410f3e0:	10e5c83a 	sub	r18,r2,r3
 410f3e4:	9000901e 	bne	r18,zero,410f628 <__umoddi3+0x41c>
 410f3e8:	982cd43a 	srli	r22,r19,16
 410f3ec:	8ce3c83a 	sub	r17,r17,r19
 410f3f0:	9d7fffcc 	andi	r21,r19,65535
 410f3f4:	b00b883a 	mov	r5,r22
 410f3f8:	8809883a 	mov	r4,r17
 410f3fc:	4100b7c0 	call	4100b7c <__umodsi3>
 410f400:	8809883a 	mov	r4,r17
 410f404:	b00b883a 	mov	r5,r22
 410f408:	1021883a 	mov	r16,r2
 410f40c:	4100b180 	call	4100b18 <__udivsi3>
 410f410:	8006943a 	slli	r3,r16,16
 410f414:	a008d43a 	srli	r4,r20,16
 410f418:	1545383a 	mul	r2,r2,r21
 410f41c:	20c8b03a 	or	r4,r4,r3
 410f420:	2080042e 	bgeu	r4,r2,410f434 <__umoddi3+0x228>
 410f424:	24c9883a 	add	r4,r4,r19
 410f428:	24c00236 	bltu	r4,r19,410f434 <__umoddi3+0x228>
 410f42c:	2080012e 	bgeu	r4,r2,410f434 <__umoddi3+0x228>
 410f430:	24c9883a 	add	r4,r4,r19
 410f434:	20a1c83a 	sub	r16,r4,r2
 410f438:	b00b883a 	mov	r5,r22
 410f43c:	8009883a 	mov	r4,r16
 410f440:	4100b7c0 	call	4100b7c <__umodsi3>
 410f444:	1023883a 	mov	r17,r2
 410f448:	b00b883a 	mov	r5,r22
 410f44c:	8009883a 	mov	r4,r16
 410f450:	4100b180 	call	4100b18 <__udivsi3>
 410f454:	8822943a 	slli	r17,r17,16
 410f458:	1545383a 	mul	r2,r2,r21
 410f45c:	a53fffcc 	andi	r20,r20,65535
 410f460:	a446b03a 	or	r3,r20,r17
 410f464:	18bfb02e 	bgeu	r3,r2,410f328 <__umoddi3+0x11c>
 410f468:	003fab06 	br	410f318 <__umoddi3+0x10c>
 410f46c:	2005883a 	mov	r2,r4
 410f470:	2807883a 	mov	r3,r5
 410f474:	dfc00b17 	ldw	ra,44(sp)
 410f478:	df000a17 	ldw	fp,40(sp)
 410f47c:	ddc00917 	ldw	r23,36(sp)
 410f480:	dd800817 	ldw	r22,32(sp)
 410f484:	dd400717 	ldw	r21,28(sp)
 410f488:	dd000617 	ldw	r20,24(sp)
 410f48c:	dcc00517 	ldw	r19,20(sp)
 410f490:	dc800417 	ldw	r18,16(sp)
 410f494:	dc400317 	ldw	r17,12(sp)
 410f498:	dc000217 	ldw	r16,8(sp)
 410f49c:	dec00c04 	addi	sp,sp,48
 410f4a0:	f800283a 	ret
 410f4a4:	04c03fc4 	movi	r19,255
 410f4a8:	99c9803a 	cmpltu	r4,r19,r7
 410f4ac:	200890fa 	slli	r4,r4,3
 410f4b0:	003fa806 	br	410f354 <__umoddi3+0x148>
 410f4b4:	00803fc4 	movi	r2,255
 410f4b8:	14c5803a 	cmpltu	r2,r2,r19
 410f4bc:	100490fa 	slli	r2,r2,3
 410f4c0:	003fc006 	br	410f3c4 <__umoddi3+0x1b8>
 410f4c4:	00804034 	movhi	r2,256
 410f4c8:	10bfffc4 	addi	r2,r2,-1
 410f4cc:	11808b36 	bltu	r2,r6,410f6fc <__umoddi3+0x4f0>
 410f4d0:	01000404 	movi	r4,16
 410f4d4:	003f6406 	br	410f268 <__umoddi3+0x5c>
 410f4d8:	34c4d83a 	srl	r2,r6,r19
 410f4dc:	3d0e983a 	sll	r7,r7,r20
 410f4e0:	8cf8d83a 	srl	fp,r17,r19
 410f4e4:	8d10983a 	sll	r8,r17,r20
 410f4e8:	38aab03a 	or	r21,r7,r2
 410f4ec:	a82cd43a 	srli	r22,r21,16
 410f4f0:	84e2d83a 	srl	r17,r16,r19
 410f4f4:	e009883a 	mov	r4,fp
 410f4f8:	b00b883a 	mov	r5,r22
 410f4fc:	8a22b03a 	or	r17,r17,r8
 410f500:	3524983a 	sll	r18,r6,r20
 410f504:	4100b7c0 	call	4100b7c <__umodsi3>
 410f508:	e009883a 	mov	r4,fp
 410f50c:	b00b883a 	mov	r5,r22
 410f510:	102f883a 	mov	r23,r2
 410f514:	4100b180 	call	4100b18 <__udivsi3>
 410f518:	100d883a 	mov	r6,r2
 410f51c:	b808943a 	slli	r4,r23,16
 410f520:	aa3fffcc 	andi	r8,r21,65535
 410f524:	8804d43a 	srli	r2,r17,16
 410f528:	41af383a 	mul	r23,r8,r6
 410f52c:	8520983a 	sll	r16,r16,r20
 410f530:	1104b03a 	or	r2,r2,r4
 410f534:	15c0042e 	bgeu	r2,r23,410f548 <__umoddi3+0x33c>
 410f538:	1545883a 	add	r2,r2,r21
 410f53c:	30ffffc4 	addi	r3,r6,-1
 410f540:	1540742e 	bgeu	r2,r21,410f714 <__umoddi3+0x508>
 410f544:	180d883a 	mov	r6,r3
 410f548:	15efc83a 	sub	r23,r2,r23
 410f54c:	b00b883a 	mov	r5,r22
 410f550:	b809883a 	mov	r4,r23
 410f554:	d9800115 	stw	r6,4(sp)
 410f558:	da000015 	stw	r8,0(sp)
 410f55c:	4100b7c0 	call	4100b7c <__umodsi3>
 410f560:	b00b883a 	mov	r5,r22
 410f564:	b809883a 	mov	r4,r23
 410f568:	1039883a 	mov	fp,r2
 410f56c:	4100b180 	call	4100b18 <__udivsi3>
 410f570:	da000017 	ldw	r8,0(sp)
 410f574:	e038943a 	slli	fp,fp,16
 410f578:	100b883a 	mov	r5,r2
 410f57c:	4089383a 	mul	r4,r8,r2
 410f580:	8a3fffcc 	andi	r8,r17,65535
 410f584:	4710b03a 	or	r8,r8,fp
 410f588:	d9800117 	ldw	r6,4(sp)
 410f58c:	4100042e 	bgeu	r8,r4,410f5a0 <__umoddi3+0x394>
 410f590:	4551883a 	add	r8,r8,r21
 410f594:	10bfffc4 	addi	r2,r2,-1
 410f598:	45405a2e 	bgeu	r8,r21,410f704 <__umoddi3+0x4f8>
 410f59c:	100b883a 	mov	r5,r2
 410f5a0:	300c943a 	slli	r6,r6,16
 410f5a4:	91ffffcc 	andi	r7,r18,65535
 410f5a8:	9004d43a 	srli	r2,r18,16
 410f5ac:	314cb03a 	or	r6,r6,r5
 410f5b0:	317fffcc 	andi	r5,r6,65535
 410f5b4:	300cd43a 	srli	r6,r6,16
 410f5b8:	29d3383a 	mul	r9,r5,r7
 410f5bc:	288b383a 	mul	r5,r5,r2
 410f5c0:	31cf383a 	mul	r7,r6,r7
 410f5c4:	4806d43a 	srli	r3,r9,16
 410f5c8:	4111c83a 	sub	r8,r8,r4
 410f5cc:	29cb883a 	add	r5,r5,r7
 410f5d0:	194b883a 	add	r5,r3,r5
 410f5d4:	3085383a 	mul	r2,r6,r2
 410f5d8:	29c0022e 	bgeu	r5,r7,410f5e4 <__umoddi3+0x3d8>
 410f5dc:	00c00074 	movhi	r3,1
 410f5e0:	10c5883a 	add	r2,r2,r3
 410f5e4:	2808d43a 	srli	r4,r5,16
 410f5e8:	280a943a 	slli	r5,r5,16
 410f5ec:	4a7fffcc 	andi	r9,r9,65535
 410f5f0:	2085883a 	add	r2,r4,r2
 410f5f4:	2a4b883a 	add	r5,r5,r9
 410f5f8:	40803636 	bltu	r8,r2,410f6d4 <__umoddi3+0x4c8>
 410f5fc:	40804d26 	beq	r8,r2,410f734 <__umoddi3+0x528>
 410f600:	4089c83a 	sub	r4,r8,r2
 410f604:	280f883a 	mov	r7,r5
 410f608:	81cfc83a 	sub	r7,r16,r7
 410f60c:	81c7803a 	cmpltu	r3,r16,r7
 410f610:	20c7c83a 	sub	r3,r4,r3
 410f614:	1cc4983a 	sll	r2,r3,r19
 410f618:	3d0ed83a 	srl	r7,r7,r20
 410f61c:	1d06d83a 	srl	r3,r3,r20
 410f620:	11c4b03a 	or	r2,r2,r7
 410f624:	003f9306 	br	410f474 <__umoddi3+0x268>
 410f628:	9ca6983a 	sll	r19,r19,r18
 410f62c:	88e8d83a 	srl	r20,r17,r3
 410f630:	80c4d83a 	srl	r2,r16,r3
 410f634:	982cd43a 	srli	r22,r19,16
 410f638:	8ca2983a 	sll	r17,r17,r18
 410f63c:	a009883a 	mov	r4,r20
 410f640:	b00b883a 	mov	r5,r22
 410f644:	1478b03a 	or	fp,r2,r17
 410f648:	4100b7c0 	call	4100b7c <__umodsi3>
 410f64c:	a009883a 	mov	r4,r20
 410f650:	b00b883a 	mov	r5,r22
 410f654:	1023883a 	mov	r17,r2
 410f658:	4100b180 	call	4100b18 <__udivsi3>
 410f65c:	9d7fffcc 	andi	r21,r19,65535
 410f660:	880a943a 	slli	r5,r17,16
 410f664:	e008d43a 	srli	r4,fp,16
 410f668:	a885383a 	mul	r2,r21,r2
 410f66c:	84a8983a 	sll	r20,r16,r18
 410f670:	2148b03a 	or	r4,r4,r5
 410f674:	2080042e 	bgeu	r4,r2,410f688 <__umoddi3+0x47c>
 410f678:	24c9883a 	add	r4,r4,r19
 410f67c:	24c00236 	bltu	r4,r19,410f688 <__umoddi3+0x47c>
 410f680:	2080012e 	bgeu	r4,r2,410f688 <__umoddi3+0x47c>
 410f684:	24c9883a 	add	r4,r4,r19
 410f688:	20a3c83a 	sub	r17,r4,r2
 410f68c:	b00b883a 	mov	r5,r22
 410f690:	8809883a 	mov	r4,r17
 410f694:	4100b7c0 	call	4100b7c <__umodsi3>
 410f698:	102f883a 	mov	r23,r2
 410f69c:	8809883a 	mov	r4,r17
 410f6a0:	b00b883a 	mov	r5,r22
 410f6a4:	4100b180 	call	4100b18 <__udivsi3>
 410f6a8:	b82e943a 	slli	r23,r23,16
 410f6ac:	a885383a 	mul	r2,r21,r2
 410f6b0:	e13fffcc 	andi	r4,fp,65535
 410f6b4:	25c8b03a 	or	r4,r4,r23
 410f6b8:	2080042e 	bgeu	r4,r2,410f6cc <__umoddi3+0x4c0>
 410f6bc:	24c9883a 	add	r4,r4,r19
 410f6c0:	24c00236 	bltu	r4,r19,410f6cc <__umoddi3+0x4c0>
 410f6c4:	2080012e 	bgeu	r4,r2,410f6cc <__umoddi3+0x4c0>
 410f6c8:	24c9883a 	add	r4,r4,r19
 410f6cc:	20a3c83a 	sub	r17,r4,r2
 410f6d0:	003f4806 	br	410f3f4 <__umoddi3+0x1e8>
 410f6d4:	2c8fc83a 	sub	r7,r5,r18
 410f6d8:	1545c83a 	sub	r2,r2,r21
 410f6dc:	29cb803a 	cmpltu	r5,r5,r7
 410f6e0:	1145c83a 	sub	r2,r2,r5
 410f6e4:	4089c83a 	sub	r4,r8,r2
 410f6e8:	003fc706 	br	410f608 <__umoddi3+0x3fc>
 410f6ec:	01000604 	movi	r4,24
 410f6f0:	003f1806 	br	410f354 <__umoddi3+0x148>
 410f6f4:	00800604 	movi	r2,24
 410f6f8:	003f3206 	br	410f3c4 <__umoddi3+0x1b8>
 410f6fc:	01000604 	movi	r4,24
 410f700:	003ed906 	br	410f268 <__umoddi3+0x5c>
 410f704:	413fa52e 	bgeu	r8,r4,410f59c <__umoddi3+0x390>
 410f708:	297fff84 	addi	r5,r5,-2
 410f70c:	4551883a 	add	r8,r8,r21
 410f710:	003fa306 	br	410f5a0 <__umoddi3+0x394>
 410f714:	15ff8b2e 	bgeu	r2,r23,410f544 <__umoddi3+0x338>
 410f718:	31bfff84 	addi	r6,r6,-2
 410f71c:	1545883a 	add	r2,r2,r21
 410f720:	003f8906 	br	410f548 <__umoddi3+0x33c>
 410f724:	24c9883a 	add	r4,r4,r19
 410f728:	003eee06 	br	410f2e4 <__umoddi3+0xd8>
 410f72c:	8005883a 	mov	r2,r16
 410f730:	003f1706 	br	410f390 <__umoddi3+0x184>
 410f734:	817fe736 	bltu	r16,r5,410f6d4 <__umoddi3+0x4c8>
 410f738:	280f883a 	mov	r7,r5
 410f73c:	0009883a 	mov	r4,zero
 410f740:	003fb106 	br	410f608 <__umoddi3+0x3fc>

0410f744 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 410f744:	defffd04 	addi	sp,sp,-12
 410f748:	df000215 	stw	fp,8(sp)
 410f74c:	df000204 	addi	fp,sp,8
 410f750:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 410f754:	d0272345 	stb	zero,-25459(gp)
 410f758:	e0bfff17 	ldw	r2,-4(fp)
 410f75c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 410f760:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 410f764:	10000226 	beq	r2,zero,410f770 <_exit+0x2c>
    ALT_SIM_FAIL();
 410f768:	002af070 	cmpltui	zero,zero,43969
 410f76c:	00000106 	br	410f774 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 410f770:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 410f774:	003fff06 	br	410f774 <_exit+0x30>
