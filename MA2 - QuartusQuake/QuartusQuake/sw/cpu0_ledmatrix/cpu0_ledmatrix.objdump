
cpu0_ledmatrix.elf:     file format elf32-littlenios2
cpu0_ledmatrix.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000188

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000017b4 memsz 0x000017b4 flags r-x
    LOAD off    0x000027d4 vaddr 0x040017d4 paddr 0x04001868 align 2**12
         filesz 0x00000094 memsz 0x00000094 flags rw-
    LOAD off    0x000028fc vaddr 0x040018fc paddr 0x040018fc align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000168  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001624  04000188  04000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000028  040017ac  040017ac  000027ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000094  040017d4  04001868  000027d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  040018fc  040018fc  000028fc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  04001a20  04001a20  00002868  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08040000  08040000  00002868  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000408  00000000  00000000  00002890  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000048a0  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f21  00000000  00000000  00007538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001d03  00000000  00000000  00009459  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000007ec  00000000  00000000  0000b15c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001799  00000000  00000000  0000b948  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000022fe  00000000  00000000  0000d0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0000f3e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002d8  00000000  00000000  0000f440  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001117a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0001117d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00011189  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001118a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0001118b  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00011196  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000111a1  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  000111ac  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000022  00000000  00000000  000111b8  2**0
                  CONTENTS, READONLY
 27 .jdi          0000a156  00000000  00000000  000111da  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000a1969  00000000  00000000  0001b330  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000188 l    d  .text	00000000 .text
040017ac l    d  .rodata	00000000 .rodata
040017d4 l    d  .rwdata	00000000 .rwdata
040018fc l    d  .bss	00000000 .bss
04001a20 l    d  .sdram_controller_0	00000000 .sdram_controller_0
08040000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/vm/Documents/QuartusQuake/sw/cpu0_ledmatrix_bsp//obj/HAL/src/crt0.o
040001d0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.cpp
040001d4 l     F .text	000000b4 _ZL14display_statusR10LedControlPh
04000288 l     F .text	000000e4 _ZL11refresh_isrPv
0400182c l     O .rwdata	00000008 _ZL3sad
0400183c l     O .rwdata	00000008 _ZL5happy
04001834 l     O .rwdata	00000008 _ZL7neutral
00000000 l    df *ABS*	00000000 led_control.cpp
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
040017e4 l     O .rwdata	00000048 mailbox_simple_0
040017d4 l     O .rwdata	00000010 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
04000c00 l     F .text	00000054 altera_avalon_mailbox_simple_rx_isr
04000c54 l     F .text	00000098 altera_avalon_mailbox_simple_tx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0400120c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
04001910 g     O .bss	00000004 alt_instruction_exception_handler
04000f60 g     F .text	000000f8 altera_avalon_mailbox_send
04000b64 g     F .text	0000002c alt_main
04000720 g     F .text	000000f4 _ZN10LedControlC1Eiiii
04001920 g     O .bss	00000100 alt_irq
04001868 g       *ABS*	00000000 __flash_rwdata_start
040018fc g     O .bss	00000004 mutti
04000930 g     F .text	00000038 _ZN10LedControl9setColumnEiih
0400118c g     F .text	00000028 altera_avalon_mutex_trylock
0400156c g     F .text	00000008 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000001c __reset
040011d4 g     F .text	00000028 altera_avalon_mutex_is_mine
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400191c g     O .bss	00000004 errno
04001908 g     O .bss	00000004 alt_argv
0400982c g       *ABS*	00000000 _gp
04001058 g     F .text	000000c0 altera_avalon_mailbox_retrieve_poll
04000b90 g     F .text	00000004 usleep
0400138c g     F .text	00000074 alt_find_dev
04000968 g     F .text	00000028 memcpy
0400140c g     F .text	00000074 alt_exception_cause_generated_bad_addr
04000cec g     F .text	00000088 altera_avalon_mailbox_simple_init
08040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
040016f0 g     F .text	00000064 .hidden __udivsi3
04000f2c g     F .text	00000034 altera_avalon_mailbox_status
04000e90 g     F .text	0000009c altera_avalon_mailbox_close
04001574 g     F .text	00000038 alt_icache_flush
04000474 g     F .text	00000024 _Z12digitalWriteii
04000624 g     F .text	0000002c _ZN10LedControl8shutdownEib
040011fc g     F .text	00000010 altera_avalon_mutex_first_lock
04000814 g     F .text	00000074 _ZN10LedControl6setLedEiiib
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
04001a20 g       *ABS*	00000000 __bss_end
04000a1c g     F .text	00000068 alt_iic_isr_register
040014b4 g     F .text	000000b8 alt_tick
04000a04 g     F .text	00000018 alt_ic_irq_enabled
04001480 g     F .text	00000034 alt_alarm_stop
04001900 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	00000060 alt_irq_handler
04001118 g     F .text	0000004c altera_avalon_mutex_open
04001308 g     F .text	00000018 alt_dcache_flush_all
04001868 g       *ABS*	00000000 __ram_rwdata_end
04001854 g     O .rwdata	00000008 alt_mutex_list
040017d4 g       *ABS*	00000000 __ram_rodata_end
04001848 g     O .rwdata	00000004 jtag_uart_0
04000720 g     F .text	000000f4 _ZN10LedControlC2Eiiii
04001754 g     F .text	00000058 .hidden __umodsi3
04000888 g     F .text	000000a8 _ZN10LedControl6setRowEiih
04001a20 g       *ABS*	00000000 end
0400015c g     F .exceptions	0000002c alt_instruction_exception_entry
04100000 g       *ABS*	00000000 __alt_stack_pointer
04001248 g     F .text	00000048 alt_avalon_timer_sc_init
04000188 g     F .text	0000004c _start
04001918 g     O .bss	00000004 _alt_tick_rate
04000560 g     F .text	000000c4 _ZN10LedControl11spiTransferEihh
04001914 g     O .bss	00000004 _alt_nticks
04000bb4 g     F .text	0000004c alt_sys_init
040011b4 g     F .text	00000020 altera_avalon_mutex_unlock
04000698 g     F .text	00000088 _ZN10LedControl12clearDisplayEi
040017d4 g       *ABS*	00000000 __ram_rwdata_start
040017ac g       *ABS*	00000000 __ram_rodata_start
04001290 g     F .text	00000078 alt_busy_sleep
040015ac g     F .text	00000030 memcmp
04001a20 g       *ABS*	00000000 __alt_stack_base
04001320 g     F .text	0000006c alt_dev_llist_insert
04000650 g     F .text	00000024 _ZN10LedControl12setScanLimitEii
040018fc g       *ABS*	00000000 __bss_start
04000448 g     F .text	0000002c main
04001904 g     O .bss	00000004 alt_envp
04001168 g     F .text	00000024 altera_avalon_mutex_lock
0400185c g     O .rwdata	00000004 alt_errno
040015f8 g     F .text	00000084 .hidden __divsi3
040017ac g       *ABS*	00000000 __flash_rodata_start
04000b94 g     F .text	00000020 alt_irq_init
0400190c g     O .bss	00000004 alt_argc
04000020 g       .exceptions	00000000 alt_irq_entry
04000020 g       *ABS*	00000000 __ram_exceptions_start
04000990 g     F .text	00000004 alt_ic_isr_register
04001868 g       *ABS*	00000000 _edata
04001a20 g       *ABS*	00000000 _end
04000188 g       *ABS*	00000000 __ram_exceptions_end
040009cc g     F .text	00000038 alt_ic_irq_disable
0400184c g     O .rwdata	00000008 alt_mailbox_simple_list
0400167c g     F .text	00000074 .hidden __modsi3
0400036c g     F .text	000000dc _Z4initv
04100000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000d74 g     F .text	0000011c altera_avalon_mailbox_open
0400001c g       .entry	00000000 _exit
04000674 g     F .text	00000024 _ZN10LedControl12setIntensityEii
040015dc g     F .text	0000001c strlen
04001400 g     F .text	0000000c alt_icache_flush_all
04001844 g     O .rwdata	00000004 alt_priority_mask
04000994 g     F .text	00000038 alt_ic_irq_enable
04001164 g     F .text	00000004 altera_avalon_mutex_close
04001860 g     O .rwdata	00000008 alt_alarm_list
04000498 g     F .text	000000c8 _ZN10LedControl8shiftOutEhhhh
04000a84 g     F .text	000000e0 alt_load



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08406214 	ori	at,at,392
    jmp r1
 4000018:	0800683a 	jmp	at

0400001c <_exit>:
 400001c:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	400015c0 	call	400015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defffe04 	addi	sp,sp,-8
 4000100:	dfc00115 	stw	ra,4(sp)
 4000104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400010c:	04010034 	movhi	r16,1024
 4000110:	84064804 	addi	r16,r16,6432

  active = alt_irq_pending ();

  do
  {
    i = 0;
 4000114:	0005883a 	mov	r2,zero
    mask = 1;
 4000118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	20ca703a 	and	r5,r4,r3
 4000120:	28000b26 	beq	r5,zero,4000150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 4000124:	100490fa 	slli	r2,r2,3
 4000128:	8085883a 	add	r2,r16,r2
 400012c:	10c00017 	ldw	r3,0(r2)
 4000130:	11000117 	ldw	r4,4(r2)
 4000134:	183ee83a 	callr	r3
 4000138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 400013c:	203ff51e 	bne	r4,zero,4000114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 4000140:	dfc00117 	ldw	ra,4(sp)
 4000144:	dc000017 	ldw	r16,0(sp)
 4000148:	dec00204 	addi	sp,sp,8
 400014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000150:	18c7883a 	add	r3,r3,r3
      i++;
 4000154:	10800044 	addi	r2,r2,1

    } while (1);
 4000158:	003ff006 	br	400011c <alt_irq_handler+0x20>

0400015c <alt_instruction_exception_entry>:
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 400015c:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 4000160:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000164:	d0e03917 	ldw	r3,-32540(gp)
 4000168:	18000426 	beq	r3,zero,400017c <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 400016c:	10801f0c 	andi	r2,r2,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 4000170:	200b883a 	mov	r5,r4
 4000174:	1008d0ba 	srli	r4,r2,2
 4000178:	1800683a 	jmp	r3
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 400017c:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 4000180:	0005883a 	mov	r2,zero
 4000184:	f800283a 	ret

Disassembly of section .text:

04000188 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000188:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 400018c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000190:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000194:	00bffd16 	blt	zero,r2,400018c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000198:	06c10434 	movhi	sp,1040
    ori sp, sp, %lo(__alt_stack_pointer)
 400019c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40001a0:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 40001a4:	d6a60b14 	ori	gp,gp,38956
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001a8:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 40001ac:	10863f14 	ori	r2,r2,6396

    movhi r3, %hi(__bss_end)
 40001b0:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 40001b4:	18c68814 	ori	r3,r3,6688

    beq r2, r3, 1f
 40001b8:	10c00326 	beq	r2,r3,40001c8 <_start+0x40>

0:
    stw zero, (r2)
 40001bc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001c0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001c4:	10fffd36 	bltu	r2,r3,40001bc <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001c8:	4000a840 	call	4000a84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001cc:	4000b640 	call	4000b64 <alt_main>

040001d0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001d0:	003fff06 	br	40001d0 <alt_after_alt_main>

040001d4 <_ZL14display_statusR10LedControlPh>:
static byte happy[8]   = {0x00,0x00,0x18,0x24,0x00,0x24,0x00,0x00};
static byte neutral[8] = {0x00,0x00,0x00,0x3c,0x00,0x24,0x00,0x00};
static byte sad[8]     = {0x00,0x00,0x24,0x18,0x00,0x24,0x00,0x00};

// Utility function to display game status smiley & score //
static void display_status(LedControl& ledmatrix, byte status[8]) {
 40001d4:	defff804 	addi	sp,sp,-32
 40001d8:	dd800615 	stw	r22,24(sp)
 40001dc:	dd400515 	stw	r21,20(sp)
		switch(i) {
		  case 0:
			ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(PLAYER_SCORE, 0));
			break;
		  case 7:
			ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(COMPUTER_SCORE, 0));
 40001e0:	05820134 	movhi	r22,2052
// Utility function to display game status smiley & score //
static void display_status(LedControl& ledmatrix, byte status[8]) {
	for(int i(0); i < 8 ; i++) {
		switch(i) {
		  case 0:
			ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(PLAYER_SCORE, 0));
 40001e4:	05420134 	movhi	r21,2052
static byte happy[8]   = {0x00,0x00,0x18,0x24,0x00,0x24,0x00,0x00};
static byte neutral[8] = {0x00,0x00,0x00,0x3c,0x00,0x24,0x00,0x00};
static byte sad[8]     = {0x00,0x00,0x24,0x18,0x00,0x24,0x00,0x00};

// Utility function to display game status smiley & score //
static void display_status(LedControl& ledmatrix, byte status[8]) {
 40001e8:	dd000415 	stw	r20,16(sp)
 40001ec:	dcc00315 	stw	r19,12(sp)
 40001f0:	dc800215 	stw	r18,8(sp)
 40001f4:	dc400115 	stw	r17,4(sp)
 40001f8:	dc000015 	stw	r16,0(sp)
 40001fc:	dfc00715 	stw	ra,28(sp)
 4000200:	2025883a 	mov	r18,r4
 4000204:	2823883a 	mov	r17,r5
 4000208:	2d000204 	addi	r20,r5,8
 400020c:	2821883a 	mov	r16,r5
	for(int i(0); i < 8 ; i++) {
		switch(i) {
		  case 0:
			ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(PLAYER_SCORE, 0));
 4000210:	ad400044 	addi	r21,r21,1
static byte sad[8]     = {0x00,0x00,0x24,0x18,0x00,0x24,0x00,0x00};

// Utility function to display game status smiley & score //
static void display_status(LedControl& ledmatrix, byte status[8]) {
	for(int i(0); i < 8 ; i++) {
		switch(i) {
 4000214:	04c001c4 	movi	r19,7
		  case 0:
			ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(PLAYER_SCORE, 0));
			break;
		  case 7:
			ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(COMPUTER_SCORE, 0));
 4000218:	b5800084 	addi	r22,r22,2
 400021c:	844dc83a 	sub	r6,r16,r17
static byte sad[8]     = {0x00,0x00,0x24,0x18,0x00,0x24,0x00,0x00};

// Utility function to display game status smiley & score //
static void display_status(LedControl& ledmatrix, byte status[8]) {
	for(int i(0); i < 8 ; i++) {
		switch(i) {
 4000220:	30000526 	beq	r6,zero,4000238 <_ZL14display_statusR10LedControlPh+0x64>
 4000224:	34c0081e 	bne	r6,r19,4000248 <_ZL14display_statusR10LedControlPh+0x74>
		  case 0:
			ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(PLAYER_SCORE, 0));
			break;
		  case 7:
			ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(COMPUTER_SCORE, 0));
 4000228:	b1c00023 	ldbuio	r7,0(r22)
 400022c:	39c03fcc 	andi	r7,r7,255
 4000230:	980d883a 	mov	r6,r19
 4000234:	00000506 	br	400024c <_ZL14display_statusR10LedControlPh+0x78>
// Utility function to display game status smiley & score //
static void display_status(LedControl& ledmatrix, byte status[8]) {
	for(int i(0); i < 8 ; i++) {
		switch(i) {
		  case 0:
			ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(PLAYER_SCORE, 0));
 4000238:	a9c00023 	ldbuio	r7,0(r21)
 400023c:	000d883a 	mov	r6,zero
 4000240:	39c03fcc 	andi	r7,r7,255
 4000244:	00000106 	br	400024c <_ZL14display_statusR10LedControlPh+0x78>
			break;
		  case 7:
			ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(COMPUTER_SCORE, 0));
			break;
		  default:
			ledmatrix.setRow(0, i, status[i]);
 4000248:	81c00003 	ldbu	r7,0(r16)
 400024c:	000b883a 	mov	r5,zero
 4000250:	9009883a 	mov	r4,r18
 4000254:	84000044 	addi	r16,r16,1
 4000258:	40008880 	call	4000888 <_ZN10LedControl6setRowEiih>
static byte neutral[8] = {0x00,0x00,0x00,0x3c,0x00,0x24,0x00,0x00};
static byte sad[8]     = {0x00,0x00,0x24,0x18,0x00,0x24,0x00,0x00};

// Utility function to display game status smiley & score //
static void display_status(LedControl& ledmatrix, byte status[8]) {
	for(int i(0); i < 8 ; i++) {
 400025c:	853fef1e 	bne	r16,r20,400021c <_ZL14display_statusR10LedControlPh+0x48>
			break;
		  default:
			ledmatrix.setRow(0, i, status[i]);
		}
	}
}
 4000260:	dfc00717 	ldw	ra,28(sp)
 4000264:	dd800617 	ldw	r22,24(sp)
 4000268:	dd400517 	ldw	r21,20(sp)
 400026c:	dd000417 	ldw	r20,16(sp)
 4000270:	dcc00317 	ldw	r19,12(sp)
 4000274:	dc800217 	ldw	r18,8(sp)
 4000278:	dc400117 	ldw	r17,4(sp)
 400027c:	dc000017 	ldw	r16,0(sp)
 4000280:	dec00804 	addi	sp,sp,32
 4000284:	f800283a 	ret

04000288 <_ZL11refresh_isrPv>:
		ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(WORLD_MAP, i));
	}
}

// Led matrix refresh ISR //
static void refresh_isr(void* context) {
 4000288:	defffc04 	addi	sp,sp,-16

	// acknowledge interrupt
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0b10);
 400028c:	00820234 	movhi	r2,2056
		ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(WORLD_MAP, i));
	}
}

// Led matrix refresh ISR //
static void refresh_isr(void* context) {
 4000290:	dfc00315 	stw	ra,12(sp)
 4000294:	dc800215 	stw	r18,8(sp)
 4000298:	dc400115 	stw	r17,4(sp)
 400029c:	dc000015 	stw	r16,0(sp)

	// acknowledge interrupt
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0b10);
 40002a0:	10840004 	addi	r2,r2,4096
 40002a4:	00c00084 	movi	r3,2
 40002a8:	10c00035 	stwio	r3,0(r2)

	altera_avalon_mutex_lock(mutti, 1);
 40002ac:	d1203417 	ldw	r4,-32560(gp)
 40002b0:	01400044 	movi	r5,1
 40002b4:	40011680 	call	4001168 <altera_avalon_mutex_lock>
	switch(IORD_8DIRECT(GAME_STATUS, 0)) {
 40002b8:	00820134 	movhi	r2,2052
 40002bc:	10800023 	ldbuio	r2,0(r2)
 40002c0:	00c01104 	movi	r3,68
 40002c4:	10803fcc 	andi	r2,r2,255
 40002c8:	10c01026 	beq	r2,r3,400030c <_ZL11refresh_isrPv+0x84>
 40002cc:	18800436 	bltu	r3,r2,40002e0 <_ZL11refresh_isrPv+0x58>
 40002d0:	00c010c4 	movi	r3,67
 40002d4:	10c01b1e 	bne	r2,r3,4000344 <_ZL11refresh_isrPv+0xbc>
	  case 'P':
		display_status(*ledmatrix, happy);
		break;
	  case 'C':
		display_status(*ledmatrix, sad);
 40002d8:	d1600004 	addi	r5,gp,-32768
 40002dc:	00000c06 	br	4000310 <_ZL11refresh_isrPv+0x88>

	// acknowledge interrupt
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0b10);

	altera_avalon_mutex_lock(mutti, 1);
	switch(IORD_8DIRECT(GAME_STATUS, 0)) {
 40002e0:	00c01404 	movi	r3,80
 40002e4:	10c00726 	beq	r2,r3,4000304 <_ZL11refresh_isrPv+0x7c>
 40002e8:	00c015c4 	movi	r3,87
 40002ec:	10c0151e 	bne	r2,r3,4000344 <_ZL11refresh_isrPv+0xbc>
}

// Utility function to display game world //
static void display_world(LedControl& ledmatrix) {
	for(int i(0); i < 8 ; i++) {
		ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(WORLD_MAP, i));
 40002f0:	04820134 	movhi	r18,2052

	// acknowledge interrupt
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0b10);

	altera_avalon_mutex_lock(mutti, 1);
	switch(IORD_8DIRECT(GAME_STATUS, 0)) {
 40002f4:	0021883a 	mov	r16,zero
}

// Utility function to display game world //
static void display_world(LedControl& ledmatrix) {
	for(int i(0); i < 8 ; i++) {
		ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(WORLD_MAP, i));
 40002f8:	948000c4 	addi	r18,r18,3
	}
}

// Utility function to display game world //
static void display_world(LedControl& ledmatrix) {
	for(int i(0); i < 8 ; i++) {
 40002fc:	04400204 	movi	r17,8
 4000300:	00000606 	br	400031c <_ZL11refresh_isrPv+0x94>
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0b10);

	altera_avalon_mutex_lock(mutti, 1);
	switch(IORD_8DIRECT(GAME_STATUS, 0)) {
	  case 'P':
		display_status(*ledmatrix, happy);
 4000304:	d1600404 	addi	r5,gp,-32752
 4000308:	00000106 	br	4000310 <_ZL11refresh_isrPv+0x88>
		break;
	  case 'C':
		display_status(*ledmatrix, sad);
		break;
	  case 'D':
		display_status(*ledmatrix, neutral);
 400030c:	d1600204 	addi	r5,gp,-32760
	switch(IORD_8DIRECT(GAME_STATUS, 0)) {
	  case 'P':
		display_status(*ledmatrix, happy);
		break;
	  case 'C':
		display_status(*ledmatrix, sad);
 4000310:	0009883a 	mov	r4,zero
 4000314:	40001d40 	call	40001d4 <_ZL14display_statusR10LedControlPh>
		break;
 4000318:	00000d06 	br	4000350 <_ZL11refresh_isrPv+0xc8>
}

// Utility function to display game world //
static void display_world(LedControl& ledmatrix) {
	for(int i(0); i < 8 ; i++) {
		ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(WORLD_MAP, i));
 400031c:	8485883a 	add	r2,r16,r18
 4000320:	11c00023 	ldbuio	r7,0(r2)
 4000324:	000b883a 	mov	r5,zero
 4000328:	800d883a 	mov	r6,r16
 400032c:	39c03fcc 	andi	r7,r7,255
 4000330:	0009883a 	mov	r4,zero
	}
}

// Utility function to display game world //
static void display_world(LedControl& ledmatrix) {
	for(int i(0); i < 8 ; i++) {
 4000334:	84000044 	addi	r16,r16,1
		ledmatrix.setRow(0, i, (byte)IORD_8DIRECT(WORLD_MAP, i));
 4000338:	40008880 	call	4000888 <_ZN10LedControl6setRowEiih>
	}
}

// Utility function to display game world //
static void display_world(LedControl& ledmatrix) {
	for(int i(0); i < 8 ; i++) {
 400033c:	847ff71e 	bne	r16,r17,400031c <_ZL11refresh_isrPv+0x94>
 4000340:	00000306 	br	4000350 <_ZL11refresh_isrPv+0xc8>
		break;
	  case 'W':
		display_world(*ledmatrix);
		break;
	  default:
		ledmatrix->clearDisplay(0);
 4000344:	000b883a 	mov	r5,zero
 4000348:	0009883a 	mov	r4,zero
 400034c:	40006980 	call	4000698 <_ZN10LedControl12clearDisplayEi>
	}
	altera_avalon_mutex_unlock(mutti);
 4000350:	d1203417 	ldw	r4,-32560(gp)
}
 4000354:	dfc00317 	ldw	ra,12(sp)
 4000358:	dc800217 	ldw	r18,8(sp)
 400035c:	dc400117 	ldw	r17,4(sp)
 4000360:	dc000017 	ldw	r16,0(sp)
 4000364:	dec00404 	addi	sp,sp,16
		display_world(*ledmatrix);
		break;
	  default:
		ledmatrix->clearDisplay(0);
	}
	altera_avalon_mutex_unlock(mutti);
 4000368:	40011b41 	jmpi	40011b4 <altera_avalon_mutex_unlock>

0400036c <_Z4initv>:

//////////////////////////////////////////////////////////////////////////////////////

void init()
{
	mutti = altera_avalon_mutex_open(MUTEX_0_NAME);
 400036c:	01010034 	movhi	r4,1024
}

//////////////////////////////////////////////////////////////////////////////////////

void init()
{
 4000370:	deffe404 	addi	sp,sp,-112
	mutti = altera_avalon_mutex_open(MUTEX_0_NAME);
 4000374:	2105eb04 	addi	r4,r4,6060
}

//////////////////////////////////////////////////////////////////////////////////////

void init()
{
 4000378:	dfc01b15 	stw	ra,108(sp)
 400037c:	dc401a15 	stw	r17,104(sp)
 4000380:	dc001915 	stw	r16,100(sp)
	mutti = altera_avalon_mutex_open(MUTEX_0_NAME);

	*ledmatrix = LedControl(DIN, CLK, CS, 1);
 4000384:	04400084 	movi	r17,2

//////////////////////////////////////////////////////////////////////////////////////

void init()
{
	mutti = altera_avalon_mutex_open(MUTEX_0_NAME);
 4000388:	40011180 	call	4001118 <altera_avalon_mutex_open>

	*ledmatrix = LedControl(DIN, CLK, CS, 1);
 400038c:	04000044 	movi	r16,1
 4000390:	800f883a 	mov	r7,r16
 4000394:	880b883a 	mov	r5,r17
 4000398:	d9000104 	addi	r4,sp,4
 400039c:	dc000015 	stw	r16,0(sp)
 40003a0:	000d883a 	mov	r6,zero

//////////////////////////////////////////////////////////////////////////////////////

void init()
{
	mutti = altera_avalon_mutex_open(MUTEX_0_NAME);
 40003a4:	d0a03415 	stw	r2,-32560(gp)

	*ledmatrix = LedControl(DIN, CLK, CS, 1);
 40003a8:	40007200 	call	4000720 <_ZN10LedControlC1Eiiii>
 40003ac:	d9400104 	addi	r5,sp,4
 40003b0:	01801804 	movi	r6,96
 40003b4:	0009883a 	mov	r4,zero
 40003b8:	40009680 	call	4000968 <memcpy>
  	ledmatrix->shutdown(0, false); // normal operations
 40003bc:	000d883a 	mov	r6,zero
 40003c0:	000b883a 	mov	r5,zero
 40003c4:	0009883a 	mov	r4,zero
 40003c8:	40006240 	call	4000624 <_ZN10LedControl8shutdownEib>
    ledmatrix->setIntensity(0, 1); // adjust the brightness (max. 15)
 40003cc:	800d883a 	mov	r6,r16
 40003d0:	000b883a 	mov	r5,zero
 40003d4:	0009883a 	mov	r4,zero
 40003d8:	40006740 	call	4000674 <_ZN10LedControl12setIntensityEii>
    ledmatrix->clearDisplay(0);
 40003dc:	000b883a 	mov	r5,zero
 40003e0:	0009883a 	mov	r4,zero
 40003e4:	40006980 	call	4000698 <_ZN10LedControl12clearDisplayEi>

	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, refresh_isr, NULL, NULL);
 40003e8:	01810034 	movhi	r6,1024
 40003ec:	d8000015 	stw	zero,0(sp)
 40003f0:	000f883a 	mov	r7,zero
 40003f4:	3180a204 	addi	r6,r6,648
 40003f8:	880b883a 	mov	r5,r17
 40003fc:	0009883a 	mov	r4,zero
 4000400:	40009900 	call	4000990 <alt_ic_isr_register>
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0x4240); // 50Hz -> 20ms: 1M clock ticks
 4000404:	00820234 	movhi	r2,2056
 4000408:	10840204 	addi	r2,r2,4104
 400040c:	00d09004 	movi	r3,16960
 4000410:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x000F);
 4000414:	00820234 	movhi	r2,2056
 4000418:	10840304 	addi	r2,r2,4108
 400041c:	00c003c4 	movi	r3,15
 4000420:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0b0111); // STOP:0, START:1, CONT:1, ITO:1
 4000424:	00820234 	movhi	r2,2056
 4000428:	10840104 	addi	r2,r2,4100
 400042c:	00c001c4 	movi	r3,7
 4000430:	10c00035 	stwio	r3,0(r2)

}
 4000434:	dfc01b17 	ldw	ra,108(sp)
 4000438:	dc401a17 	ldw	r17,104(sp)
 400043c:	dc001917 	ldw	r16,100(sp)
 4000440:	dec01c04 	addi	sp,sp,112
 4000444:	f800283a 	ret

04000448 <main>:
int main() {
 4000448:	defffe04 	addi	sp,sp,-8
 400044c:	dfc00115 	stw	ra,4(sp)

	init();
 4000450:	400036c0 	call	400036c <_Z4initv>
    	altera_avalon_mutex_unlock(mutti);
    	usleep(1000000);
    }

    #else
    volatile int i=0;
 4000454:	d8000015 	stw	zero,0(sp)
//			}
//			char status =IORD_8DIRECT(GAME_STATUS,0);
//			 printf("status : %c \n",status);
//			printf("\n");
//			altera_avalon_mutex_unlock(mutti);
			usleep(1000009);i++;
 4000458:	010003f4 	movhi	r4,15
 400045c:	21109244 	addi	r4,r4,16969
 4000460:	4000b900 	call	4000b90 <usleep>
 4000464:	d8800017 	ldw	r2,0(sp)
 4000468:	10800044 	addi	r2,r2,1
 400046c:	d8800015 	stw	r2,0(sp)
 4000470:	003ff906 	br	4000458 <main+0x10>

04000474 <_Z12digitalWriteii>:
#define OP_SCANLIMIT    11
#define OP_SHUTDOWN     12
#define OP_DISPLAYTEST  15


void digitalWrite(int pin, int val) {
 4000474:	00800044 	movi	r2,1
	if(val) IOWR_8DIRECT(GPIO_0, IREGPORTSET, 1 << pin);
 4000478:	1104983a 	sll	r2,r2,r4
 400047c:	00c20234 	movhi	r3,2056
 4000480:	28000226 	beq	r5,zero,400048c <_Z12digitalWriteii+0x18>
 4000484:	18c418c4 	addi	r3,r3,4195
 4000488:	00000106 	br	4000490 <_Z12digitalWriteii+0x1c>
	else IOWR_8DIRECT(GPIO_0, IREGPORTCLR, 1 << pin);
 400048c:	18c41904 	addi	r3,r3,4196
 4000490:	18800025 	stbio	r2,0(r3)
 4000494:	f800283a 	ret

04000498 <_ZN10LedControl8shiftOutEhhhh>:
        setLed(addr,row,col,val);
    }
}

void LedControl::shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 4000498:	defff604 	addi	sp,sp,-40
 400049c:	dc400115 	stw	r17,4(sp)
#define OP_SHUTDOWN     12
#define OP_DISPLAYTEST  15


void digitalWrite(int pin, int val) {
	if(val) IOWR_8DIRECT(GPIO_0, IREGPORTSET, 1 << pin);
 40004a0:	31803fcc 	andi	r6,r6,255
 40004a4:	04400044 	movi	r17,1
        setLed(addr,row,col,val);
    }
}

void LedControl::shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 40004a8:	ddc00715 	stw	r23,28(sp)
#define OP_SHUTDOWN     12
#define OP_DISPLAYTEST  15


void digitalWrite(int pin, int val) {
	if(val) IOWR_8DIRECT(GPIO_0, IREGPORTSET, 1 << pin);
 40004ac:	89a2983a 	sll	r17,r17,r6
        setLed(addr,row,col,val);
    }
}

void LedControl::shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 40004b0:	ddc00a03 	ldbu	r23,40(sp)
 40004b4:	dd000415 	stw	r20,16(sp)
 40004b8:	dcc00315 	stw	r19,12(sp)
 40004bc:	dc000015 	stw	r16,0(sp)
#define OP_SHUTDOWN     12
#define OP_DISPLAYTEST  15


void digitalWrite(int pin, int val) {
	if(val) IOWR_8DIRECT(GPIO_0, IREGPORTSET, 1 << pin);
 40004c0:	05020234 	movhi	r20,2056
 40004c4:	040001c4 	movi	r16,7
	else IOWR_8DIRECT(GPIO_0, IREGPORTCLR, 1 << pin);
 40004c8:	04c20234 	movhi	r19,2056
        setLed(addr,row,col,val);
    }
}

void LedControl::shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 40004cc:	df000815 	stw	fp,32(sp)
 40004d0:	dd800615 	stw	r22,24(sp)
 40004d4:	dd400515 	stw	r21,20(sp)
 40004d8:	dc800215 	stw	r18,8(sp)
 40004dc:	dfc00915 	stw	ra,36(sp)
 40004e0:	282b883a 	mov	r21,r5
 40004e4:	382d883a 	mov	r22,r7
    uint8_t i;

    for (i = 0; i < 8; i++)  {
        if (bitOrder == LSBFIRST)
            digitalWrite(dataPin, !!(val & (1 << i)) );
 40004e8:	8039883a 	mov	fp,r16
#define OP_SHUTDOWN     12
#define OP_DISPLAYTEST  15


void digitalWrite(int pin, int val) {
	if(val) IOWR_8DIRECT(GPIO_0, IREGPORTSET, 1 << pin);
 40004ec:	a50418c4 	addi	r20,r20,4195
	else IOWR_8DIRECT(GPIO_0, IREGPORTCLR, 1 << pin);
 40004f0:	9cc41904 	addi	r19,r19,4196

void LedControl::shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    uint8_t i;

    for (i = 0; i < 8; i++)  {
 40004f4:	04bfffc4 	movi	r18,-1
        if (bitOrder == LSBFIRST)
 40004f8:	b0803fcc 	andi	r2,r22,255
 40004fc:	b9403fcc 	andi	r5,r23,255
 4000500:	a9003fcc 	andi	r4,r21,255
 4000504:	1000031e 	bne	r2,zero,4000514 <_ZN10LedControl8shiftOutEhhhh+0x7c>
            digitalWrite(dataPin, !!(val & (1 << i)) );
 4000508:	e405c83a 	sub	r2,fp,r16
 400050c:	288bd83a 	sra	r5,r5,r2
 4000510:	00000106 	br	4000518 <_ZN10LedControl8shiftOutEhhhh+0x80>
        else
            digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 4000514:	2c0bd83a 	sra	r5,r5,r16
 4000518:	2940004c 	andi	r5,r5,1
 400051c:	40004740 	call	4000474 <_Z12digitalWriteii>
#define OP_SHUTDOWN     12
#define OP_DISPLAYTEST  15


void digitalWrite(int pin, int val) {
	if(val) IOWR_8DIRECT(GPIO_0, IREGPORTSET, 1 << pin);
 4000520:	a4400025 	stbio	r17,0(r20)
	else IOWR_8DIRECT(GPIO_0, IREGPORTCLR, 1 << pin);
 4000524:	9c400025 	stbio	r17,0(r19)
 4000528:	843fffc4 	addi	r16,r16,-1

void LedControl::shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    uint8_t i;

    for (i = 0; i < 8; i++)  {
 400052c:	84bff21e 	bne	r16,r18,40004f8 <_ZN10LedControl8shiftOutEhhhh+0x60>
            digitalWrite(dataPin, !!(val & (1 << (7 - i))));

        digitalWrite(clockPin, HIGH);
        digitalWrite(clockPin, LOW);
    }
}
 4000530:	dfc00917 	ldw	ra,36(sp)
 4000534:	df000817 	ldw	fp,32(sp)
 4000538:	ddc00717 	ldw	r23,28(sp)
 400053c:	dd800617 	ldw	r22,24(sp)
 4000540:	dd400517 	ldw	r21,20(sp)
 4000544:	dd000417 	ldw	r20,16(sp)
 4000548:	dcc00317 	ldw	r19,12(sp)
 400054c:	dc800217 	ldw	r18,8(sp)
 4000550:	dc400117 	ldw	r17,4(sp)
 4000554:	dc000017 	ldw	r16,0(sp)
 4000558:	dec00a04 	addi	sp,sp,40
 400055c:	f800283a 	ret

04000560 <_ZN10LedControl11spiTransferEihh>:

void LedControl::spiTransfer(int addr, volatile byte opcode, volatile byte data) {
 4000560:	defffa04 	addi	sp,sp,-24
 4000564:	dc400415 	stw	r17,16(sp)
	//Create an array with the data to shift out
    int offset=addr*2;
    int maxbytes=maxDevices*2;
 4000568:	24401717 	ldw	r17,92(r4)
        digitalWrite(clockPin, HIGH);
        digitalWrite(clockPin, LOW);
    }
}

void LedControl::spiTransfer(int addr, volatile byte opcode, volatile byte data) {
 400056c:	d9800105 	stb	r6,4(sp)
 4000570:	dc000315 	stw	r16,12(sp)
 4000574:	dfc00515 	stw	ra,20(sp)
 4000578:	2021883a 	mov	r16,r4
 400057c:	d9c00205 	stb	r7,8(sp)
	//Create an array with the data to shift out
    int offset=addr*2;
 4000580:	294b883a 	add	r5,r5,r5
    int maxbytes=maxDevices*2;
 4000584:	8c63883a 	add	r17,r17,r17
 4000588:	2005883a 	mov	r2,r4

    for(int i=0;i<maxbytes;i++)
 400058c:	1407c83a 	sub	r3,r2,r16
 4000590:	1c40030e 	bge	r3,r17,40005a0 <_ZN10LedControl11spiTransferEihh+0x40>
        spidata[i]=(byte)0;
 4000594:	10000005 	stb	zero,0(r2)
 4000598:	10800044 	addi	r2,r2,1
void LedControl::spiTransfer(int addr, volatile byte opcode, volatile byte data) {
	//Create an array with the data to shift out
    int offset=addr*2;
    int maxbytes=maxDevices*2;

    for(int i=0;i<maxbytes;i++)
 400059c:	003ffb06 	br	400058c <_ZN10LedControl11spiTransferEihh+0x2c>
        spidata[i]=(byte)0;
    //put our device data into the array
    spidata[offset+1]=opcode;
 40005a0:	d8800103 	ldbu	r2,4(sp)
 40005a4:	814b883a 	add	r5,r16,r5
 40005a8:	28800045 	stb	r2,1(r5)
    spidata[offset]=data;
 40005ac:	d8800203 	ldbu	r2,8(sp)
 40005b0:	28800005 	stb	r2,0(r5)
#define OP_DISPLAYTEST  15


void digitalWrite(int pin, int val) {
	if(val) IOWR_8DIRECT(GPIO_0, IREGPORTSET, 1 << pin);
	else IOWR_8DIRECT(GPIO_0, IREGPORTCLR, 1 << pin);
 40005b4:	80c01617 	ldw	r3,88(r16)
 40005b8:	00800044 	movi	r2,1
 40005bc:	10c4983a 	sll	r2,r2,r3
 40005c0:	00c20234 	movhi	r3,2056
 40005c4:	18c41904 	addi	r3,r3,4196
 40005c8:	18800025 	stbio	r2,0(r3)

    //enable the line
    digitalWrite(SPI_CS,LOW);

    //Now shift out the data
    for(int i=maxbytes;i>0;i--)
 40005cc:	04400a0e 	bge	zero,r17,40005f8 <_ZN10LedControl11spiTransferEihh+0x98>
        shiftOut(SPI_MOSI, SPI_CLK, MSBFIRST, spidata[i-1]);
 40005d0:	8c7fffc4 	addi	r17,r17,-1
 40005d4:	8445883a 	add	r2,r16,r17
 40005d8:	10800003 	ldbu	r2,0(r2)
 40005dc:	81801503 	ldbu	r6,84(r16)
 40005e0:	81401403 	ldbu	r5,80(r16)
 40005e4:	d8800015 	stw	r2,0(sp)
 40005e8:	01c00044 	movi	r7,1
 40005ec:	8009883a 	mov	r4,r16
 40005f0:	40004980 	call	4000498 <_ZN10LedControl8shiftOutEhhhh>

    //enable the line
    digitalWrite(SPI_CS,LOW);

    //Now shift out the data
    for(int i=maxbytes;i>0;i--)
 40005f4:	003ff506 	br	40005cc <_ZN10LedControl11spiTransferEihh+0x6c>
#define OP_SHUTDOWN     12
#define OP_DISPLAYTEST  15


void digitalWrite(int pin, int val) {
	if(val) IOWR_8DIRECT(GPIO_0, IREGPORTSET, 1 << pin);
 40005f8:	80c01617 	ldw	r3,88(r16)
 40005fc:	00800044 	movi	r2,1
 4000600:	10c4983a 	sll	r2,r2,r3
 4000604:	00c20234 	movhi	r3,2056
 4000608:	18c418c4 	addi	r3,r3,4195
 400060c:	18800025 	stbio	r2,0(r3)
    for(int i=maxbytes;i>0;i--)
        shiftOut(SPI_MOSI, SPI_CLK, MSBFIRST, spidata[i-1]);

    //latch the data onto the display
    digitalWrite(SPI_CS, HIGH);
}
 4000610:	dfc00517 	ldw	ra,20(sp)
 4000614:	dc400417 	ldw	r17,16(sp)
 4000618:	dc000317 	ldw	r16,12(sp)
 400061c:	dec00604 	addi	sp,sp,24
 4000620:	f800283a 	ret

04000624 <_ZN10LedControl8shutdownEib>:
        shutdown(i,true);
    }
}

void LedControl::shutdown(int addr, bool b) {
    if(addr<0 || addr>=maxDevices)
 4000624:	28000916 	blt	r5,zero,400064c <_ZN10LedControl8shutdownEib+0x28>
 4000628:	20c01717 	ldw	r3,92(r4)
 400062c:	28c0070e 	bge	r5,r3,400064c <_ZN10LedControl8shutdownEib+0x28>
        return;
    if(b)
 4000630:	31803fcc 	andi	r6,r6,255
 4000634:	30000226 	beq	r6,zero,4000640 <_ZN10LedControl8shutdownEib+0x1c>
        spiTransfer(addr, OP_SHUTDOWN,0);
 4000638:	000f883a 	mov	r7,zero
 400063c:	00000106 	br	4000644 <_ZN10LedControl8shutdownEib+0x20>
    else
        spiTransfer(addr, OP_SHUTDOWN,1);
 4000640:	01c00044 	movi	r7,1
 4000644:	01800304 	movi	r6,12
 4000648:	40005601 	jmpi	4000560 <_ZN10LedControl11spiTransferEihh>
 400064c:	f800283a 	ret

04000650 <_ZN10LedControl12setScanLimitEii>:
}

void LedControl::setScanLimit(int addr, int limit) {
    if(addr<0 || addr>=maxDevices)
 4000650:	28000716 	blt	r5,zero,4000670 <_ZN10LedControl12setScanLimitEii+0x20>
 4000654:	20c01717 	ldw	r3,92(r4)
 4000658:	28c0050e 	bge	r5,r3,4000670 <_ZN10LedControl12setScanLimitEii+0x20>
        return;
    if(limit>=0 && limit<8)
 400065c:	008001c4 	movi	r2,7
 4000660:	11800336 	bltu	r2,r6,4000670 <_ZN10LedControl12setScanLimitEii+0x20>
        spiTransfer(addr, OP_SCANLIMIT,limit);
 4000664:	300f883a 	mov	r7,r6
 4000668:	018002c4 	movi	r6,11
 400066c:	40005601 	jmpi	4000560 <_ZN10LedControl11spiTransferEihh>
 4000670:	f800283a 	ret

04000674 <_ZN10LedControl12setIntensityEii>:
}

void LedControl::setIntensity(int addr, int intensity) {
    if(addr<0 || addr>=maxDevices)
 4000674:	28000716 	blt	r5,zero,4000694 <_ZN10LedControl12setIntensityEii+0x20>
 4000678:	20c01717 	ldw	r3,92(r4)
 400067c:	28c0050e 	bge	r5,r3,4000694 <_ZN10LedControl12setIntensityEii+0x20>
        return;
    if(intensity>=0 && intensity<16)
 4000680:	008003c4 	movi	r2,15
 4000684:	11800336 	bltu	r2,r6,4000694 <_ZN10LedControl12setIntensityEii+0x20>
        spiTransfer(addr, OP_INTENSITY,intensity);
 4000688:	300f883a 	mov	r7,r6
 400068c:	01800284 	movi	r6,10
 4000690:	40005601 	jmpi	4000560 <_ZN10LedControl11spiTransferEihh>
 4000694:	f800283a 	ret

04000698 <_ZN10LedControl12clearDisplayEi>:
}

void LedControl::clearDisplay(int addr) {
    int offset;

    if(addr<0 || addr>=maxDevices)
 4000698:	28002016 	blt	r5,zero,400071c <_ZN10LedControl12clearDisplayEi+0x84>
 400069c:	20801717 	ldw	r2,92(r4)
 40006a0:	28801e0e 	bge	r5,r2,400071c <_ZN10LedControl12clearDisplayEi+0x84>
        return;
    if(intensity>=0 && intensity<16)
        spiTransfer(addr, OP_INTENSITY,intensity);
}

void LedControl::clearDisplay(int addr) {
 40006a4:	defffa04 	addi	sp,sp,-24
 40006a8:	dc000015 	stw	r16,0(sp)
 40006ac:	282090fa 	slli	r16,r5,3
 40006b0:	dd000415 	stw	r20,16(sp)
 40006b4:	dcc00315 	stw	r19,12(sp)
 40006b8:	84000404 	addi	r16,r16,16
 40006bc:	dc800215 	stw	r18,8(sp)
 40006c0:	dc400115 	stw	r17,4(sp)
 40006c4:	dfc00515 	stw	ra,20(sp)
 40006c8:	2823883a 	mov	r17,r5
 40006cc:	2025883a 	mov	r18,r4
 40006d0:	2421883a 	add	r16,r4,r16
    int offset;

    if(addr<0 || addr>=maxDevices)
        return;
    offset=addr*8;
 40006d4:	04c00044 	movi	r19,1
    for(int i=0;i<8;i++) {
 40006d8:	05000244 	movi	r20,9
        status[offset+i]=0;
 40006dc:	80000005 	stb	zero,0(r16)
        spiTransfer(addr, i+1,status[offset+i]);
 40006e0:	980d883a 	mov	r6,r19
 40006e4:	000f883a 	mov	r7,zero
 40006e8:	880b883a 	mov	r5,r17
 40006ec:	9009883a 	mov	r4,r18
 40006f0:	9cc00044 	addi	r19,r19,1
 40006f4:	40005600 	call	4000560 <_ZN10LedControl11spiTransferEihh>
 40006f8:	84000044 	addi	r16,r16,1
    int offset;

    if(addr<0 || addr>=maxDevices)
        return;
    offset=addr*8;
    for(int i=0;i<8;i++) {
 40006fc:	9d3ff71e 	bne	r19,r20,40006dc <_ZN10LedControl12clearDisplayEi+0x44>
        status[offset+i]=0;
        spiTransfer(addr, i+1,status[offset+i]);
    }
}
 4000700:	dfc00517 	ldw	ra,20(sp)
 4000704:	dd000417 	ldw	r20,16(sp)
 4000708:	dcc00317 	ldw	r19,12(sp)
 400070c:	dc800217 	ldw	r18,8(sp)
 4000710:	dc400117 	ldw	r17,4(sp)
 4000714:	dc000017 	ldw	r16,0(sp)
 4000718:	dec00604 	addi	sp,sp,24
 400071c:	f800283a 	ret

04000720 <_ZN10LedControlC1Eiiii>:
void digitalWrite(int pin, int val) {
	if(val) IOWR_8DIRECT(GPIO_0, IREGPORTSET, 1 << pin);
	else IOWR_8DIRECT(GPIO_0, IREGPORTCLR, 1 << pin);
}

LedControl::LedControl(int dataPin, int clkPin, int csPin, int numDevices) {
 4000720:	defffd04 	addi	sp,sp,-12
 4000724:	d8800317 	ldw	r2,12(sp)
 4000728:	dc000015 	stw	r16,0(sp)
 400072c:	dfc00215 	stw	ra,8(sp)
 4000730:	dc400115 	stw	r17,4(sp)
 4000734:	2021883a 	mov	r16,r4
    SPI_MOSI=dataPin;
 4000738:	21401415 	stw	r5,80(r4)
    SPI_CLK=clkPin;
 400073c:	21801515 	stw	r6,84(r4)
    SPI_CS=csPin;
 4000740:	21c01615 	stw	r7,88(r4)
    if(numDevices<=0 || numDevices>8 )
 4000744:	10ffffc4 	addi	r3,r2,-1
 4000748:	010001c4 	movi	r4,7
 400074c:	20c0012e 	bgeu	r4,r3,4000754 <_ZN10LedControlC1Eiiii+0x34>
        numDevices=8;
 4000750:	00800204 	movi	r2,8
    maxDevices=numDevices;
 4000754:	80801715 	stw	r2,92(r16)
    IOWR_8DIRECT(GPIO_0, IREGDIR, MODE_ALL_OUTPUT);
 4000758:	00820234 	movhi	r2,2056
 400075c:	10841804 	addi	r2,r2,4192
 4000760:	00ffffc4 	movi	r3,-1
 4000764:	10c00025 	stbio	r3,0(r2)
#define OP_SHUTDOWN     12
#define OP_DISPLAYTEST  15


void digitalWrite(int pin, int val) {
	if(val) IOWR_8DIRECT(GPIO_0, IREGPORTSET, 1 << pin);
 4000768:	80c01617 	ldw	r3,88(r16)
 400076c:	00800044 	movi	r2,1
 4000770:	10c4983a 	sll	r2,r2,r3
 4000774:	00c20234 	movhi	r3,2056
 4000778:	18c418c4 	addi	r3,r3,4195
 400077c:	18800025 	stbio	r2,0(r3)
        numDevices=8;
    maxDevices=numDevices;
    IOWR_8DIRECT(GPIO_0, IREGDIR, MODE_ALL_OUTPUT);

    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
 4000780:	81401415 	stw	r5,80(r16)
 4000784:	80800404 	addi	r2,r16,16
 4000788:	80c01404 	addi	r3,r16,80
    for(int i=0;i<64;i++)
        status[i]=0x00;
 400078c:	10000005 	stb	zero,0(r2)
 4000790:	10800044 	addi	r2,r2,1
    maxDevices=numDevices;
    IOWR_8DIRECT(GPIO_0, IREGDIR, MODE_ALL_OUTPUT);

    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
    for(int i=0;i<64;i++)
 4000794:	10fffd1e 	bne	r2,r3,400078c <_ZN10LedControlC1Eiiii+0x6c>
 4000798:	0023883a 	mov	r17,zero
        status[i]=0x00;
    for(int i=0;i<maxDevices;i++) {
 400079c:	80801717 	ldw	r2,92(r16)
 40007a0:	8880170e 	bge	r17,r2,4000800 <_ZN10LedControlC1Eiiii+0xe0>
        spiTransfer(i,OP_DISPLAYTEST,0);
 40007a4:	000f883a 	mov	r7,zero
 40007a8:	880b883a 	mov	r5,r17
 40007ac:	018003c4 	movi	r6,15
 40007b0:	8009883a 	mov	r4,r16
 40007b4:	40005600 	call	4000560 <_ZN10LedControl11spiTransferEihh>
        //scanlimit is set to max on startup
        setScanLimit(i,7);
 40007b8:	880b883a 	mov	r5,r17
 40007bc:	018001c4 	movi	r6,7
 40007c0:	8009883a 	mov	r4,r16
 40007c4:	40006500 	call	4000650 <_ZN10LedControl12setScanLimitEii>
        //decode is done in source
        spiTransfer(i,OP_DECODEMODE,0);
 40007c8:	000f883a 	mov	r7,zero
 40007cc:	01800244 	movi	r6,9
 40007d0:	880b883a 	mov	r5,r17
 40007d4:	8009883a 	mov	r4,r16
 40007d8:	40005600 	call	4000560 <_ZN10LedControl11spiTransferEihh>
        clearDisplay(i);
 40007dc:	880b883a 	mov	r5,r17
 40007e0:	8009883a 	mov	r4,r16
 40007e4:	40006980 	call	4000698 <_ZN10LedControl12clearDisplayEi>
        //we go into shutdown-mode on startup
        shutdown(i,true);
 40007e8:	880b883a 	mov	r5,r17
 40007ec:	01800044 	movi	r6,1
 40007f0:	8009883a 	mov	r4,r16
 40007f4:	40006240 	call	4000624 <_ZN10LedControl8shutdownEib>

    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
    for(int i=0;i<64;i++)
        status[i]=0x00;
    for(int i=0;i<maxDevices;i++) {
 40007f8:	8c400044 	addi	r17,r17,1
 40007fc:	003fe706 	br	400079c <_ZN10LedControlC1Eiiii+0x7c>
        spiTransfer(i,OP_DECODEMODE,0);
        clearDisplay(i);
        //we go into shutdown-mode on startup
        shutdown(i,true);
    }
}
 4000800:	dfc00217 	ldw	ra,8(sp)
 4000804:	dc400117 	ldw	r17,4(sp)
 4000808:	dc000017 	ldw	r16,0(sp)
 400080c:	dec00304 	addi	sp,sp,12
 4000810:	f800283a 	ret

04000814 <_ZN10LedControl6setLedEiiib>:
        status[offset+i]=0;
        spiTransfer(addr, i+1,status[offset+i]);
    }
}

void LedControl::setLed(int addr, int row, int column, bool state) {
 4000814:	da000017 	ldw	r8,0(sp)
    int offset;
    byte val=0x00;

    if(addr<0 || addr>=maxDevices)
 4000818:	28001a16 	blt	r5,zero,4000884 <_ZN10LedControl6setLedEiiib+0x70>
 400081c:	20801717 	ldw	r2,92(r4)
 4000820:	2880180e 	bge	r5,r2,4000884 <_ZN10LedControl6setLedEiiib+0x70>
        return;
    if(row<0 || row>7 || column<0 || column>7)
 4000824:	008001c4 	movi	r2,7
 4000828:	11801636 	bltu	r2,r6,4000884 <_ZN10LedControl6setLedEiiib+0x70>
 400082c:	11c01536 	bltu	r2,r7,4000884 <_ZN10LedControl6setLedEiiib+0x70>
        return;
    offset=addr*8;
 4000830:	280690fa 	slli	r3,r5,3
    val=0b10000000 >> column; // changed this
 4000834:	00802004 	movi	r2,128
 4000838:	11cfd83a 	sra	r7,r2,r7
 400083c:	30c5883a 	add	r2,r6,r3
    if(state)
        status[offset+row]=status[offset+row]|val;
 4000840:	2085883a 	add	r2,r4,r2
        return;
    if(row<0 || row>7 || column<0 || column>7)
        return;
    offset=addr*8;
    val=0b10000000 >> column; // changed this
    if(state)
 4000844:	42003fcc 	andi	r8,r8,255
        status[offset+row]=status[offset+row]|val;
 4000848:	10800404 	addi	r2,r2,16
        return;
    if(row<0 || row>7 || column<0 || column>7)
        return;
    offset=addr*8;
    val=0b10000000 >> column; // changed this
    if(state)
 400084c:	40000326 	beq	r8,zero,400085c <_ZN10LedControl6setLedEiiib+0x48>
        status[offset+row]=status[offset+row]|val;
 4000850:	12000003 	ldbu	r8,0(r2)
 4000854:	3a0eb03a 	or	r7,r7,r8
 4000858:	00000306 	br	4000868 <_ZN10LedControl6setLedEiiib+0x54>
    else {
        val=~val;
        status[offset+row]=status[offset+row]&val;
 400085c:	12000003 	ldbu	r8,0(r2)
 4000860:	01ce303a 	nor	r7,zero,r7
 4000864:	3a0e703a 	and	r7,r7,r8
    }
    spiTransfer(addr, row+1,status[offset+row]);
 4000868:	20c7883a 	add	r3,r4,r3
 400086c:	1987883a 	add	r3,r3,r6
    val=0b10000000 >> column; // changed this
    if(state)
        status[offset+row]=status[offset+row]|val;
    else {
        val=~val;
        status[offset+row]=status[offset+row]&val;
 4000870:	11c00005 	stb	r7,0(r2)
    }
    spiTransfer(addr, row+1,status[offset+row]);
 4000874:	19c00403 	ldbu	r7,16(r3)
 4000878:	31800044 	addi	r6,r6,1
 400087c:	31803fcc 	andi	r6,r6,255
 4000880:	40005601 	jmpi	4000560 <_ZN10LedControl11spiTransferEihh>
 4000884:	f800283a 	ret

04000888 <_ZN10LedControl6setRowEiih>:
}

void LedControl::setRow(int addr, int col, byte value) {
    byte val;

    if(addr<0 || addr>=maxDevices)
 4000888:	28002816 	blt	r5,zero,400092c <_ZN10LedControl6setRowEiih+0xa4>
 400088c:	20801717 	ldw	r2,92(r4)
 4000890:	2880260e 	bge	r5,r2,400092c <_ZN10LedControl6setRowEiih+0xa4>
        return;
    if(col<0 || col>7)
 4000894:	008001c4 	movi	r2,7
 4000898:	11802436 	bltu	r2,r6,400092c <_ZN10LedControl6setRowEiih+0xa4>
    offset=addr*8;
    status[offset+row]=value;
    spiTransfer(addr, row+1,status[offset+row]);
}

void LedControl::setRow(int addr, int col, byte value) {
 400089c:	defff704 	addi	sp,sp,-36
 40008a0:	dd800715 	stw	r22,28(sp)
 40008a4:	dd400615 	stw	r21,24(sp)
 40008a8:	dd000515 	stw	r20,20(sp)
 40008ac:	dcc00415 	stw	r19,16(sp)
 40008b0:	dc800315 	stw	r18,12(sp)
 40008b4:	dc400215 	stw	r17,8(sp)
 40008b8:	dc000115 	stw	r16,4(sp)
 40008bc:	dfc00815 	stw	ra,32(sp)
 40008c0:	3029883a 	mov	r20,r6
 40008c4:	2823883a 	mov	r17,r5
 40008c8:	2027883a 	mov	r19,r4
 40008cc:	0021883a 	mov	r16,zero
    if(addr<0 || addr>=maxDevices)
        return;
    if(col<0 || col>7)
        return;
    for(int row=0;row<8;row++) {
        val=value >> (7-row);
 40008d0:	3c803fcc 	andi	r18,r7,255
 40008d4:	102b883a 	mov	r21,r2

    if(addr<0 || addr>=maxDevices)
        return;
    if(col<0 || col>7)
        return;
    for(int row=0;row<8;row++) {
 40008d8:	05800204 	movi	r22,8
        val=value >> (7-row);
 40008dc:	ac05c83a 	sub	r2,r21,r16
 40008e0:	9085d83a 	sra	r2,r18,r2
        val=val & 0x01;
        setLed(addr,row,col,val);
 40008e4:	800d883a 	mov	r6,r16
 40008e8:	a00f883a 	mov	r7,r20
 40008ec:	1080004c 	andi	r2,r2,1
 40008f0:	d8800015 	stw	r2,0(sp)
 40008f4:	880b883a 	mov	r5,r17
 40008f8:	9809883a 	mov	r4,r19

    if(addr<0 || addr>=maxDevices)
        return;
    if(col<0 || col>7)
        return;
    for(int row=0;row<8;row++) {
 40008fc:	84000044 	addi	r16,r16,1
        val=value >> (7-row);
        val=val & 0x01;
        setLed(addr,row,col,val);
 4000900:	40008140 	call	4000814 <_ZN10LedControl6setLedEiiib>

    if(addr<0 || addr>=maxDevices)
        return;
    if(col<0 || col>7)
        return;
    for(int row=0;row<8;row++) {
 4000904:	85bff51e 	bne	r16,r22,40008dc <_ZN10LedControl6setRowEiih+0x54>
        val=value >> (7-row);
        val=val & 0x01;
        setLed(addr,row,col,val);
    }
}
 4000908:	dfc00817 	ldw	ra,32(sp)
 400090c:	dd800717 	ldw	r22,28(sp)
 4000910:	dd400617 	ldw	r21,24(sp)
 4000914:	dd000517 	ldw	r20,20(sp)
 4000918:	dcc00417 	ldw	r19,16(sp)
 400091c:	dc800317 	ldw	r18,12(sp)
 4000920:	dc400217 	ldw	r17,8(sp)
 4000924:	dc000117 	ldw	r16,4(sp)
 4000928:	dec00904 	addi	sp,sp,36
 400092c:	f800283a 	ret

04000930 <_ZN10LedControl9setColumnEiih>:
    spiTransfer(addr, row+1,status[offset+row]);
}

void LedControl::setColumn(int addr, int row, byte value) {
    int offset;
    if(addr<0 || addr>=maxDevices)
 4000930:	28000c16 	blt	r5,zero,4000964 <_ZN10LedControl9setColumnEiih+0x34>
 4000934:	22001717 	ldw	r8,92(r4)
 4000938:	2a000a0e 	bge	r5,r8,4000964 <_ZN10LedControl9setColumnEiih+0x34>
        return;
    if(row<0 || row>7)
 400093c:	020001c4 	movi	r8,7
 4000940:	41800836 	bltu	r8,r6,4000964 <_ZN10LedControl9setColumnEiih+0x34>
        return;
    offset=addr*8;
    status[offset+row]=value;
 4000944:	280490fa 	slli	r2,r5,3
 4000948:	2085883a 	add	r2,r4,r2
 400094c:	1185883a 	add	r2,r2,r6
    spiTransfer(addr, row+1,status[offset+row]);
 4000950:	31800044 	addi	r6,r6,1
    if(addr<0 || addr>=maxDevices)
        return;
    if(row<0 || row>7)
        return;
    offset=addr*8;
    status[offset+row]=value;
 4000954:	11c00405 	stb	r7,16(r2)
    spiTransfer(addr, row+1,status[offset+row]);
 4000958:	31803fcc 	andi	r6,r6,255
 400095c:	39c03fcc 	andi	r7,r7,255
 4000960:	40005601 	jmpi	4000560 <_ZN10LedControl11spiTransferEihh>
 4000964:	f800283a 	ret

04000968 <memcpy>:
 4000968:	2005883a 	mov	r2,r4
 400096c:	2007883a 	mov	r3,r4
 4000970:	218d883a 	add	r6,r4,r6
 4000974:	19800526 	beq	r3,r6,400098c <memcpy+0x24>
 4000978:	29000003 	ldbu	r4,0(r5)
 400097c:	18c00044 	addi	r3,r3,1
 4000980:	29400044 	addi	r5,r5,1
 4000984:	193fffc5 	stb	r4,-1(r3)
 4000988:	003ffa06 	br	4000974 <memcpy+0xc>
 400098c:	f800283a 	ret

04000990 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4000990:	4000a1c1 	jmpi	4000a1c <alt_iic_isr_register>

04000994 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000994:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000998:	00bfff84 	movi	r2,-2
 400099c:	2084703a 	and	r2,r4,r2
 40009a0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 40009a4:	00c00044 	movi	r3,1
 40009a8:	d0a03517 	ldw	r2,-32556(gp)
 40009ac:	194a983a 	sll	r5,r3,r5
 40009b0:	288ab03a 	or	r5,r5,r2
 40009b4:	d1603515 	stw	r5,-32556(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40009b8:	d0a03517 	ldw	r2,-32556(gp)
 40009bc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40009c0:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 40009c4:	0005883a 	mov	r2,zero
 40009c8:	f800283a 	ret

040009cc <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40009cc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40009d0:	00bfff84 	movi	r2,-2
 40009d4:	2084703a 	and	r2,r4,r2
 40009d8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 40009dc:	00ffff84 	movi	r3,-2
 40009e0:	d0a03517 	ldw	r2,-32556(gp)
 40009e4:	194a183a 	rol	r5,r3,r5
 40009e8:	288a703a 	and	r5,r5,r2
 40009ec:	d1603515 	stw	r5,-32556(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40009f0:	d0a03517 	ldw	r2,-32556(gp)
 40009f4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40009f8:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 40009fc:	0005883a 	mov	r2,zero
 4000a00:	f800283a 	ret

04000a04 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4000a04:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4000a08:	00800044 	movi	r2,1
 4000a0c:	1144983a 	sll	r2,r2,r5
 4000a10:	10c4703a 	and	r2,r2,r3
}
 4000a14:	1004c03a 	cmpne	r2,r2,zero
 4000a18:	f800283a 	ret

04000a1c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4000a1c:	00c007c4 	movi	r3,31
 4000a20:	19401616 	blt	r3,r5,4000a7c <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4000a24:	defffe04 	addi	sp,sp,-8
 4000a28:	dfc00115 	stw	ra,4(sp)
 4000a2c:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000a30:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000a34:	00ffff84 	movi	r3,-2
 4000a38:	80c6703a 	and	r3,r16,r3
 4000a3c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 4000a40:	280490fa 	slli	r2,r5,3
 4000a44:	00c10034 	movhi	r3,1024
 4000a48:	18c64804 	addi	r3,r3,6432
 4000a4c:	1885883a 	add	r2,r3,r2
 4000a50:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 4000a54:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4000a58:	30000226 	beq	r6,zero,4000a64 <alt_iic_isr_register+0x48>
 4000a5c:	40009940 	call	4000994 <alt_ic_irq_enable>
 4000a60:	00000106 	br	4000a68 <alt_iic_isr_register+0x4c>
 4000a64:	40009cc0 	call	40009cc <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000a68:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 4000a6c:	dfc00117 	ldw	ra,4(sp)
 4000a70:	dc000017 	ldw	r16,0(sp)
 4000a74:	dec00204 	addi	sp,sp,8
 4000a78:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
 4000a7c:	00bffa84 	movi	r2,-22
 4000a80:	f800283a 	ret

04000a84 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000a84:	deffff04 	addi	sp,sp,-4
 4000a88:	01010034 	movhi	r4,1024
 4000a8c:	01410034 	movhi	r5,1024
 4000a90:	dfc00015 	stw	ra,0(sp)
 4000a94:	2105f504 	addi	r4,r4,6100
 4000a98:	29461a04 	addi	r5,r5,6248

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000a9c:	2140061e 	bne	r4,r5,4000ab8 <alt_load+0x34>
 4000aa0:	01010034 	movhi	r4,1024
 4000aa4:	01410034 	movhi	r5,1024
 4000aa8:	21000804 	addi	r4,r4,32
 4000aac:	29400804 	addi	r5,r5,32
 4000ab0:	2140121e 	bne	r4,r5,4000afc <alt_load+0x78>
 4000ab4:	00000b06 	br	4000ae4 <alt_load+0x60>
 4000ab8:	00c10034 	movhi	r3,1024
 4000abc:	18c61a04 	addi	r3,r3,6248
 4000ac0:	1907c83a 	sub	r3,r3,r4
 4000ac4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000ac8:	10fff526 	beq	r2,r3,4000aa0 <alt_load+0x1c>
    {
      *to++ = *from++;
 4000acc:	114f883a 	add	r7,r2,r5
 4000ad0:	39c00017 	ldw	r7,0(r7)
 4000ad4:	110d883a 	add	r6,r2,r4
 4000ad8:	10800104 	addi	r2,r2,4
 4000adc:	31c00015 	stw	r7,0(r6)
 4000ae0:	003ff906 	br	4000ac8 <alt_load+0x44>
 4000ae4:	01010034 	movhi	r4,1024
 4000ae8:	01410034 	movhi	r5,1024
 4000aec:	2105eb04 	addi	r4,r4,6060
 4000af0:	2945eb04 	addi	r5,r5,6060

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000af4:	2140101e 	bne	r4,r5,4000b38 <alt_load+0xb4>
 4000af8:	00000b06 	br	4000b28 <alt_load+0xa4>
 4000afc:	00c10034 	movhi	r3,1024
 4000b00:	18c06204 	addi	r3,r3,392
 4000b04:	1907c83a 	sub	r3,r3,r4
 4000b08:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000b0c:	10fff526 	beq	r2,r3,4000ae4 <alt_load+0x60>
    {
      *to++ = *from++;
 4000b10:	114f883a 	add	r7,r2,r5
 4000b14:	39c00017 	ldw	r7,0(r7)
 4000b18:	110d883a 	add	r6,r2,r4
 4000b1c:	10800104 	addi	r2,r2,4
 4000b20:	31c00015 	stw	r7,0(r6)
 4000b24:	003ff906 	br	4000b0c <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4000b28:	40013080 	call	4001308 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 4000b2c:	dfc00017 	ldw	ra,0(sp)
 4000b30:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 4000b34:	40014001 	jmpi	4001400 <alt_icache_flush_all>
 4000b38:	00c10034 	movhi	r3,1024
 4000b3c:	18c5f504 	addi	r3,r3,6100
 4000b40:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000b44:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000b48:	18bff726 	beq	r3,r2,4000b28 <alt_load+0xa4>
    {
      *to++ = *from++;
 4000b4c:	114f883a 	add	r7,r2,r5
 4000b50:	39c00017 	ldw	r7,0(r7)
 4000b54:	110d883a 	add	r6,r2,r4
 4000b58:	10800104 	addi	r2,r2,4
 4000b5c:	31c00015 	stw	r7,0(r6)
 4000b60:	003ff906 	br	4000b48 <alt_load+0xc4>

04000b64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000b64:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000b68:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000b6c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000b70:	4000b940 	call	4000b94 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000b74:	4000bb40 	call	4000bb4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4000b78:	d1a03617 	ldw	r6,-32552(gp)
 4000b7c:	d1603717 	ldw	r5,-32548(gp)
 4000b80:	d1203817 	ldw	r4,-32544(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 4000b84:	dfc00017 	ldw	ra,0(sp)
 4000b88:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4000b8c:	40004481 	jmpi	4000448 <main>

04000b90 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 4000b90:	40012901 	jmpi	4001290 <alt_busy_sleep>

04000b94 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4000b94:	deffff04 	addi	sp,sp,-4
 4000b98:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4000b9c:	400156c0 	call	400156c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4000ba0:	00800044 	movi	r2,1
 4000ba4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4000ba8:	dfc00017 	ldw	ra,0(sp)
 4000bac:	dec00104 	addi	sp,sp,4
 4000bb0:	f800283a 	ret

04000bb4 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4000bb4:	01020234 	movhi	r4,2056
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000bb8:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4000bbc:	01c00504 	movi	r7,20
 4000bc0:	01800084 	movi	r6,2
 4000bc4:	000b883a 	mov	r5,zero
 4000bc8:	21040004 	addi	r4,r4,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000bcc:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4000bd0:	40012480 	call	4001248 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 4000bd4:	01010034 	movhi	r4,1024
 4000bd8:	000d883a 	mov	r6,zero
 4000bdc:	000b883a 	mov	r5,zero
 4000be0:	2105f904 	addi	r4,r4,6116
 4000be4:	4000cec0 	call	4000cec <altera_avalon_mailbox_simple_init>
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  if (!ret_code)
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 4000be8:	01010034 	movhi	r4,1024
 4000bec:	d1600a04 	addi	r5,gp,-32728
 4000bf0:	2105f504 	addi	r4,r4,6100
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
}
 4000bf4:	dfc00017 	ldw	ra,0(sp)
 4000bf8:	dec00104 	addi	sp,sp,4
 4000bfc:	40013201 	jmpi	4001320 <alt_dev_llist_insert>

04000c00 <altera_avalon_mailbox_simple_rx_isr>:
{
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 4000c00:	20800a17 	ldw	r2,40(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 4000c04:	defffc04 	addi	sp,sp,-16
 4000c08:	dfc00315 	stw	ra,12(sp)
 4000c0c:	dc000215 	stw	r16,8(sp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 4000c10:	10c00137 	ldwio	r3,4(r2)
 4000c14:	d8c00115 	stw	r3,4(sp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 4000c18:	10800037 	ldwio	r2,0(r2)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 4000c1c:	20c00e17 	ldw	r3,56(r4)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 4000c20:	d8800015 	stw	r2,0(sp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 4000c24:	18000726 	beq	r3,zero,4000c44 <altera_avalon_mailbox_simple_rx_isr+0x44>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000c28:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000c2c:	00bfff84 	movi	r2,-2
 4000c30:	8084703a 	and	r2,r16,r2
 4000c34:	1001703a 	wrctl	status,r2
    {
        cpu_sr = alt_irq_disable_all();
        (dev->rx_cb)(inbox);
 4000c38:	d809883a 	mov	r4,sp
 4000c3c:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000c40:	8001703a 	wrctl	status,r16
        alt_irq_enable_all(cpu_sr);
    }
}
 4000c44:	dfc00317 	ldw	ra,12(sp)
 4000c48:	dc000217 	ldw	r16,8(sp)
 4000c4c:	dec00404 	addi	sp,sp,16
 4000c50:	f800283a 	ret

04000c54 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 4000c54:	defffd04 	addi	sp,sp,-12
 4000c58:	dc000015 	stw	r16,0(sp)
 4000c5c:	2021883a 	mov	r16,r4
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4000c60:	80800a17 	ldw	r2,40(r16)
{
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
    int status = 0;
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 4000c64:	21001017 	ldw	r4,64(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 4000c68:	dfc00215 	stw	ra,8(sp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4000c6c:	10800304 	addi	r2,r2,12
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 4000c70:	dc400115 	stw	r17,4(sp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4000c74:	11400037 	ldwio	r5,0(r2)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4000c78:	00ffff44 	movi	r3,-3
 4000c7c:	28c6703a 	and	r3,r5,r3
 4000c80:	10c00035 	stwio	r3,0(r2)

    if (message != NULL)
 4000c84:	20001426 	beq	r4,zero,4000cd8 <altera_avalon_mailbox_simple_tx_isr+0x84>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 4000c88:	80800a17 	ldw	r2,40(r16)
 4000c8c:	20c00117 	ldw	r3,4(r4)
 4000c90:	10c00135 	stwio	r3,4(r2)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 4000c94:	80800a17 	ldw	r2,40(r16)
 4000c98:	20c00017 	ldw	r3,0(r4)
 4000c9c:	10c00035 	stwio	r3,0(r2)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4000ca0:	80800a17 	ldw	r2,40(r16)
 4000ca4:	11400237 	ldwio	r5,8(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 4000ca8:	80c00d17 	ldw	r3,52(r16)
 4000cac:	18000826 	beq	r3,zero,4000cd0 <altera_avalon_mailbox_simple_tx_isr+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4000cb0:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000cb4:	00bfff84 	movi	r2,-2
 4000cb8:	8884703a 	and	r2,r17,r2
 4000cbc:	1001703a 	wrctl	status,r2
        {
            cpu_sr = alt_irq_disable_all();
  	        (dev->tx_cb)(message, status);
 4000cc0:	2940008c 	andi	r5,r5,2
 4000cc4:	280ad07a 	srli	r5,r5,1
 4000cc8:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4000ccc:	8801703a 	wrctl	status,r17
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 4000cd0:	80001015 	stw	zero,64(r16)
        dev->lock = 0;
 4000cd4:	80001105 	stb	zero,68(r16)
    }
}
 4000cd8:	dfc00217 	ldw	ra,8(sp)
 4000cdc:	dc400117 	ldw	r17,4(sp)
 4000ce0:	dc000017 	ldw	r16,0(sp)
 4000ce4:	dec00304 	addi	sp,sp,12
 4000ce8:	f800283a 	ret

04000cec <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 4000cec:	defffc04 	addi	sp,sp,-16
 4000cf0:	dc400115 	stw	r17,4(sp)
 4000cf4:	2823883a 	mov	r17,r5
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 4000cf8:	d1600804 	addi	r5,gp,-32736
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 4000cfc:	dc800215 	stw	r18,8(sp)
 4000d00:	dc000015 	stw	r16,0(sp)
 4000d04:	3025883a 	mov	r18,r6
 4000d08:	2021883a 	mov	r16,r4
 4000d0c:	dfc00315 	stw	ra,12(sp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 4000d10:	40013200 	call	4001320 <alt_dev_llist_insert>
static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 4000d14:	80800a17 	ldw	r2,40(r16)
 4000d18:	00ce84b4 	movhi	r3,14866
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
    
    dev->mailbox_irq    = irq;
 4000d1c:	84800b15 	stw	r18,44(r16)
    dev->mailbox_intr_ctrl_id = intr_id;
 4000d20:	84400c15 	stw	r17,48(r16)
    dev->rx_cb = NULL;
 4000d24:	80000e15 	stw	zero,56(r16)
    dev->tx_cb = NULL;
 4000d28:	80000d15 	stw	zero,52(r16)
    dev->mbox_msg = NULL;
 4000d2c:	80001015 	stw	zero,64(r16)
static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 4000d30:	18ec1144 	addi	r3,r3,-20411
 4000d34:	10c00135 	stwio	r3,4(r2)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 4000d38:	80800a17 	ldw	r2,40(r16)
 4000d3c:	10800104 	addi	r2,r2,4
 4000d40:	11000037 	ldwio	r4,0(r2)
 4000d44:	20c0031e 	bne	r4,r3,4000d54 <altera_avalon_mailbox_simple_init+0x68>
    {
        dev-> mbox_type = MBOX_TX;
 4000d48:	80000f15 	stw	zero,60(r16)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 4000d4c:	10000035 	stwio	zero,0(r2)
 4000d50:	00000206 	br	4000d5c <altera_avalon_mailbox_simple_init+0x70>
    } else
    {
	    dev->mbox_type = MBOX_RX;
 4000d54:	00800044 	movi	r2,1
 4000d58:	80800f15 	stw	r2,60(r16)
    dev->mbox_msg = NULL;
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
}
 4000d5c:	dfc00317 	ldw	ra,12(sp)
 4000d60:	dc800217 	ldw	r18,8(sp)
 4000d64:	dc400117 	ldw	r17,4(sp)
 4000d68:	dc000017 	ldw	r16,0(sp)
 4000d6c:	dec00404 	addi	sp,sp,16
 4000d70:	f800283a 	ret

04000d74 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 4000d74:	defffb04 	addi	sp,sp,-20
 4000d78:	dc800315 	stw	r18,12(sp)
 4000d7c:	2825883a 	mov	r18,r5
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 4000d80:	d1600804 	addi	r5,gp,-32736
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 4000d84:	dc400215 	stw	r17,8(sp)
 4000d88:	dfc00415 	stw	ra,16(sp)
 4000d8c:	dc000115 	stw	r16,4(sp)
 4000d90:	3023883a 	mov	r17,r6
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 4000d94:	400138c0 	call	400138c <alt_find_dev>
    if (dev == NULL)
 4000d98:	1000021e 	bne	r2,zero,4000da4 <altera_avalon_mailbox_open+0x30>
    {
        return NULL;
 4000d9c:	0005883a 	mov	r2,zero
 4000da0:	00003506 	br	4000e78 <altera_avalon_mailbox_open+0x104>
 4000da4:	1021883a 	mov	r16,r2
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 4000da8:	10800a17 	ldw	r2,40(r2)
 4000dac:	10800304 	addi	r2,r2,12
 4000db0:	11000037 	ldwio	r4,0(r2)
    if (dev->mbox_type == MBOX_TX) {
 4000db4:	80c00f17 	ldw	r3,60(r16)
 4000db8:	1800031e 	bne	r3,zero,4000dc8 <altera_avalon_mailbox_open+0x54>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 4000dbc:	00ffff44 	movi	r3,-3
 4000dc0:	20c6703a 	and	r3,r4,r3
 4000dc4:	10c00035 	stwio	r3,0(r2)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 4000dc8:	80c00f17 	ldw	r3,60(r16)
 4000dcc:	00800044 	movi	r2,1
 4000dd0:	1880041e 	bne	r3,r2,4000de4 <altera_avalon_mailbox_open+0x70>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 4000dd4:	80c00a17 	ldw	r3,40(r16)
 4000dd8:	00bfff84 	movi	r2,-2
 4000ddc:	2084703a 	and	r2,r4,r2
 4000de0:	18800335 	stwio	r2,12(r3)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 4000de4:	81400b17 	ldw	r5,44(r16)
 4000de8:	00bfffc4 	movi	r2,-1
 4000dec:	28802126 	beq	r5,r2,4000e74 <altera_avalon_mailbox_open+0x100>
        return dev;

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 4000df0:	9000011e 	bne	r18,zero,4000df8 <altera_avalon_mailbox_open+0x84>
 4000df4:	88001f26 	beq	r17,zero,4000e74 <altera_avalon_mailbox_open+0x100>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 4000df8:	80800f17 	ldw	r2,60(r16)
 4000dfc:	1000021e 	bne	r2,zero,4000e08 <altera_avalon_mailbox_open+0x94>
 4000e00:	88000426 	beq	r17,zero,4000e14 <altera_avalon_mailbox_open+0xa0>
 4000e04:	003fe506 	br	4000d9c <altera_avalon_mailbox_open+0x28>
 4000e08:	00c00044 	movi	r3,1
 4000e0c:	10c0011e 	bne	r2,r3,4000e14 <altera_avalon_mailbox_open+0xa0>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 4000e10:	903fe21e 	bne	r18,zero,4000d9c <altera_avalon_mailbox_open+0x28>
        return NULL;

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 4000e14:	84800d15 	stw	r18,52(r16)
    dev->rx_cb  = rx_callback;
 4000e18:	84400e15 	stw	r17,56(r16)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 4000e1c:	1000061e 	bne	r2,zero,4000e38 <altera_avalon_mailbox_open+0xc4>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 4000e20:	81000c17 	ldw	r4,48(r16)
 4000e24:	01810034 	movhi	r6,1024
 4000e28:	d8000015 	stw	zero,0(sp)
 4000e2c:	800f883a 	mov	r7,r16
 4000e30:	31831504 	addi	r6,r6,3156
 4000e34:	40009900 	call	4000990 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 4000e38:	80c00f17 	ldw	r3,60(r16)
 4000e3c:	00800044 	movi	r2,1
 4000e40:	18800c1e 	bne	r3,r2,4000e74 <altera_avalon_mailbox_open+0x100>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 4000e44:	81400b17 	ldw	r5,44(r16)
 4000e48:	81000c17 	ldw	r4,48(r16)
 4000e4c:	01810034 	movhi	r6,1024
 4000e50:	d8000015 	stw	zero,0(sp)
 4000e54:	800f883a 	mov	r7,r16
 4000e58:	31830004 	addi	r6,r6,3072
 4000e5c:	40009900 	call	4000990 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 4000e60:	80800a17 	ldw	r2,40(r16)
 4000e64:	10800304 	addi	r2,r2,12
 4000e68:	10c00037 	ldwio	r3,0(r2)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4000e6c:	18c00054 	ori	r3,r3,1
 4000e70:	10c00035 	stwio	r3,0(r2)
 4000e74:	8005883a 	mov	r2,r16
    }
    return dev;
}
 4000e78:	dfc00417 	ldw	ra,16(sp)
 4000e7c:	dc800317 	ldw	r18,12(sp)
 4000e80:	dc400217 	ldw	r17,8(sp)
 4000e84:	dc000117 	ldw	r16,4(sp)
 4000e88:	dec00504 	addi	sp,sp,20
 4000e8c:	f800283a 	ret

04000e90 <altera_avalon_mailbox_close>:
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 4000e90:	20002526 	beq	r4,zero,4000f28 <altera_avalon_mailbox_close+0x98>
 4000e94:	20c00b17 	ldw	r3,44(r4)
 4000e98:	00bfffc4 	movi	r2,-1
 4000e9c:	18802226 	beq	r3,r2,4000f28 <altera_avalon_mailbox_close+0x98>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 4000ea0:	20800f17 	ldw	r2,60(r4)
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 4000ea4:	defffd04 	addi	sp,sp,-12
 4000ea8:	dfc00215 	stw	ra,8(sp)
 4000eac:	dc000115 	stw	r16,4(sp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 4000eb0:	1000061e 	bne	r2,zero,4000ecc <altera_avalon_mailbox_close+0x3c>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4000eb4:	20800a17 	ldw	r2,40(r4)
 4000eb8:	10800304 	addi	r2,r2,12
 4000ebc:	11400037 	ldwio	r5,0(r2)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4000ec0:	00ffff44 	movi	r3,-3
 4000ec4:	28c6703a 	and	r3,r5,r3
 4000ec8:	10c00035 	stwio	r3,0(r2)
        }
        if (dev->mbox_type == MBOX_RX)
 4000ecc:	20c00f17 	ldw	r3,60(r4)
 4000ed0:	00800044 	movi	r2,1
 4000ed4:	1880061e 	bne	r3,r2,4000ef0 <altera_avalon_mailbox_close+0x60>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4000ed8:	20800a17 	ldw	r2,40(r4)
 4000edc:	10800304 	addi	r2,r2,12
 4000ee0:	11400037 	ldwio	r5,0(r2)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4000ee4:	00ffff84 	movi	r3,-2
 4000ee8:	28c6703a 	and	r3,r5,r3
 4000eec:	10c00035 	stwio	r3,0(r2)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 4000ef0:	21400b17 	ldw	r5,44(r4)
 4000ef4:	00bfffc4 	movi	r2,-1
 4000ef8:	2021883a 	mov	r16,r4
 4000efc:	28800526 	beq	r5,r2,4000f14 <altera_avalon_mailbox_close+0x84>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 4000f00:	d8000015 	stw	zero,0(sp)
 4000f04:	200f883a 	mov	r7,r4
 4000f08:	21000c17 	ldw	r4,48(r4)
 4000f0c:	000d883a 	mov	r6,zero
 4000f10:	40009900 	call	4000990 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 4000f14:	80000d15 	stw	zero,52(r16)
        dev->rx_cb  = NULL;
 4000f18:	80000e15 	stw	zero,56(r16)
    }
}
 4000f1c:	dfc00217 	ldw	ra,8(sp)
 4000f20:	dc000117 	ldw	r16,4(sp)
 4000f24:	dec00304 	addi	sp,sp,12
 4000f28:	f800283a 	ret

04000f2c <altera_avalon_mailbox_status>:

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 4000f2c:	20800a17 	ldw	r2,40(r4)
 4000f30:	10800237 	ldwio	r2,8(r2)

    if (dev->mbox_type == MBOX_TX)
 4000f34:	20c00f17 	ldw	r3,60(r4)
 4000f38:	1800031e 	bne	r3,zero,4000f48 <altera_avalon_mailbox_status+0x1c>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 4000f3c:	1080008c 	andi	r2,r2,2
 4000f40:	1004d07a 	srli	r2,r2,1
 4000f44:	f800283a 	ret

    if (dev->mbox_type == MBOX_RX)
 4000f48:	01000044 	movi	r4,1
 4000f4c:	19000226 	beq	r3,r4,4000f58 <altera_avalon_mailbox_status+0x2c>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 4000f50:	108000cc 	andi	r2,r2,3
 4000f54:	f800283a 	ret

    if (dev->mbox_type == MBOX_TX)
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;

    if (dev->mbox_type == MBOX_RX)
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 4000f58:	1080004c 	andi	r2,r2,1

    return mailbox_sts;
}
 4000f5c:	f800283a 	ret

04000f60 <altera_avalon_mailbox_send>:
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4000f60:	20801103 	ldbu	r2,68(r4)
 4000f64:	10003a1e 	bne	r2,zero,4001050 <altera_avalon_mailbox_send+0xf0>
 4000f68:	20c00a17 	ldw	r3,40(r4)
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 4000f6c:	defffc04 	addi	sp,sp,-16
 4000f70:	dc000015 	stw	r16,0(sp)
 4000f74:	2021883a 	mov	r16,r4
 4000f78:	dfc00315 	stw	ra,12(sp)
 4000f7c:	dc800215 	stw	r18,8(sp)
 4000f80:	dc400115 	stw	r17,4(sp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4000f84:	18800237 	ldwio	r2,8(r3)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 4000f88:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4000f8c:	10000226 	beq	r2,zero,4000f98 <altera_avalon_mailbox_send+0x38>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 4000f90:	00bfffc4 	movi	r2,-1
 4000f94:	00002806 	br	4001038 <altera_avalon_mailbox_send+0xd8>
 4000f98:	2825883a 	mov	r18,r5
    }
    else
    {
        dev->mbox_msg = message;
 4000f9c:	81401015 	stw	r5,64(r16)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 4000fa0:	81400b17 	ldw	r5,44(r16)
    	return -1;
    }
    else
    {
        dev->mbox_msg = message;
        dev->lock = 1;
 4000fa4:	01000044 	movi	r4,1
 4000fa8:	81001105 	stb	r4,68(r16)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 4000fac:	013fffc4 	movi	r4,-1
 4000fb0:	3023883a 	mov	r17,r6
 4000fb4:	29000226 	beq	r5,r4,4000fc0 <altera_avalon_mailbox_send+0x60>
 4000fb8:	01000044 	movi	r4,1
 4000fbc:	3900181e 	bne	r7,r4,4001020 <altera_avalon_mailbox_send+0xc0>
    {
        /* Polling mode */
        if (timeout ==0)
 4000fc0:	8800071e 	bne	r17,zero,4000fe0 <altera_avalon_mailbox_send+0x80>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 4000fc4:	8009883a 	mov	r4,r16
 4000fc8:	4000f2c0 	call	4000f2c <altera_avalon_mailbox_status>
            } while (mbox_status);
 4000fcc:	103ffd1e 	bne	r2,zero,4000fc4 <altera_avalon_mailbox_send+0x64>
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
    alt_u32 *mbox_msg = (alt_u32*) message ;

    if (mbox_msg != NULL) {
 4000fd0:	9000091e 	bne	r18,zero,4000ff8 <altera_avalon_mailbox_send+0x98>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
        return 0;
    }
    /* Invalid NULL message received */
    return -EINVAL;
 4000fd4:	00bffa84 	movi	r2,-22
 4000fd8:	00000e06 	br	4001014 <altera_avalon_mailbox_send+0xb4>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
                timeout--;
            } while (mbox_status && (timeout != 0));
 4000fdc:	88001526 	beq	r17,zero,4001034 <altera_avalon_mailbox_send+0xd4>
            } while (mbox_status);
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 4000fe0:	8009883a 	mov	r4,r16
 4000fe4:	4000f2c0 	call	4000f2c <altera_avalon_mailbox_status>
                timeout--;
 4000fe8:	8c7fffc4 	addi	r17,r17,-1
            } while (mbox_status && (timeout != 0));
 4000fec:	103ffb1e 	bne	r2,zero,4000fdc <altera_avalon_mailbox_send+0x7c>
            if (timeout == 0)
 4000ff0:	883ff71e 	bne	r17,zero,4000fd0 <altera_avalon_mailbox_send+0x70>
 4000ff4:	00000f06 	br	4001034 <altera_avalon_mailbox_send+0xd4>
{
    alt_u32 *mbox_msg = (alt_u32*) message ;

    if (mbox_msg != NULL) {
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 4000ff8:	80800a17 	ldw	r2,40(r16)
 4000ffc:	90c00117 	ldw	r3,4(r18)
 4001000:	10c00135 	stwio	r3,4(r2)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 4001004:	80800a17 	ldw	r2,40(r16)
 4001008:	90c00017 	ldw	r3,0(r18)
 400100c:	10c00035 	stwio	r3,0(r2)
        return 0;
 4001010:	0005883a 	mov	r2,zero
                return -ETIME;
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 4001014:	80001015 	stw	zero,64(r16)
        /* Release lock when message posted */
        dev->lock =0;
 4001018:	80001105 	stb	zero,68(r16)
        return status;
 400101c:	00000606 	br	4001038 <altera_avalon_mailbox_send+0xd8>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 4001020:	18c00304 	addi	r3,r3,12
 4001024:	19000037 	ldwio	r4,0(r3)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4001028:	21000094 	ori	r4,r4,2
 400102c:	19000035 	stwio	r4,0(r3)
    }
  return 0;
 4001030:	00000106 	br	4001038 <altera_avalon_mailbox_send+0xd8>
                mbox_status = altera_avalon_mailbox_status(dev);
                timeout--;
            } while (mbox_status && (timeout != 0));
            if (timeout == 0)
            {    /* Timeout occur or fail sending */
                return -ETIME;
 4001034:	00bff084 	movi	r2,-62
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
    }
  return 0;
}
 4001038:	dfc00317 	ldw	ra,12(sp)
 400103c:	dc800217 	ldw	r18,8(sp)
 4001040:	dc400117 	ldw	r17,4(sp)
 4001044:	dc000017 	ldw	r16,0(sp)
 4001048:	dec00404 	addi	sp,sp,16
 400104c:	f800283a 	ret

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 4001050:	00bfffc4 	movi	r2,-1
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
    }
  return 0;
}
 4001054:	f800283a 	ret

04001058 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 4001058:	defffb04 	addi	sp,sp,-20
 400105c:	dc400115 	stw	r17,4(sp)
 4001060:	dfc00415 	stw	ra,16(sp)
 4001064:	dcc00315 	stw	r19,12(sp)
 4001068:	dc800215 	stw	r18,8(sp)
 400106c:	dc000015 	stw	r16,0(sp)
 4001070:	2823883a 	mov	r17,r5
    alt_u32 status = 0;
    alt_u32 data;

    if (dev != NULL && message != NULL)
 4001074:	2000041e 	bne	r4,zero,4001088 <altera_avalon_mailbox_retrieve_poll+0x30>
         */
        if (status)
          return 0;
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 4001078:	88000115 	stw	zero,4(r17)
      message[0] = 0;
 400107c:	88000015 	stw	zero,0(r17)
      return -EINVAL;
 4001080:	00bffa84 	movi	r2,-22
 4001084:	00001d06 	br	40010fc <altera_avalon_mailbox_retrieve_poll+0xa4>
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
    alt_u32 status = 0;
    alt_u32 data;

    if (dev != NULL && message != NULL)
 4001088:	283ffb26 	beq	r5,zero,4001078 <altera_avalon_mailbox_retrieve_poll+0x20>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 400108c:	20800a17 	ldw	r2,40(r4)
 4001090:	2021883a 	mov	r16,r4
 4001094:	3025883a 	mov	r18,r6
 4001098:	10800304 	addi	r2,r2,12
 400109c:	14c00037 	ldwio	r19,0(r2)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 40010a0:	00ffff84 	movi	r3,-2
 40010a4:	98c6703a 	and	r3,r19,r3
 40010a8:	10c00035 	stwio	r3,0(r2)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 40010ac:	3000051e 	bne	r6,zero,40010c4 <altera_avalon_mailbox_retrieve_poll+0x6c>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 40010b0:	8009883a 	mov	r4,r16
 40010b4:	4000f2c0 	call	4000f2c <altera_avalon_mailbox_status>
            } while (status == 0);
 40010b8:	103ffd26 	beq	r2,zero,40010b0 <altera_avalon_mailbox_retrieve_poll+0x58>
 40010bc:	00000506 	br	40010d4 <altera_avalon_mailbox_retrieve_poll+0x7c>
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
                 timeout-- ;
            } while ((status == 0) && timeout);
 40010c0:	90000a26 	beq	r18,zero,40010ec <altera_avalon_mailbox_retrieve_poll+0x94>
            } while (status == 0);
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 40010c4:	8009883a 	mov	r4,r16
 40010c8:	4000f2c0 	call	4000f2c <altera_avalon_mailbox_status>
                 timeout-- ;
 40010cc:	94bfffc4 	addi	r18,r18,-1
            } while ((status == 0) && timeout);
 40010d0:	103ffb26 	beq	r2,zero,40010c0 <altera_avalon_mailbox_retrieve_poll+0x68>
        }

        /* if timeout, status remain 0 */
        if (status)
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 40010d4:	80c00a17 	ldw	r3,40(r16)
 40010d8:	18c00137 	ldwio	r3,4(r3)
 40010dc:	88c00115 	stw	r3,4(r17)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 40010e0:	80c00a17 	ldw	r3,40(r16)
 40010e4:	18c00037 	ldwio	r3,0(r3)
 40010e8:	88c00015 	stw	r3,0(r17)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 40010ec:	80c00a17 	ldw	r3,40(r16)
 40010f0:	1cc00335 	stwio	r19,12(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 40010f4:	103fe026 	beq	r2,zero,4001078 <altera_avalon_mailbox_retrieve_poll+0x20>
          return 0;
 40010f8:	0005883a 	mov	r2,zero
      }
      /* Invalid Null dev and message */
      message[1] = 0;
      message[0] = 0;
      return -EINVAL;
}
 40010fc:	dfc00417 	ldw	ra,16(sp)
 4001100:	dcc00317 	ldw	r19,12(sp)
 4001104:	dc800217 	ldw	r18,8(sp)
 4001108:	dc400117 	ldw	r17,4(sp)
 400110c:	dc000017 	ldw	r16,0(sp)
 4001110:	dec00504 	addi	sp,sp,20
 4001114:	f800283a 	ret

04001118 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 4001118:	defffe04 	addi	sp,sp,-8
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 400111c:	d1600a04 	addi	r5,gp,-32728
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 4001120:	dc000015 	stw	r16,0(sp)
 4001124:	dfc00115 	stw	ra,4(sp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 4001128:	400138c0 	call	400138c <alt_find_dev>
 400112c:	1021883a 	mov	r16,r2

  if (NULL == dev)
 4001130:	1000071e 	bne	r2,zero,4001150 <altera_avalon_mutex_open+0x38>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 4001134:	d0a00c17 	ldw	r2,-32720(gp)
 4001138:	10000226 	beq	r2,zero,4001144 <altera_avalon_mutex_open+0x2c>
 400113c:	103ee83a 	callr	r2
 4001140:	00000106 	br	4001148 <altera_avalon_mutex_open+0x30>
 4001144:	d0a03c04 	addi	r2,gp,-32528
  {
    ALT_ERRNO = ENODEV;
 4001148:	00c004c4 	movi	r3,19
 400114c:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
 4001150:	8005883a 	mov	r2,r16
 4001154:	dfc00117 	ldw	ra,4(sp)
 4001158:	dc000017 	ldw	r16,0(sp)
 400115c:	dec00204 	addi	sp,sp,8
 4001160:	f800283a 	ret

04001164 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 4001164:	f800283a 	ret

04001168 <altera_avalon_mutex_lock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
 4001168:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 400116c:	1004943a 	slli	r2,r2,16

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 4001170:	20c00317 	ldw	r3,12(r4)
  int ret_code = -1;

  NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 4001174:	1144b03a 	or	r2,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 4001178:	18800035 	stwio	r2,0(r3)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 400117c:	20c00317 	ldw	r3,12(r4)
 4001180:	18c00037 	ldwio	r3,0(r3)

  if ( check == data)
 4001184:	10fff81e 	bne	r2,r3,4001168 <altera_avalon_mutex_lock>
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
}
 4001188:	f800283a 	ret

0400118c <altera_avalon_mutex_trylock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
 400118c:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 4001190:	1004943a 	slli	r2,r2,16
 4001194:	114ab03a 	or	r5,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 4001198:	20800317 	ldw	r2,12(r4)
 400119c:	11400035 	stwio	r5,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 40011a0:	20800317 	ldw	r2,12(r4)
 40011a4:	10800037 	ldwio	r2,0(r2)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 40011a8:	1144c03a 	cmpne	r2,r2,r5
}
 40011ac:	0085c83a 	sub	r2,zero,r2
 40011b0:	f800283a 	ret

040011b4 <altera_avalon_mutex_unlock>:
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 40011b4:	0005317a 	rdctl	r2,cpuid

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 40011b8:	20c00317 	ldw	r3,12(r4)
 40011bc:	01400044 	movi	r5,1
 40011c0:	19400135 	stwio	r5,4(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 40011c4:	1004943a 	slli	r2,r2,16
 40011c8:	20c00317 	ldw	r3,12(r4)
 40011cc:	18800035 	stwio	r2,0(r3)
 40011d0:	f800283a 	ret

040011d4 <altera_avalon_mutex_is_mine>:
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;

  NIOS2_READ_CPUID(id);
 40011d4:	000b317a 	rdctl	r5,cpuid

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 40011d8:	20800317 	ldw	r2,12(r4)
 40011dc:	10800037 	ldwio	r2,0(r2)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 40011e0:	1006d43a 	srli	r3,r2,16
 40011e4:	28c0031e 	bne	r5,r3,40011f4 <altera_avalon_mutex_is_mine+0x20>
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 40011e8:	10bfffcc 	andi	r2,r2,65535
 40011ec:	1004c03a 	cmpne	r2,r2,zero
 40011f0:	f800283a 	ret
 40011f4:	0005883a 	mov	r2,zero
      ret_code = 1;
    }
  }

  return ret_code;
}
 40011f8:	f800283a 	ret

040011fc <altera_avalon_mutex_first_lock>:
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  alt_u32 data;
  int ret_code = 0;

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 40011fc:	20800317 	ldw	r2,12(r4)
 4001200:	10800137 	ldwio	r2,4(r2)
  {
    ret_code = 1;
  }

  return ret_code;
}
 4001204:	1080004c 	andi	r2,r2,1
 4001208:	f800283a 	ret

0400120c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 400120c:	defffe04 	addi	sp,sp,-8
 4001210:	dfc00115 	stw	ra,4(sp)
 4001214:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4001218:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 400121c:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001220:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001224:	00bfff84 	movi	r2,-2
 4001228:	8084703a 	and	r2,r16,r2
 400122c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 4001230:	40014b40 	call	40014b4 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001234:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
 4001238:	dfc00117 	ldw	ra,4(sp)
 400123c:	dc000017 	ldw	r16,0(sp)
 4001240:	dec00204 	addi	sp,sp,8
 4001244:	f800283a 	ret

04001248 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4001248:	d0e03b17 	ldw	r3,-32532(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 400124c:	defffe04 	addi	sp,sp,-8
 4001250:	dfc00115 	stw	ra,4(sp)
 4001254:	2005883a 	mov	r2,r4
 4001258:	2809883a 	mov	r4,r5
 400125c:	300b883a 	mov	r5,r6
 4001260:	1800011e 	bne	r3,zero,4001268 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
 4001264:	d1e03b15 	stw	r7,-32532(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4001268:	00c001c4 	movi	r3,7
 400126c:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4001270:	01810034 	movhi	r6,1024
 4001274:	d8000015 	stw	zero,0(sp)
 4001278:	100f883a 	mov	r7,r2
 400127c:	31848304 	addi	r6,r6,4620
 4001280:	40009900 	call	4000990 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4001284:	dfc00117 	ldw	ra,4(sp)
 4001288:	dec00204 	addi	sp,sp,8
 400128c:	f800283a 	ret

04001290 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4001290:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4001294:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4001298:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400129c:	dc000015 	stw	r16,0(sp)
 40012a0:	dfc00115 	stw	ra,4(sp)
 40012a4:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 40012a8:	40016f00 	call	40016f0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 40012ac:	10000e26 	beq	r2,zero,40012e8 <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40012b0:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40012b4:	013e0034 	movhi	r4,63488
 40012b8:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40012bc:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40012c0:	21000044 	addi	r4,r4,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40012c4:	297fffc4 	addi	r5,r5,-1
 40012c8:	283ffe1e 	bne	r5,zero,40012c4 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 40012cc:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40012d0:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 40012d4:	18bffb16 	blt	r3,r2,40012c4 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40012d8:	8020913a 	slli	r16,r16,4
 40012dc:	843fffc4 	addi	r16,r16,-1
 40012e0:	803ffe1e 	bne	r16,zero,40012dc <alt_busy_sleep+0x4c>
 40012e4:	00000306 	br	40012f4 <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40012e8:	8020913a 	slli	r16,r16,4
 40012ec:	843fffc4 	addi	r16,r16,-1
 40012f0:	043ffe16 	blt	zero,r16,40012ec <alt_busy_sleep+0x5c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 40012f4:	0005883a 	mov	r2,zero
 40012f8:	dfc00117 	ldw	ra,4(sp)
 40012fc:	dc000017 	ldw	r16,0(sp)
 4001300:	dec00204 	addi	sp,sp,8
 4001304:	f800283a 	ret

04001308 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4001308:	0005883a 	mov	r2,zero
 400130c:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4001310:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4001314:	10800804 	addi	r2,r2,32
 4001318:	10fffd1e 	bne	r2,r3,4001310 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400131c:	f800283a 	ret

04001320 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4001320:	20000226 	beq	r4,zero,400132c <alt_dev_llist_insert+0xc>
 4001324:	20800217 	ldw	r2,8(r4)
 4001328:	1000101e 	bne	r2,zero,400136c <alt_dev_llist_insert+0x4c>
 400132c:	d0a00c17 	ldw	r2,-32720(gp)
 4001330:	10000926 	beq	r2,zero,4001358 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4001334:	deffff04 	addi	sp,sp,-4
 4001338:	dfc00015 	stw	ra,0(sp)
 400133c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 4001340:	00c00584 	movi	r3,22
 4001344:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4001348:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 400134c:	dfc00017 	ldw	ra,0(sp)
 4001350:	dec00104 	addi	sp,sp,4
 4001354:	f800283a 	ret
 4001358:	d0a03c04 	addi	r2,gp,-32528
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 400135c:	00c00584 	movi	r3,22
 4001360:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4001364:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 4001368:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 400136c:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4001370:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 4001374:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 4001378:	28800017 	ldw	r2,0(r5)
 400137c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
 4001380:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 4001384:	0005883a 	mov	r2,zero
 4001388:	f800283a 	ret

0400138c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400138c:	defffb04 	addi	sp,sp,-20
 4001390:	dcc00315 	stw	r19,12(sp)
 4001394:	dc800215 	stw	r18,8(sp)
 4001398:	dc400115 	stw	r17,4(sp)
 400139c:	dc000015 	stw	r16,0(sp)
 40013a0:	dfc00415 	stw	ra,16(sp)
 40013a4:	2027883a 	mov	r19,r4
 40013a8:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
 40013ac:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
 40013b0:	40015dc0 	call	40015dc <strlen>
 40013b4:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40013b8:	84400726 	beq	r16,r17,40013d8 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40013bc:	81000217 	ldw	r4,8(r16)
 40013c0:	900d883a 	mov	r6,r18
 40013c4:	980b883a 	mov	r5,r19
 40013c8:	40015ac0 	call	40015ac <memcmp>
 40013cc:	10000426 	beq	r2,zero,40013e0 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 40013d0:	84000017 	ldw	r16,0(r16)
 40013d4:	003ff806 	br	40013b8 <alt_find_dev+0x2c>
  }
  
  /* No match found */
  
  return NULL;
 40013d8:	0005883a 	mov	r2,zero
 40013dc:	00000106 	br	40013e4 <alt_find_dev+0x58>
 40013e0:	8005883a 	mov	r2,r16
}
 40013e4:	dfc00417 	ldw	ra,16(sp)
 40013e8:	dcc00317 	ldw	r19,12(sp)
 40013ec:	dc800217 	ldw	r18,8(sp)
 40013f0:	dc400117 	ldw	r17,4(sp)
 40013f4:	dc000017 	ldw	r16,0(sp)
 40013f8:	dec00504 	addi	sp,sp,20
 40013fc:	f800283a 	ret

04001400 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4001400:	01440004 	movi	r5,4096
 4001404:	0009883a 	mov	r4,zero
 4001408:	40015741 	jmpi	4001574 <alt_icache_flush>

0400140c <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 400140c:	213ffe84 	addi	r4,r4,-6
 4001410:	008003c4 	movi	r2,15
 4001414:	11001636 	bltu	r2,r4,4001470 <alt_exception_cause_generated_bad_addr+0x64>
 4001418:	200890ba 	slli	r4,r4,2
 400141c:	00810034 	movhi	r2,1024
 4001420:	10850c04 	addi	r2,r2,5168
 4001424:	2089883a 	add	r4,r4,r2
 4001428:	20800017 	ldw	r2,0(r4)
 400142c:	1000683a 	jmp	r2
 4001430:	04001478 	rdprs	r16,zero,81
 4001434:	04001478 	rdprs	r16,zero,81
 4001438:	04001470 	cmpltui	r16,zero,81
 400143c:	04001470 	cmpltui	r16,zero,81
 4001440:	04001470 	cmpltui	r16,zero,81
 4001444:	04001478 	rdprs	r16,zero,81
 4001448:	04001470 	cmpltui	r16,zero,81
 400144c:	04001470 	cmpltui	r16,zero,81
 4001450:	04001478 	rdprs	r16,zero,81
 4001454:	04001478 	rdprs	r16,zero,81
 4001458:	04001470 	cmpltui	r16,zero,81
 400145c:	04001478 	rdprs	r16,zero,81
 4001460:	04001470 	cmpltui	r16,zero,81
 4001464:	04001470 	cmpltui	r16,zero,81
 4001468:	04001470 	cmpltui	r16,zero,81
 400146c:	04001478 	rdprs	r16,zero,81
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4001470:	0005883a 	mov	r2,zero
 4001474:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4001478:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 400147c:	f800283a 	ret

04001480 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4001480:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4001484:	00bfff84 	movi	r2,-2
 4001488:	1884703a 	and	r2,r3,r2
 400148c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4001490:	21400117 	ldw	r5,4(r4)
 4001494:	20800017 	ldw	r2,0(r4)
 4001498:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
 400149c:	21400117 	ldw	r5,4(r4)
 40014a0:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40014a4:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
 40014a8:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40014ac:	1801703a 	wrctl	status,r3
 40014b0:	f800283a 	ret

040014b4 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40014b4:	d0a03a17 	ldw	r2,-32536(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40014b8:	defffb04 	addi	sp,sp,-20
 40014bc:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40014c0:	d4200d17 	ldw	r16,-32716(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40014c4:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40014c8:	dc800215 	stw	r18,8(sp)
 40014cc:	dc400115 	stw	r17,4(sp)
 40014d0:	dfc00415 	stw	ra,16(sp)
 40014d4:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40014d8:	d0a03a15 	stw	r2,-32536(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40014dc:	d4600d04 	addi	r17,gp,-32716
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
 40014e0:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40014e4:	84401a26 	beq	r16,r17,4001550 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40014e8:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 40014ec:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40014f0:	10000326 	beq	r2,zero,4001500 <alt_tick+0x4c>
 40014f4:	d0a03a17 	ldw	r2,-32536(gp)
 40014f8:	1000011e 	bne	r2,zero,4001500 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
 40014fc:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4001500:	d0e03a17 	ldw	r3,-32536(gp)
 4001504:	80800217 	ldw	r2,8(r16)
 4001508:	18800f36 	bltu	r3,r2,4001548 <alt_tick+0x94>
 400150c:	80800403 	ldbu	r2,16(r16)
 4001510:	10000d1e 	bne	r2,zero,4001548 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
 4001514:	80800317 	ldw	r2,12(r16)
 4001518:	81000517 	ldw	r4,20(r16)
 400151c:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4001520:	1000031e 	bne	r2,zero,4001530 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
 4001524:	8009883a 	mov	r4,r16
 4001528:	40014800 	call	4001480 <alt_alarm_stop>
 400152c:	00000606 	br	4001548 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
 4001530:	80c00217 	ldw	r3,8(r16)
 4001534:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4001538:	d0e03a17 	ldw	r3,-32536(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 400153c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4001540:	10c0012e 	bgeu	r2,r3,4001548 <alt_tick+0x94>
        {
          alarm->rollover = 1;
 4001544:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4001548:	9821883a 	mov	r16,r19
 400154c:	003fe506 	br	40014e4 <alt_tick+0x30>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 4001550:	dfc00417 	ldw	ra,16(sp)
 4001554:	dcc00317 	ldw	r19,12(sp)
 4001558:	dc800217 	ldw	r18,8(sp)
 400155c:	dc400117 	ldw	r17,4(sp)
 4001560:	dc000017 	ldw	r16,0(sp)
 4001564:	dec00504 	addi	sp,sp,20
 4001568:	f800283a 	ret

0400156c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 400156c:	000170fa 	wrctl	ienable,zero
 4001570:	f800283a 	ret

04001574 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 4001574:	00840004 	movi	r2,4096
 4001578:	1140012e 	bgeu	r2,r5,4001580 <alt_icache_flush+0xc>
 400157c:	100b883a 	mov	r5,r2
 4001580:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4001584:	2005883a 	mov	r2,r4
 4001588:	1140032e 	bgeu	r2,r5,4001598 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400158c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4001590:	10800804 	addi	r2,r2,32
 4001594:	003ffc06 	br	4001588 <alt_icache_flush+0x14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4001598:	210007cc 	andi	r4,r4,31
 400159c:	20000126 	beq	r4,zero,40015a4 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40015a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40015a4:	0000203a 	flushp
 40015a8:	f800283a 	ret

040015ac <memcmp>:
 40015ac:	218d883a 	add	r6,r4,r6
 40015b0:	21800826 	beq	r4,r6,40015d4 <memcmp+0x28>
 40015b4:	20800003 	ldbu	r2,0(r4)
 40015b8:	28c00003 	ldbu	r3,0(r5)
 40015bc:	10c00226 	beq	r2,r3,40015c8 <memcmp+0x1c>
 40015c0:	10c5c83a 	sub	r2,r2,r3
 40015c4:	f800283a 	ret
 40015c8:	21000044 	addi	r4,r4,1
 40015cc:	29400044 	addi	r5,r5,1
 40015d0:	003ff706 	br	40015b0 <memcmp+0x4>
 40015d4:	0005883a 	mov	r2,zero
 40015d8:	f800283a 	ret

040015dc <strlen>:
 40015dc:	2005883a 	mov	r2,r4
 40015e0:	10c00007 	ldb	r3,0(r2)
 40015e4:	18000226 	beq	r3,zero,40015f0 <strlen+0x14>
 40015e8:	10800044 	addi	r2,r2,1
 40015ec:	003ffc06 	br	40015e0 <strlen+0x4>
 40015f0:	1105c83a 	sub	r2,r2,r4
 40015f4:	f800283a 	ret

040015f8 <__divsi3>:
 40015f8:	20001b16 	blt	r4,zero,4001668 <__divsi3+0x70>
 40015fc:	000f883a 	mov	r7,zero
 4001600:	28001616 	blt	r5,zero,400165c <__divsi3+0x64>
 4001604:	200d883a 	mov	r6,r4
 4001608:	29001a2e 	bgeu	r5,r4,4001674 <__divsi3+0x7c>
 400160c:	00800804 	movi	r2,32
 4001610:	00c00044 	movi	r3,1
 4001614:	00000106 	br	400161c <__divsi3+0x24>
 4001618:	10000d26 	beq	r2,zero,4001650 <__divsi3+0x58>
 400161c:	294b883a 	add	r5,r5,r5
 4001620:	10bfffc4 	addi	r2,r2,-1
 4001624:	18c7883a 	add	r3,r3,r3
 4001628:	293ffb36 	bltu	r5,r4,4001618 <__divsi3+0x20>
 400162c:	0005883a 	mov	r2,zero
 4001630:	18000726 	beq	r3,zero,4001650 <__divsi3+0x58>
 4001634:	0005883a 	mov	r2,zero
 4001638:	31400236 	bltu	r6,r5,4001644 <__divsi3+0x4c>
 400163c:	314dc83a 	sub	r6,r6,r5
 4001640:	10c4b03a 	or	r2,r2,r3
 4001644:	1806d07a 	srli	r3,r3,1
 4001648:	280ad07a 	srli	r5,r5,1
 400164c:	183ffa1e 	bne	r3,zero,4001638 <__divsi3+0x40>
 4001650:	38000126 	beq	r7,zero,4001658 <__divsi3+0x60>
 4001654:	0085c83a 	sub	r2,zero,r2
 4001658:	f800283a 	ret
 400165c:	014bc83a 	sub	r5,zero,r5
 4001660:	39c0005c 	xori	r7,r7,1
 4001664:	003fe706 	br	4001604 <__divsi3+0xc>
 4001668:	0109c83a 	sub	r4,zero,r4
 400166c:	01c00044 	movi	r7,1
 4001670:	003fe306 	br	4001600 <__divsi3+0x8>
 4001674:	00c00044 	movi	r3,1
 4001678:	003fee06 	br	4001634 <__divsi3+0x3c>

0400167c <__modsi3>:
 400167c:	20001716 	blt	r4,zero,40016dc <__modsi3+0x60>
 4001680:	000f883a 	mov	r7,zero
 4001684:	2005883a 	mov	r2,r4
 4001688:	28001216 	blt	r5,zero,40016d4 <__modsi3+0x58>
 400168c:	2900162e 	bgeu	r5,r4,40016e8 <__modsi3+0x6c>
 4001690:	01800804 	movi	r6,32
 4001694:	00c00044 	movi	r3,1
 4001698:	00000106 	br	40016a0 <__modsi3+0x24>
 400169c:	30000a26 	beq	r6,zero,40016c8 <__modsi3+0x4c>
 40016a0:	294b883a 	add	r5,r5,r5
 40016a4:	31bfffc4 	addi	r6,r6,-1
 40016a8:	18c7883a 	add	r3,r3,r3
 40016ac:	293ffb36 	bltu	r5,r4,400169c <__modsi3+0x20>
 40016b0:	18000526 	beq	r3,zero,40016c8 <__modsi3+0x4c>
 40016b4:	1806d07a 	srli	r3,r3,1
 40016b8:	11400136 	bltu	r2,r5,40016c0 <__modsi3+0x44>
 40016bc:	1145c83a 	sub	r2,r2,r5
 40016c0:	280ad07a 	srli	r5,r5,1
 40016c4:	183ffb1e 	bne	r3,zero,40016b4 <__modsi3+0x38>
 40016c8:	38000126 	beq	r7,zero,40016d0 <__modsi3+0x54>
 40016cc:	0085c83a 	sub	r2,zero,r2
 40016d0:	f800283a 	ret
 40016d4:	014bc83a 	sub	r5,zero,r5
 40016d8:	003fec06 	br	400168c <__modsi3+0x10>
 40016dc:	0109c83a 	sub	r4,zero,r4
 40016e0:	01c00044 	movi	r7,1
 40016e4:	003fe706 	br	4001684 <__modsi3+0x8>
 40016e8:	00c00044 	movi	r3,1
 40016ec:	003ff106 	br	40016b4 <__modsi3+0x38>

040016f0 <__udivsi3>:
 40016f0:	200d883a 	mov	r6,r4
 40016f4:	2900152e 	bgeu	r5,r4,400174c <__udivsi3+0x5c>
 40016f8:	28001416 	blt	r5,zero,400174c <__udivsi3+0x5c>
 40016fc:	00800804 	movi	r2,32
 4001700:	00c00044 	movi	r3,1
 4001704:	00000206 	br	4001710 <__udivsi3+0x20>
 4001708:	10000e26 	beq	r2,zero,4001744 <__udivsi3+0x54>
 400170c:	28000516 	blt	r5,zero,4001724 <__udivsi3+0x34>
 4001710:	294b883a 	add	r5,r5,r5
 4001714:	10bfffc4 	addi	r2,r2,-1
 4001718:	18c7883a 	add	r3,r3,r3
 400171c:	293ffa36 	bltu	r5,r4,4001708 <__udivsi3+0x18>
 4001720:	18000826 	beq	r3,zero,4001744 <__udivsi3+0x54>
 4001724:	0005883a 	mov	r2,zero
 4001728:	31400236 	bltu	r6,r5,4001734 <__udivsi3+0x44>
 400172c:	314dc83a 	sub	r6,r6,r5
 4001730:	10c4b03a 	or	r2,r2,r3
 4001734:	1806d07a 	srli	r3,r3,1
 4001738:	280ad07a 	srli	r5,r5,1
 400173c:	183ffa1e 	bne	r3,zero,4001728 <__udivsi3+0x38>
 4001740:	f800283a 	ret
 4001744:	0005883a 	mov	r2,zero
 4001748:	f800283a 	ret
 400174c:	00c00044 	movi	r3,1
 4001750:	003ff406 	br	4001724 <__udivsi3+0x34>

04001754 <__umodsi3>:
 4001754:	2005883a 	mov	r2,r4
 4001758:	2900122e 	bgeu	r5,r4,40017a4 <__umodsi3+0x50>
 400175c:	28001116 	blt	r5,zero,40017a4 <__umodsi3+0x50>
 4001760:	01800804 	movi	r6,32
 4001764:	00c00044 	movi	r3,1
 4001768:	00000206 	br	4001774 <__umodsi3+0x20>
 400176c:	30000c26 	beq	r6,zero,40017a0 <__umodsi3+0x4c>
 4001770:	28000516 	blt	r5,zero,4001788 <__umodsi3+0x34>
 4001774:	294b883a 	add	r5,r5,r5
 4001778:	31bfffc4 	addi	r6,r6,-1
 400177c:	18c7883a 	add	r3,r3,r3
 4001780:	293ffa36 	bltu	r5,r4,400176c <__umodsi3+0x18>
 4001784:	18000626 	beq	r3,zero,40017a0 <__umodsi3+0x4c>
 4001788:	1806d07a 	srli	r3,r3,1
 400178c:	11400136 	bltu	r2,r5,4001794 <__umodsi3+0x40>
 4001790:	1145c83a 	sub	r2,r2,r5
 4001794:	280ad07a 	srli	r5,r5,1
 4001798:	183ffb1e 	bne	r3,zero,4001788 <__umodsi3+0x34>
 400179c:	f800283a 	ret
 40017a0:	f800283a 	ret
 40017a4:	00c00044 	movi	r3,1
 40017a8:	003ff706 	br	4001788 <__umodsi3+0x34>
